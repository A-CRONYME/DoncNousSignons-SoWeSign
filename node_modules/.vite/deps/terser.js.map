{
  "version": 3,
  "sources": ["../../@jridgewell/source-map/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.mjs", "../../@jridgewell/source-map/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.mjs", "../../@jridgewell/source-map/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.mjs", "../../@jridgewell/source-map/node_modules/@jridgewell/set-array/dist/set-array.mjs", "../../@jridgewell/source-map/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs", "../../@jridgewell/src/source-map.ts", "../../acorn/dist/acorn.js", "../../terser/lib/utils/index.js", "../../terser/lib/parse.js", "../../terser/lib/ast.js", "../../terser/lib/transform.js", "../../terser/lib/mozilla-ast.js", "../../terser/lib/utils/first_in_statement.js", "../../terser/lib/output.js", "../../terser/lib/equivalent-to.js", "../../terser/lib/scope.js", "../../terser/lib/size.js", "../../terser/lib/compress/compressor-flags.js", "../../terser/lib/compress/common.js", "../../terser/lib/compress/native-objects.js", "../../terser/lib/compress/inference.js", "../../terser/lib/compress/evaluate.js", "../../terser/lib/compress/drop-side-effect-free.js", "../../terser/lib/compress/drop-unused.js", "../../terser/lib/compress/reduce-vars.js", "../../terser/lib/compress/tighten-body.js", "../../terser/lib/compress/inline.js", "../../terser/lib/compress/index.js", "../../terser/lib/sourcemap.js", "../../terser/tools/domprops.js", "../../terser/lib/propmangle.js", "../../terser/lib/minify.js", "../../terser/lib/cli.js", "../../terser/main.js"],
  "sourcesContent": ["const comma = ','.charCodeAt(0);\nconst semicolon = ';'.charCodeAt(0);\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst intToChar = new Uint8Array(64); // 64 possible chars.\nconst charToInteger = new Uint8Array(128); // z is 122 in ASCII\nfor (let i = 0; i < chars.length; i++) {\n    const c = chars.charCodeAt(i);\n    charToInteger[c] = i;\n    intToChar[i] = c;\n}\n// Provide a fallback for older environments.\nconst td = typeof TextDecoder !== 'undefined'\n    ? new TextDecoder()\n    : typeof Buffer !== 'undefined'\n        ? {\n            decode(buf) {\n                const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\n                return out.toString();\n            },\n        }\n        : {\n            decode(buf) {\n                let out = '';\n                for (let i = 0; i < buf.length; i++) {\n                    out += String.fromCharCode(buf[i]);\n                }\n                return out;\n            },\n        };\nfunction decode(mappings) {\n    const state = new Int32Array(5);\n    const decoded = [];\n    let line = [];\n    let sorted = true;\n    let lastCol = 0;\n    for (let i = 0; i < mappings.length;) {\n        const c = mappings.charCodeAt(i);\n        if (c === comma) {\n            i++;\n        }\n        else if (c === semicolon) {\n            state[0] = lastCol = 0;\n            if (!sorted)\n                sort(line);\n            sorted = true;\n            decoded.push(line);\n            line = [];\n            i++;\n        }\n        else {\n            i = decodeInteger(mappings, i, state, 0); // generatedCodeColumn\n            const col = state[0];\n            if (col < lastCol)\n                sorted = false;\n            lastCol = col;\n            if (!hasMoreSegments(mappings, i)) {\n                line.push([col]);\n                continue;\n            }\n            i = decodeInteger(mappings, i, state, 1); // sourceFileIndex\n            i = decodeInteger(mappings, i, state, 2); // sourceCodeLine\n            i = decodeInteger(mappings, i, state, 3); // sourceCodeColumn\n            if (!hasMoreSegments(mappings, i)) {\n                line.push([col, state[1], state[2], state[3]]);\n                continue;\n            }\n            i = decodeInteger(mappings, i, state, 4); // nameIndex\n            line.push([col, state[1], state[2], state[3], state[4]]);\n        }\n    }\n    if (!sorted)\n        sort(line);\n    decoded.push(line);\n    return decoded;\n}\nfunction decodeInteger(mappings, pos, state, j) {\n    let value = 0;\n    let shift = 0;\n    let integer = 0;\n    do {\n        const c = mappings.charCodeAt(pos++);\n        integer = charToInteger[c];\n        value |= (integer & 31) << shift;\n        shift += 5;\n    } while (integer & 32);\n    const shouldNegate = value & 1;\n    value >>>= 1;\n    if (shouldNegate) {\n        value = -0x80000000 | -value;\n    }\n    state[j] += value;\n    return pos;\n}\nfunction hasMoreSegments(mappings, i) {\n    if (i >= mappings.length)\n        return false;\n    const c = mappings.charCodeAt(i);\n    if (c === comma || c === semicolon)\n        return false;\n    return true;\n}\nfunction sort(line) {\n    line.sort(sortComparator);\n}\nfunction sortComparator(a, b) {\n    return a[0] - b[0];\n}\nfunction encode(decoded) {\n    const state = new Int32Array(5);\n    let buf = new Uint8Array(1024);\n    let pos = 0;\n    for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n        if (i > 0) {\n            buf = reserve(buf, pos, 1);\n            buf[pos++] = semicolon;\n        }\n        if (line.length === 0)\n            continue;\n        state[0] = 0;\n        for (let j = 0; j < line.length; j++) {\n            const segment = line[j];\n            // We can push up to 5 ints, each int can take at most 7 chars, and we\n            // may push a comma.\n            buf = reserve(buf, pos, 36);\n            if (j > 0)\n                buf[pos++] = comma;\n            pos = encodeInteger(buf, pos, state, segment, 0); // generatedCodeColumn\n            if (segment.length === 1)\n                continue;\n            pos = encodeInteger(buf, pos, state, segment, 1); // sourceFileIndex\n            pos = encodeInteger(buf, pos, state, segment, 2); // sourceCodeLine\n            pos = encodeInteger(buf, pos, state, segment, 3); // sourceCodeColumn\n            if (segment.length === 4)\n                continue;\n            pos = encodeInteger(buf, pos, state, segment, 4); // nameIndex\n        }\n    }\n    return td.decode(buf.subarray(0, pos));\n}\nfunction reserve(buf, pos, count) {\n    if (buf.length > pos + count)\n        return buf;\n    const swap = new Uint8Array(buf.length * 2);\n    swap.set(buf);\n    return swap;\n}\nfunction encodeInteger(buf, pos, state, segment, j) {\n    const next = segment[j];\n    let num = next - state[j];\n    state[j] = next;\n    num = num < 0 ? (-num << 1) | 1 : num << 1;\n    do {\n        let clamped = num & 0b011111;\n        num >>>= 5;\n        if (num > 0)\n            clamped |= 0b100000;\n        buf[pos++] = intToChar[clamped];\n    } while (num > 0);\n    return pos;\n}\n\nexport { decode, encode };\n//# sourceMappingURL=sourcemap-codec.mjs.map\n", "// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\n/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n */\nconst urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?/;\n/**\n * File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start\n * with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).\n *\n * 1. Host, optional.\n * 2. Path, which may inclue \"/\", guaranteed.\n */\nconst fileRegex = /^file:(?:\\/\\/((?![a-z]:)[^/]*)?)?(\\/?.*)/i;\nfunction isAbsoluteUrl(input) {\n    return schemeRegex.test(input);\n}\nfunction isSchemeRelativeUrl(input) {\n    return input.startsWith('//');\n}\nfunction isAbsolutePath(input) {\n    return input.startsWith('/');\n}\nfunction isFileUrl(input) {\n    return input.startsWith('file:');\n}\nfunction parseAbsoluteUrl(input) {\n    const match = urlRegex.exec(input);\n    return makeUrl(match[1], match[2] || '', match[3], match[4] || '', match[5] || '/');\n}\nfunction parseFileUrl(input) {\n    const match = fileRegex.exec(input);\n    const path = match[2];\n    return makeUrl('file:', '', match[1] || '', '', isAbsolutePath(path) ? path : '/' + path);\n}\nfunction makeUrl(scheme, user, host, port, path) {\n    return {\n        scheme,\n        user,\n        host,\n        port,\n        path,\n        relativePath: false,\n    };\n}\nfunction parseUrl(input) {\n    if (isSchemeRelativeUrl(input)) {\n        const url = parseAbsoluteUrl('http:' + input);\n        url.scheme = '';\n        return url;\n    }\n    if (isAbsolutePath(input)) {\n        const url = parseAbsoluteUrl('http://foo.com' + input);\n        url.scheme = '';\n        url.host = '';\n        return url;\n    }\n    if (isFileUrl(input))\n        return parseFileUrl(input);\n    if (isAbsoluteUrl(input))\n        return parseAbsoluteUrl(input);\n    const url = parseAbsoluteUrl('http://foo.com/' + input);\n    url.scheme = '';\n    url.host = '';\n    url.relativePath = true;\n    return url;\n}\nfunction stripPathFilename(path) {\n    // If a path ends with a parent directory \"..\", then it's a relative path with excess parent\n    // paths. It's not a file, so we can't strip it.\n    if (path.endsWith('/..'))\n        return path;\n    const index = path.lastIndexOf('/');\n    return path.slice(0, index + 1);\n}\nfunction mergePaths(url, base) {\n    // If we're not a relative path, then we're an absolute path, and it doesn't matter what base is.\n    if (!url.relativePath)\n        return;\n    normalizePath(base);\n    // If the path is just a \"/\", then it was an empty path to begin with (remember, we're a relative\n    // path).\n    if (url.path === '/') {\n        url.path = base.path;\n    }\n    else {\n        // Resolution happens relative to the base path's directory, not the file.\n        url.path = stripPathFilename(base.path) + url.path;\n    }\n    // If the base path is absolute, then our path is now absolute too.\n    url.relativePath = base.relativePath;\n}\n/**\n * The path can have empty directories \"//\", unneeded parents \"foo/..\", or current directory\n * \"foo/.\". We need to normalize to a standard representation.\n */\nfunction normalizePath(url) {\n    const { relativePath } = url;\n    const pieces = url.path.split('/');\n    // We need to preserve the first piece always, so that we output a leading slash. The item at\n    // pieces[0] is an empty string.\n    let pointer = 1;\n    // Positive is the number of real directories we've output, used for popping a parent directory.\n    // Eg, \"foo/bar/..\" will have a positive 2, and we can decrement to be left with just \"foo\".\n    let positive = 0;\n    // We need to keep a trailing slash if we encounter an empty directory (eg, splitting \"foo/\" will\n    // generate `[\"foo\", \"\"]` pieces). And, if we pop a parent directory. But once we encounter a\n    // real directory, we won't need to append, unless the other conditions happen again.\n    let addTrailingSlash = false;\n    for (let i = 1; i < pieces.length; i++) {\n        const piece = pieces[i];\n        // An empty directory, could be a trailing slash, or just a double \"//\" in the path.\n        if (!piece) {\n            addTrailingSlash = true;\n            continue;\n        }\n        // If we encounter a real directory, then we don't need to append anymore.\n        addTrailingSlash = false;\n        // A current directory, which we can always drop.\n        if (piece === '.')\n            continue;\n        // A parent directory, we need to see if there are any real directories we can pop. Else, we\n        // have an excess of parents, and we'll need to keep the \"..\".\n        if (piece === '..') {\n            if (positive) {\n                addTrailingSlash = true;\n                positive--;\n                pointer--;\n            }\n            else if (relativePath) {\n                // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute\n                // URL, protocol relative URL, or an absolute path, we don't need to keep excess.\n                pieces[pointer++] = piece;\n            }\n            continue;\n        }\n        // We've encountered a real directory. Move it to the next insertion pointer, which accounts for\n        // any popped or dropped directories.\n        pieces[pointer++] = piece;\n        positive++;\n    }\n    let path = '';\n    for (let i = 1; i < pointer; i++) {\n        path += '/' + pieces[i];\n    }\n    if (!path || (addTrailingSlash && !path.endsWith('/..'))) {\n        path += '/';\n    }\n    url.path = path;\n}\n/**\n * Attempts to resolve `input` URL/path relative to `base`.\n */\nfunction resolve(input, base) {\n    if (!input && !base)\n        return '';\n    const url = parseUrl(input);\n    // If we have a base, and the input isn't already an absolute URL, then we need to merge.\n    if (base && !url.scheme) {\n        const baseUrl = parseUrl(base);\n        url.scheme = baseUrl.scheme;\n        // If there's no host, then we were just a path.\n        if (!url.host) {\n            // The host, user, and port are joined, you can't copy one without the others.\n            url.user = baseUrl.user;\n            url.host = baseUrl.host;\n            url.port = baseUrl.port;\n        }\n        mergePaths(url, baseUrl);\n    }\n    normalizePath(url);\n    // If the input (and base, if there was one) are both relative, then we need to output a relative.\n    if (url.relativePath) {\n        // The first char is always a \"/\".\n        const path = url.path.slice(1);\n        if (!path)\n            return '.';\n        // If base started with a leading \".\", or there is no base and input started with a \".\", then we\n        // need to ensure that the relative path starts with a \".\". We don't know if relative starts\n        // with a \"..\", though, so check before prepending.\n        const keepRelative = (base || input).startsWith('.');\n        return !keepRelative || path.startsWith('.') ? path : './' + path;\n    }\n    // If there's no host (and no scheme/user/port), then we need to output an absolute path.\n    if (!url.scheme && !url.host)\n        return url.path;\n    // We're outputting either an absolute URL, or a protocol relative one.\n    return `${url.scheme}//${url.user}${url.host}${url.port}${url.path}`;\n}\n\nexport { resolve as default };\n//# sourceMappingURL=resolve-uri.mjs.map\n", "import { encode, decode } from '@jridgewell/sourcemap-codec';\nimport resolveUri from '@jridgewell/resolve-uri';\n\nfunction resolve(input, base) {\n    // The base is always treated as a directory, if it's not empty.\n    // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n    // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n    if (base && !base.endsWith('/'))\n        base += '/';\n    return resolveUri(input, base);\n}\n\n/**\n * Removes everything after the last \"/\", but leaves the slash.\n */\nfunction stripFilename(path) {\n    if (!path)\n        return '';\n    const index = path.lastIndexOf('/');\n    return path.slice(0, index + 1);\n}\n\nconst COLUMN = 0;\nconst SOURCES_INDEX = 1;\nconst SOURCE_LINE = 2;\nconst SOURCE_COLUMN = 3;\nconst NAMES_INDEX = 4;\nconst REV_GENERATED_LINE = 1;\nconst REV_GENERATED_COLUMN = 2;\n\nfunction maybeSort(mappings, owned) {\n    const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);\n    if (unsortedIndex === mappings.length)\n        return mappings;\n    // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If\n    // not, we do not want to modify the consumer's input array.\n    if (!owned)\n        mappings = mappings.slice();\n    for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {\n        mappings[i] = sortSegments(mappings[i], owned);\n    }\n    return mappings;\n}\nfunction nextUnsortedSegmentLine(mappings, start) {\n    for (let i = start; i < mappings.length; i++) {\n        if (!isSorted(mappings[i]))\n            return i;\n    }\n    return mappings.length;\n}\nfunction isSorted(line) {\n    for (let j = 1; j < line.length; j++) {\n        if (line[j][COLUMN] < line[j - 1][COLUMN]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction sortSegments(line, owned) {\n    if (!owned)\n        line = line.slice();\n    return line.sort(sortComparator);\n}\nfunction sortComparator(a, b) {\n    return a[COLUMN] - b[COLUMN];\n}\n\nlet found = false;\n/**\n * A binary search implementation that returns the index if a match is found.\n * If no match is found, then the left-index (the index associated with the item that comes just\n * before the desired index) is returned. To maintain proper sort order, a splice would happen at\n * the next index:\n *\n * ```js\n * const array = [1, 3];\n * const needle = 2;\n * const index = binarySearch(array, needle, (item, needle) => item - needle);\n *\n * assert.equal(index, 0);\n * array.splice(index + 1, 0, needle);\n * assert.deepEqual(array, [1, 2, 3]);\n * ```\n */\nfunction binarySearch(haystack, needle, low, high) {\n    while (low <= high) {\n        const mid = low + ((high - low) >> 1);\n        const cmp = haystack[mid][COLUMN] - needle;\n        if (cmp === 0) {\n            found = true;\n            return mid;\n        }\n        if (cmp < 0) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    found = false;\n    return low - 1;\n}\nfunction upperBound(haystack, needle, index) {\n    for (let i = index + 1; i < haystack.length; i++, index++) {\n        if (haystack[i][COLUMN] !== needle)\n            break;\n    }\n    return index;\n}\nfunction lowerBound(haystack, needle, index) {\n    for (let i = index - 1; i >= 0; i--, index--) {\n        if (haystack[i][COLUMN] !== needle)\n            break;\n    }\n    return index;\n}\nfunction memoizedState() {\n    return {\n        lastKey: -1,\n        lastNeedle: -1,\n        lastIndex: -1,\n    };\n}\n/**\n * This overly complicated beast is just to record the last tested line/column and the resulting\n * index, allowing us to skip a few tests if mappings are monotonically increasing.\n */\nfunction memoizedBinarySearch(haystack, needle, state, key) {\n    const { lastKey, lastNeedle, lastIndex } = state;\n    let low = 0;\n    let high = haystack.length - 1;\n    if (key === lastKey) {\n        if (needle === lastNeedle) {\n            found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;\n            return lastIndex;\n        }\n        if (needle >= lastNeedle) {\n            // lastIndex may be -1 if the previous needle was not found.\n            low = lastIndex === -1 ? 0 : lastIndex;\n        }\n        else {\n            high = lastIndex;\n        }\n    }\n    state.lastKey = key;\n    state.lastNeedle = needle;\n    return (state.lastIndex = binarySearch(haystack, needle, low, high));\n}\n\n// Rebuilds the original source files, with mappings that are ordered by source line/column instead\n// of generated line/column.\nfunction buildBySources(decoded, memos) {\n    const sources = memos.map(buildNullArray);\n    for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n        for (let j = 0; j < line.length; j++) {\n            const seg = line[j];\n            if (seg.length === 1)\n                continue;\n            const sourceIndex = seg[SOURCES_INDEX];\n            const sourceLine = seg[SOURCE_LINE];\n            const sourceColumn = seg[SOURCE_COLUMN];\n            const originalSource = sources[sourceIndex];\n            const originalLine = (originalSource[sourceLine] || (originalSource[sourceLine] = []));\n            const memo = memos[sourceIndex];\n            // The binary search either found a match, or it found the left-index just before where the\n            // segment should go. Either way, we want to insert after that. And there may be multiple\n            // generated segments associated with an original location, so there may need to move several\n            // indexes before we find where we need to insert.\n            const index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));\n            insert(originalLine, (memo.lastIndex = index + 1), [sourceColumn, i, seg[COLUMN]]);\n        }\n    }\n    return sources;\n}\nfunction insert(array, index, value) {\n    for (let i = array.length; i > index; i--) {\n        array[i] = array[i - 1];\n    }\n    array[index] = value;\n}\n// Null arrays allow us to use ordered index keys without actually allocating contiguous memory like\n// a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.\n// Numeric properties on objects are magically sorted in ascending order by the engine regardless of\n// the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending\n// order when iterating with for-in.\nfunction buildNullArray() {\n    return { __proto__: null };\n}\n\nconst AnyMap = function (map, mapUrl) {\n    const parsed = typeof map === 'string' ? JSON.parse(map) : map;\n    if (!('sections' in parsed))\n        return new TraceMap(parsed, mapUrl);\n    const mappings = [];\n    const sources = [];\n    const sourcesContent = [];\n    const names = [];\n    const { sections } = parsed;\n    let i = 0;\n    for (; i < sections.length - 1; i++) {\n        const no = sections[i + 1].offset;\n        addSection(sections[i], mapUrl, mappings, sources, sourcesContent, names, no.line, no.column);\n    }\n    if (sections.length > 0) {\n        addSection(sections[i], mapUrl, mappings, sources, sourcesContent, names, Infinity, Infinity);\n    }\n    const joined = {\n        version: 3,\n        file: parsed.file,\n        names,\n        sources,\n        sourcesContent,\n        mappings,\n    };\n    return presortedDecodedMap(joined);\n};\nfunction addSection(section, mapUrl, mappings, sources, sourcesContent, names, stopLine, stopColumn) {\n    const map = AnyMap(section.map, mapUrl);\n    const { line: lineOffset, column: columnOffset } = section.offset;\n    const sourcesOffset = sources.length;\n    const namesOffset = names.length;\n    const decoded = decodedMappings(map);\n    const { resolvedSources } = map;\n    append(sources, resolvedSources);\n    append(sourcesContent, map.sourcesContent || fillSourcesContent(resolvedSources.length));\n    append(names, map.names);\n    // If this section jumps forwards several lines, we need to add lines to the output mappings catch up.\n    for (let i = mappings.length; i <= lineOffset; i++)\n        mappings.push([]);\n    // We can only add so many lines before we step into the range that the next section's map\n    // controls. When we get to the last line, then we'll start checking the segments to see if\n    // they've crossed into the column range.\n    const stopI = stopLine - lineOffset;\n    const len = Math.min(decoded.length, stopI + 1);\n    for (let i = 0; i < len; i++) {\n        const line = decoded[i];\n        // On the 0th loop, the line will already exist due to a previous section, or the line catch up\n        // loop above.\n        const out = i === 0 ? mappings[lineOffset] : (mappings[lineOffset + i] = []);\n        // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the\n        // map can be multiple lines), it doesn't.\n        const cOffset = i === 0 ? columnOffset : 0;\n        for (let j = 0; j < line.length; j++) {\n            const seg = line[j];\n            const column = cOffset + seg[COLUMN];\n            // If this segment steps into the column range that the next section's map controls, we need\n            // to stop early.\n            if (i === stopI && column >= stopColumn)\n                break;\n            if (seg.length === 1) {\n                out.push([column]);\n                continue;\n            }\n            const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];\n            const sourceLine = seg[SOURCE_LINE];\n            const sourceColumn = seg[SOURCE_COLUMN];\n            if (seg.length === 4) {\n                out.push([column, sourcesIndex, sourceLine, sourceColumn]);\n                continue;\n            }\n            out.push([column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);\n        }\n    }\n}\nfunction append(arr, other) {\n    for (let i = 0; i < other.length; i++)\n        arr.push(other[i]);\n}\n// Sourcemaps don't need to have sourcesContent, and if they don't, we need to create an array of\n// equal length to the sources. This is because the sources and sourcesContent are paired arrays,\n// where `sourcesContent[i]` is the content of the `sources[i]` file. If we didn't, then joined\n// sourcemap would desynchronize the sources/contents.\nfunction fillSourcesContent(len) {\n    const sourcesContent = [];\n    for (let i = 0; i < len; i++)\n        sourcesContent[i] = null;\n    return sourcesContent;\n}\n\nconst INVALID_ORIGINAL_MAPPING = Object.freeze({\n    source: null,\n    line: null,\n    column: null,\n    name: null,\n});\nconst INVALID_GENERATED_MAPPING = Object.freeze({\n    line: null,\n    column: null,\n});\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\nconst LEAST_UPPER_BOUND = -1;\nconst GREATEST_LOWER_BOUND = 1;\n/**\n * Returns the encoded (VLQ string) form of the SourceMap's mappings field.\n */\nlet encodedMappings;\n/**\n * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.\n */\nlet decodedMappings;\n/**\n * A low-level API to find the segment associated with a generated line/column (think, from a\n * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.\n */\nlet traceSegment;\n/**\n * A higher-level API to find the source/line/column associated with a generated line/column\n * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in\n * `source-map` library.\n */\nlet originalPositionFor;\n/**\n * Finds the source/line/column directly after the mapping returned by originalPositionFor, provided\n * the found mapping is from the same source and line as the originalPositionFor mapping.\n *\n * Eg, in the code `let id = 1`, `originalPositionAfter` could find the mapping associated with `1`\n * using the same needle that would return `id` when calling `originalPositionFor`.\n */\nlet generatedPositionFor;\n/**\n * Iterates each mapping in generated position order.\n */\nlet eachMapping;\n/**\n * A helper that skips sorting of the input map's mappings array, which can be expensive for larger\n * maps.\n */\nlet presortedDecodedMap;\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nlet decodedMap;\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nlet encodedMap;\nclass TraceMap {\n    constructor(map, mapUrl) {\n        this._decodedMemo = memoizedState();\n        this._bySources = undefined;\n        this._bySourceMemos = undefined;\n        const isString = typeof map === 'string';\n        if (!isString && map.constructor === TraceMap)\n            return map;\n        const parsed = (isString ? JSON.parse(map) : map);\n        const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;\n        this.version = version;\n        this.file = file;\n        this.names = names;\n        this.sourceRoot = sourceRoot;\n        this.sources = sources;\n        this.sourcesContent = sourcesContent;\n        if (sourceRoot || mapUrl) {\n            const from = resolve(sourceRoot || '', stripFilename(mapUrl));\n            this.resolvedSources = sources.map((s) => resolve(s || '', from));\n        }\n        else {\n            this.resolvedSources = sources.map((s) => s || '');\n        }\n        const { mappings } = parsed;\n        if (typeof mappings === 'string') {\n            this._encoded = mappings;\n            this._decoded = undefined;\n        }\n        else {\n            this._encoded = undefined;\n            this._decoded = maybeSort(mappings, isString);\n        }\n    }\n}\n(() => {\n    encodedMappings = (map) => {\n        var _a;\n        return ((_a = map._encoded) !== null && _a !== void 0 ? _a : (map._encoded = encode(map._decoded)));\n    };\n    decodedMappings = (map) => {\n        return (map._decoded || (map._decoded = decode(map._encoded)));\n    };\n    traceSegment = (map, line, column) => {\n        const decoded = decodedMappings(map);\n        // It's common for parent source maps to have pointers to lines that have no\n        // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n        if (line >= decoded.length)\n            return null;\n        return traceSegmentInternal(decoded[line], map._decodedMemo, line, column, GREATEST_LOWER_BOUND);\n    };\n    originalPositionFor = (map, { line, column, bias }) => {\n        line--;\n        if (line < 0)\n            throw new Error(LINE_GTR_ZERO);\n        if (column < 0)\n            throw new Error(COL_GTR_EQ_ZERO);\n        const decoded = decodedMappings(map);\n        // It's common for parent source maps to have pointers to lines that have no\n        // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n        if (line >= decoded.length)\n            return INVALID_ORIGINAL_MAPPING;\n        const segment = traceSegmentInternal(decoded[line], map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);\n        if (segment == null)\n            return INVALID_ORIGINAL_MAPPING;\n        if (segment.length == 1)\n            return INVALID_ORIGINAL_MAPPING;\n        const { names, resolvedSources } = map;\n        return {\n            source: resolvedSources[segment[SOURCES_INDEX]],\n            line: segment[SOURCE_LINE] + 1,\n            column: segment[SOURCE_COLUMN],\n            name: segment.length === 5 ? names[segment[NAMES_INDEX]] : null,\n        };\n    };\n    generatedPositionFor = (map, { source, line, column, bias }) => {\n        line--;\n        if (line < 0)\n            throw new Error(LINE_GTR_ZERO);\n        if (column < 0)\n            throw new Error(COL_GTR_EQ_ZERO);\n        const { sources, resolvedSources } = map;\n        let sourceIndex = sources.indexOf(source);\n        if (sourceIndex === -1)\n            sourceIndex = resolvedSources.indexOf(source);\n        if (sourceIndex === -1)\n            return INVALID_GENERATED_MAPPING;\n        const generated = (map._bySources || (map._bySources = buildBySources(decodedMappings(map), (map._bySourceMemos = sources.map(memoizedState)))));\n        const memos = map._bySourceMemos;\n        const segments = generated[sourceIndex][line];\n        if (segments == null)\n            return INVALID_GENERATED_MAPPING;\n        const segment = traceSegmentInternal(segments, memos[sourceIndex], line, column, bias || GREATEST_LOWER_BOUND);\n        if (segment == null)\n            return INVALID_GENERATED_MAPPING;\n        return {\n            line: segment[REV_GENERATED_LINE] + 1,\n            column: segment[REV_GENERATED_COLUMN],\n        };\n    };\n    eachMapping = (map, cb) => {\n        const decoded = decodedMappings(map);\n        const { names, resolvedSources } = map;\n        for (let i = 0; i < decoded.length; i++) {\n            const line = decoded[i];\n            for (let j = 0; j < line.length; j++) {\n                const seg = line[j];\n                const generatedLine = i + 1;\n                const generatedColumn = seg[0];\n                let source = null;\n                let originalLine = null;\n                let originalColumn = null;\n                let name = null;\n                if (seg.length !== 1) {\n                    source = resolvedSources[seg[1]];\n                    originalLine = seg[2] + 1;\n                    originalColumn = seg[3];\n                }\n                if (seg.length === 5)\n                    name = names[seg[4]];\n                cb({\n                    generatedLine,\n                    generatedColumn,\n                    source,\n                    originalLine,\n                    originalColumn,\n                    name,\n                });\n            }\n        }\n    };\n    presortedDecodedMap = (map, mapUrl) => {\n        const clone = Object.assign({}, map);\n        clone.mappings = [];\n        const tracer = new TraceMap(clone, mapUrl);\n        tracer._decoded = map.mappings;\n        return tracer;\n    };\n    decodedMap = (map) => {\n        return {\n            version: 3,\n            file: map.file,\n            names: map.names,\n            sourceRoot: map.sourceRoot,\n            sources: map.sources,\n            sourcesContent: map.sourcesContent,\n            mappings: decodedMappings(map),\n        };\n    };\n    encodedMap = (map) => {\n        return {\n            version: 3,\n            file: map.file,\n            names: map.names,\n            sourceRoot: map.sourceRoot,\n            sources: map.sources,\n            sourcesContent: map.sourcesContent,\n            mappings: encodedMappings(map),\n        };\n    };\n})();\nfunction traceSegmentInternal(segments, memo, line, column, bias) {\n    let index = memoizedBinarySearch(segments, column, memo, line);\n    if (found) {\n        index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);\n    }\n    else if (bias === LEAST_UPPER_BOUND)\n        index++;\n    if (index === -1 || index === segments.length)\n        return null;\n    return segments[index];\n}\n\nexport { AnyMap, GREATEST_LOWER_BOUND, LEAST_UPPER_BOUND, TraceMap, decodedMap, decodedMappings, eachMapping, encodedMap, encodedMappings, generatedPositionFor, originalPositionFor, presortedDecodedMap, traceSegment };\n//# sourceMappingURL=trace-mapping.mjs.map\n", "/**\n * Gets the index associated with `key` in the backing array, if it is already present.\n */\nlet get;\n/**\n * Puts `key` into the backing array, if it is not already present. Returns\n * the index of the `key` in the backing array.\n */\nlet put;\n/**\n * Pops the last added item out of the SetArray.\n */\nlet pop;\n/**\n * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n * index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of the backing array,\n * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n * and there are never duplicates.\n */\nclass SetArray {\n    constructor() {\n        this._indexes = { __proto__: null };\n        this.array = [];\n    }\n}\n(() => {\n    get = (strarr, key) => strarr._indexes[key];\n    put = (strarr, key) => {\n        // The key may or may not be present. If it is present, it's a number.\n        const index = get(strarr, key);\n        if (index !== undefined)\n            return index;\n        const { array, _indexes: indexes } = strarr;\n        return (indexes[key] = array.push(key) - 1);\n    };\n    pop = (strarr) => {\n        const { array, _indexes: indexes } = strarr;\n        if (array.length === 0)\n            return;\n        const last = array.pop();\n        indexes[last] = undefined;\n    };\n})();\n\nexport { SetArray, get, pop, put };\n//# sourceMappingURL=set-array.mjs.map\n", "import { SetArray, put } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\nimport { TraceMap, decodedMappings } from '@jridgewell/trace-mapping';\n\nconst COLUMN = 0;\nconst SOURCES_INDEX = 1;\nconst SOURCE_LINE = 2;\nconst SOURCE_COLUMN = 3;\nconst NAMES_INDEX = 4;\n\nconst NO_NAME = -1;\n/**\n * A low-level API to associate a generated position with an original source position. Line and\n * column here are 0-based, unlike `addMapping`.\n */\nlet addSegment;\n/**\n * A high-level API to associate a generated position with an original source position. Line is\n * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n */\nlet addMapping;\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nlet maybeAddSegment;\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nlet maybeAddMapping;\n/**\n * Adds/removes the content of the source file to the source map.\n */\nlet setSourceContent;\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nlet toDecodedMap;\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nlet toEncodedMap;\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nlet fromMap;\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nlet allMappings;\n// This split declaration is only so that terser can elminiate the static initialization block.\nlet addSegmentInternal;\n/**\n * Provides the state to generate a sourcemap.\n */\nclass GenMapping {\n    constructor({ file, sourceRoot } = {}) {\n        this._names = new SetArray();\n        this._sources = new SetArray();\n        this._sourcesContent = [];\n        this._mappings = [];\n        this.file = file;\n        this.sourceRoot = sourceRoot;\n    }\n}\n(() => {\n    addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name) => {\n        return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name);\n    };\n    maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name) => {\n        return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name);\n    };\n    addMapping = (map, mapping) => {\n        return addMappingInternal(false, map, mapping);\n    };\n    maybeAddMapping = (map, mapping) => {\n        return addMappingInternal(true, map, mapping);\n    };\n    setSourceContent = (map, source, content) => {\n        const { _sources: sources, _sourcesContent: sourcesContent } = map;\n        sourcesContent[put(sources, source)] = content;\n    };\n    toDecodedMap = (map) => {\n        const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, } = map;\n        removeEmptyFinalLines(mappings);\n        return {\n            version: 3,\n            file: file || undefined,\n            names: names.array,\n            sourceRoot: sourceRoot || undefined,\n            sources: sources.array,\n            sourcesContent,\n            mappings,\n        };\n    };\n    toEncodedMap = (map) => {\n        const decoded = toDecodedMap(map);\n        return Object.assign(Object.assign({}, decoded), { mappings: encode(decoded.mappings) });\n    };\n    allMappings = (map) => {\n        const out = [];\n        const { _mappings: mappings, _sources: sources, _names: names } = map;\n        for (let i = 0; i < mappings.length; i++) {\n            const line = mappings[i];\n            for (let j = 0; j < line.length; j++) {\n                const seg = line[j];\n                const generated = { line: i + 1, column: seg[COLUMN] };\n                let source = undefined;\n                let original = undefined;\n                let name = undefined;\n                if (seg.length !== 1) {\n                    source = sources.array[seg[SOURCES_INDEX]];\n                    original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };\n                    if (seg.length === 5)\n                        name = names.array[seg[NAMES_INDEX]];\n                }\n                out.push({ generated, source, original, name });\n            }\n        }\n        return out;\n    };\n    fromMap = (input) => {\n        const map = new TraceMap(input);\n        const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });\n        putAll(gen._names, map.names);\n        putAll(gen._sources, map.sources);\n        gen._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n        gen._mappings = decodedMappings(map);\n        return gen;\n    };\n    // Internal helpers\n    addSegmentInternal = (skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name) => {\n        const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, } = map;\n        const line = getLine(mappings, genLine);\n        const index = getColumnIndex(line, genColumn);\n        if (!source) {\n            if (skipable && skipSourceless(line, index))\n                return;\n            return insert(line, index, [genColumn]);\n        }\n        const sourcesIndex = put(sources, source);\n        const namesIndex = name ? put(names, name) : NO_NAME;\n        if (sourcesIndex === sourcesContent.length)\n            sourcesContent[sourcesIndex] = null;\n        if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n            return;\n        }\n        return insert(line, index, name\n            ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n            : [genColumn, sourcesIndex, sourceLine, sourceColumn]);\n    };\n})();\nfunction getLine(mappings, index) {\n    for (let i = mappings.length; i <= index; i++) {\n        mappings[i] = [];\n    }\n    return mappings[index];\n}\nfunction getColumnIndex(line, genColumn) {\n    let index = line.length;\n    for (let i = index - 1; i >= 0; index = i--) {\n        const current = line[i];\n        if (genColumn >= current[COLUMN])\n            break;\n    }\n    return index;\n}\nfunction insert(array, index, value) {\n    for (let i = array.length; i > index; i--) {\n        array[i] = array[i - 1];\n    }\n    array[index] = value;\n}\nfunction removeEmptyFinalLines(mappings) {\n    const { length } = mappings;\n    let len = length;\n    for (let i = len - 1; i >= 0; len = i, i--) {\n        if (mappings[i].length > 0)\n            break;\n    }\n    if (len < length)\n        mappings.length = len;\n}\nfunction putAll(strarr, array) {\n    for (let i = 0; i < array.length; i++)\n        put(strarr, array[i]);\n}\nfunction skipSourceless(line, index) {\n    // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n    // doesn't generate any useful information.\n    if (index === 0)\n        return true;\n    const prev = line[index - 1];\n    // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n    // genrate any new information. Else, this segment will end the source/named segment and point to\n    // a sourceless position, which is useful.\n    return prev.length === 1;\n}\nfunction skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {\n    // A source/named segment at the start of a line gives position at that genColumn\n    if (index === 0)\n        return false;\n    const prev = line[index - 1];\n    // If the previous segment is sourceless, then we're transitioning to a source.\n    if (prev.length === 1)\n        return false;\n    // If the previous segment maps to the exact same source position, then this segment doesn't\n    // provide any new position information.\n    return (sourcesIndex === prev[SOURCES_INDEX] &&\n        sourceLine === prev[SOURCE_LINE] &&\n        sourceColumn === prev[SOURCE_COLUMN] &&\n        namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME));\n}\nfunction addMappingInternal(skipable, map, mapping) {\n    const { generated, source, original, name } = mapping;\n    if (!source) {\n        return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null);\n    }\n    const s = source;\n    return addSegmentInternal(skipable, map, generated.line - 1, generated.column, s, original.line - 1, original.column, name);\n}\n\nexport { GenMapping, addMapping, addSegment, allMappings, fromMap, maybeAddMapping, maybeAddSegment, setSourceContent, toDecodedMap, toEncodedMap };\n//# sourceMappingURL=gen-mapping.mjs.map\n", "import { AnyMap, originalPositionFor } from '@jridgewell/trace-mapping';\nimport {\n  GenMapping,\n  maybeAddMapping,\n  toDecodedMap,\n  toEncodedMap,\n  setSourceContent,\n} from '@jridgewell/gen-mapping';\n\nimport type { TraceMap, SectionedSourceMapInput } from '@jridgewell/trace-mapping';\nexport type { TraceMap, SectionedSourceMapInput };\n\nimport type { Mapping, EncodedSourceMap, DecodedSourceMap } from '@jridgewell/gen-mapping';\nexport type { Mapping, EncodedSourceMap, DecodedSourceMap };\n\nexport class SourceMapConsumer {\n  private declare _map: TraceMap;\n  declare file: TraceMap['file'];\n  declare names: TraceMap['names'];\n  declare sourceRoot: TraceMap['sourceRoot'];\n  declare sources: TraceMap['sources'];\n  declare sourcesContent: TraceMap['sourcesContent'];\n\n  constructor(map: ConstructorParameters<typeof AnyMap>[0], mapUrl: Parameters<typeof AnyMap>[1]) {\n    const trace = (this._map = new AnyMap(map, mapUrl));\n\n    this.file = trace.file;\n    this.names = trace.names;\n    this.sourceRoot = trace.sourceRoot;\n    this.sources = trace.resolvedSources;\n    this.sourcesContent = trace.sourcesContent;\n  }\n\n  originalPositionFor(\n    needle: Parameters<typeof originalPositionFor>[1],\n  ): ReturnType<typeof originalPositionFor> {\n    return originalPositionFor(this._map, needle);\n  }\n\n  destroy() {\n    // noop.\n  }\n}\n\nexport class SourceMapGenerator {\n  private declare _map: GenMapping;\n\n  constructor(opts: ConstructorParameters<typeof GenMapping>[0]) {\n    this._map = new GenMapping(opts);\n  }\n\n  addMapping(mapping: Parameters<typeof maybeAddMapping>[1]): ReturnType<typeof maybeAddMapping> {\n    maybeAddMapping(this._map, mapping);\n  }\n\n  setSourceContent(\n    source: Parameters<typeof setSourceContent>[1],\n    content: Parameters<typeof setSourceContent>[2],\n  ): ReturnType<typeof setSourceContent> {\n    setSourceContent(this._map, source, content);\n  }\n\n  toJSON(): ReturnType<typeof toEncodedMap> {\n    return toEncodedMap(this._map);\n  }\n\n  toDecodedMap(): ReturnType<typeof toDecodedMap> {\n    return toDecodedMap(this._map);\n  }\n}\n", "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.acorn = {}));\n})(this, (function (exports) { 'use strict';\n\n  // This file was generated. Do not modify manually!\n  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\n  // This file was generated. Do not modify manually!\n  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];\n\n  // This file was generated. Do not modify manually!\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\n  // This file was generated. Do not modify manually!\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n\n  // These are a run-length and offset encoded representation of the\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  };\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\n  var keywords$1 = {\n    5: ecma5AndLessKeywords,\n    \"5module\": ecma5AndLessKeywords + \" export import\",\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  };\n\n  var keywordRelationalOperator = /^in(stanceof)?$/;\n\n  // ## Character categories\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000;\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i];\n      if (pos > code) { return false }\n      pos += set[i + 1];\n      if (pos >= code) { return true }\n    }\n    return false\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) { return code === 36 }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) { return code === 36 }\n    if (code < 58) { return true }\n    if (code < 65) { return false }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n  // Map keyword names to token types.\n\n  var keywords = {};\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name;\n    return keywords[name] = new TokenType(name, options)\n  }\n\n  var types$1 = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    privateId: new TokenType(\"privateId\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    questionDot: new TokenType(\"?.\"),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    invalidTemplate: new TokenType(\"invalidTemplate\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=/===/!==\", 6),\n    relational: binop(\"</>/<=/>=\", 7),\n    bitShift: binop(\"<</>>/>>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n    coalesce: binop(\"??\", 1),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\", startsExpr),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\", startsExpr),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  };\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n  }\n\n  function nextLineBreak(code, from, end) {\n    if ( end === void 0 ) end = code.length;\n\n    for (var i = from; i < end; i++) {\n      var next = code.charCodeAt(i);\n      if (isNewLine(next))\n        { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\n    }\n    return -1\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n  var ref = Object.prototype;\n  var hasOwnProperty = ref.hasOwnProperty;\n  var toString = ref.toString;\n\n  var hasOwn = Object.hasOwn || (function (obj, propName) { return (\n    hasOwnProperty.call(obj, propName)\n  ); });\n\n  var isArray = Array.isArray || (function (obj) { return (\n    toString.call(obj) === \"[object Array]\"\n  ); });\n\n  function wordsRegexp(words) {\n    return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) { return String.fromCharCode(code) }\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  var loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) { this.source = p.sourceFile; }\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      var nextBreak = nextLineBreak(input, cur, offset);\n      if (nextBreak < 0) { return new Position(line, offset - cur) }\n      ++line;\n      cur = nextBreak;\n    }\n  }\n\n  // A second argument must be given to configure the parser process.\n  // These options are recognized (only `ecmaVersion` is required):\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n    // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n    // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `\"latest\"`\n    // (the latest version the library supports). This influences\n    // support for strict mode, the set of reserved words, and support\n    // for new syntax features.\n    ecmaVersion: null,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // the position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program, and an import.meta expression\n    // in a script isn't considered an error.\n    allowImportExportEverywhere: false,\n    // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n    // When enabled, await identifiers are allowed to appear at the top-level scope,\n    // but they are still not allowed in non-async functions.\n    allowAwaitOutsideFunction: null,\n    // When enabled, super identifiers are not constrained to\n    // appearing in methods and do not raise an error when they appear elsewhere.\n    allowSuperOutsideMethod: null,\n    // When enabled, hashbang directive in the beginning of file is\n    // allowed and treated as a line comment. Enabled by default when\n    // `ecmaVersion` >= 2023.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false\n  };\n\n  // Interpret and default an options object\n\n  var warnedAboutEcmaVersion = false;\n\n  function getOptions(opts) {\n    var options = {};\n\n    for (var opt in defaultOptions)\n      { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n    if (options.ecmaVersion === \"latest\") {\n      options.ecmaVersion = 1e8;\n    } else if (options.ecmaVersion == null) {\n      if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n        warnedAboutEcmaVersion = true;\n        console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n      }\n      options.ecmaVersion = 11;\n    } else if (options.ecmaVersion >= 2015) {\n      options.ecmaVersion -= 2009;\n    }\n\n    if (options.allowReserved == null)\n      { options.allowReserved = options.ecmaVersion < 5; }\n\n    if (!opts || opts.allowHashBang == null)\n      { options.allowHashBang = options.ecmaVersion >= 14; }\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken;\n      options.onToken = function (token) { return tokens.push(token); };\n    }\n    if (isArray(options.onComment))\n      { options.onComment = pushComment(options, options.onComment); }\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text,\n        start: start,\n        end: end\n      };\n      if (options.locations)\n        { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n      if (options.ranges)\n        { comment.range = [start, end]; }\n      array.push(comment);\n    }\n  }\n\n  // Each scope gets a bitset that may contain these flags\n  var\n      SCOPE_TOP = 1,\n      SCOPE_FUNCTION = 2,\n      SCOPE_ASYNC = 4,\n      SCOPE_GENERATOR = 8,\n      SCOPE_ARROW = 16,\n      SCOPE_SIMPLE_CATCH = 32,\n      SCOPE_SUPER = 64,\n      SCOPE_DIRECT_SUPER = 128,\n      SCOPE_CLASS_STATIC_BLOCK = 256,\n      SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n\n  function functionFlags(async, generator) {\n    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n  }\n\n  // Used in checkLVal* and declareName to determine the type of a binding\n  var\n      BIND_NONE = 0, // Not a binding\n      BIND_VAR = 1, // Var-style binding\n      BIND_LEXICAL = 2, // Let- or const-style binding\n      BIND_FUNCTION = 3, // Function declaration\n      BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n      BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n    var reserved = \"\";\n    if (options.allowReserved !== true) {\n      reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n      if (options.sourceType === \"module\") { reserved += \" await\"; }\n    }\n    this.reservedWords = wordsRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n    this.reservedWordsStrict = wordsRegexp(reservedStrict);\n    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = types$1.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos);\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n    this.potentialArrowInForAwait = false;\n\n    // Positions to delayed-check that yield/await does not exist in default parameters.\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n    // Labels in scope.\n    this.labels = [];\n    // Thus-far undefined exports.\n    this.undefinedExports = Object.create(null);\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n      { this.skipLineComment(2); }\n\n    // Scope tracking for duplicate variable names (see scope.js)\n    this.scopeStack = [];\n    this.enterScope(SCOPE_TOP);\n\n    // For RegExp validation\n    this.regexpState = null;\n\n    // The stack of private names.\n    // Each element has two properties: 'declared' and 'used'.\n    // When it exited from the outermost class definition, all used private names must be declared.\n    this.privateNameStack = [];\n  };\n\n  var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node)\n  };\n\n  prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n\n  prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\n\n  prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\n\n  prototypeAccessors.canAwait.get = function () {\n    for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\n      if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n    }\n    return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n  };\n\n  prototypeAccessors.allowSuper.get = function () {\n    var ref = this.currentThisScope();\n      var flags = ref.flags;\n      var inClassFieldInit = ref.inClassFieldInit;\n    return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n  };\n\n  prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n\n  prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n  prototypeAccessors.allowNewDotTarget.get = function () {\n    var ref = this.currentThisScope();\n      var flags = ref.flags;\n      var inClassFieldInit = ref.inClassFieldInit;\n    return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\n  };\n\n  prototypeAccessors.inClassStaticBlock.get = function () {\n    return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\n  };\n\n  Parser.extend = function extend () {\n      var plugins = [], len = arguments.length;\n      while ( len-- ) plugins[ len ] = arguments[ len ];\n\n    var cls = this;\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n    return cls\n  };\n\n  Parser.parse = function parse (input, options) {\n    return new this(options, input).parse()\n  };\n\n  Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n    var parser = new this(options, input, pos);\n    parser.nextToken();\n    return parser.parseExpression()\n  };\n\n  Parser.tokenizer = function tokenizer (input, options) {\n    return new this(options, input)\n  };\n\n  Object.defineProperties( Parser.prototype, prototypeAccessors );\n\n  var pp$9 = Parser.prototype;\n\n  // ## Parser utilities\n\n  var literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\n  pp$9.strictDirective = function(start) {\n    if (this.options.ecmaVersion < 5) { return false }\n    for (;;) {\n      // Try to find string literal.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      var match = literal.exec(this.input.slice(start));\n      if (!match) { return false }\n      if ((match[1] || match[2]) === \"use strict\") {\n        skipWhiteSpace.lastIndex = start + match[0].length;\n        var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n        var next = this.input.charAt(end);\n        return next === \";\" || next === \"}\" ||\n          (lineBreak.test(spaceAfter[0]) &&\n           !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n      }\n      start += match[0].length;\n\n      // Skip semicolon, if any.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\")\n        { start++; }\n    }\n  };\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp$9.eat = function(type) {\n    if (this.type === type) {\n      this.next();\n      return true\n    } else {\n      return false\n    }\n  };\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp$9.isContextual = function(name) {\n    return this.type === types$1.name && this.value === name && !this.containsEsc\n  };\n\n  // Consumes contextual keyword if possible.\n\n  pp$9.eatContextual = function(name) {\n    if (!this.isContextual(name)) { return false }\n    this.next();\n    return true\n  };\n\n  // Asserts that following token is given contextual keyword.\n\n  pp$9.expectContextual = function(name) {\n    if (!this.eatContextual(name)) { this.unexpected(); }\n  };\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp$9.canInsertSemicolon = function() {\n    return this.type === types$1.eof ||\n      this.type === types$1.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  pp$9.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n      return true\n    }\n  };\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp$9.semicolon = function() {\n    if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\n  };\n\n  pp$9.afterTrailingComma = function(tokType, notNext) {\n    if (this.type === tokType) {\n      if (this.options.onTrailingComma)\n        { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n      if (!notNext)\n        { this.next(); }\n      return true\n    }\n  };\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp$9.expect = function(type) {\n    this.eat(type) || this.unexpected();\n  };\n\n  // Raise an unexpected token error.\n\n  pp$9.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n  };\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign =\n    this.trailingComma =\n    this.parenthesizedAssign =\n    this.parenthesizedBind =\n    this.doubleProto =\n      -1;\n  };\n\n  pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) { return }\n    if (refDestructuringErrors.trailingComma > -1)\n      { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) { this.raiseRecoverable(parens, isAssign ? \"Assigning to rvalue\" : \"Parenthesized pattern\"); }\n  };\n\n  pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    if (!refDestructuringErrors) { return false }\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\n    var doubleProto = refDestructuringErrors.doubleProto;\n    if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n    if (shorthandAssign >= 0)\n      { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n    if (doubleProto >= 0)\n      { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n  };\n\n  pp$9.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n      { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n    if (this.awaitPos)\n      { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n  };\n\n  pp$9.isSimpleAssignTarget = function(expr) {\n    if (expr.type === \"ParenthesizedExpression\")\n      { return this.isSimpleAssignTarget(expr.expression) }\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n  };\n\n  var pp$8 = Parser.prototype;\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$8.parseTopLevel = function(node) {\n    var exports = Object.create(null);\n    if (!node.body) { node.body = []; }\n    while (this.type !== types$1.eof) {\n      var stmt = this.parseStatement(null, true, exports);\n      node.body.push(stmt);\n    }\n    if (this.inModule)\n      { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n        {\n          var name = list[i];\n\n          this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n        } }\n    this.adaptDirectivePrologue(node.body);\n    this.next();\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\")\n  };\n\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\n  pp$8.isLet = function(context) {\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === 91 || nextCh === 92) { return true } // '[', '/'\n    if (context) { return false }\n\n    if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '{', astral\n    if (isIdentifierStart(nextCh, true)) {\n      var pos = next + 1;\n      while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\n      if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n      var ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) { return true }\n    }\n    return false\n  };\n\n  // check 'async [no LineTerminator here] function'\n  // - 'async /*foo*/ function' is OK.\n  // - 'async /*\\n*/ function' is invalid.\n  pp$8.isAsyncFunction = function() {\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n      { return false }\n\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, after;\n    return !lineBreak.test(this.input.slice(this.pos, next)) &&\n      this.input.slice(next, next + 8) === \"function\" &&\n      (next + 8 === this.input.length ||\n       !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n  };\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$8.parseStatement = function(context, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case types$1._debugger: return this.parseDebuggerStatement(node)\n    case types$1._do: return this.parseDoStatement(node)\n    case types$1._for: return this.parseForStatement(node)\n    case types$1._function:\n      // Function as sole body of either an if statement or a labeled statement\n      // works, but not when it is part of a labeled statement that is the sole\n      // body of an if statement.\n      if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n      return this.parseFunctionStatement(node, false, !context)\n    case types$1._class:\n      if (context) { this.unexpected(); }\n      return this.parseClass(node, true)\n    case types$1._if: return this.parseIfStatement(node)\n    case types$1._return: return this.parseReturnStatement(node)\n    case types$1._switch: return this.parseSwitchStatement(node)\n    case types$1._throw: return this.parseThrowStatement(node)\n    case types$1._try: return this.parseTryStatement(node)\n    case types$1._const: case types$1._var:\n      kind = kind || this.value;\n      if (context && kind !== \"var\") { this.unexpected(); }\n      return this.parseVarStatement(node, kind)\n    case types$1._while: return this.parseWhileStatement(node)\n    case types$1._with: return this.parseWithStatement(node)\n    case types$1.braceL: return this.parseBlock(true, node)\n    case types$1.semi: return this.parseEmptyStatement(node)\n    case types$1._export:\n    case types$1._import:\n      if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n        if (nextCh === 40 || nextCh === 46) // '(' or '.'\n          { return this.parseExpressionStatement(node, this.parseExpression()) }\n      }\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n        if (!this.inModule)\n          { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n      }\n      return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      if (this.isAsyncFunction()) {\n        if (context) { this.unexpected(); }\n        this.next();\n        return this.parseFunctionStatement(node, true, !context)\n      }\n\n      var maybeName = this.value, expr = this.parseExpression();\n      if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon))\n        { return this.parseLabeledStatement(node, maybeName, expr, context) }\n      else { return this.parseExpressionStatement(node, expr) }\n    }\n  };\n\n  pp$8.parseBreakContinueStatement = function(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\n    else if (this.type !== types$1.name) { this.unexpected(); }\n    else {\n      node.label = this.parseIdent();\n      this.semicolon();\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    var i = 0;\n    for (; i < this.labels.length; ++i) {\n      var lab = this.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n        if (node.label && isBreak) { break }\n      }\n    }\n    if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  };\n\n  pp$8.parseDebuggerStatement = function(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\")\n  };\n\n  pp$8.parseDoStatement = function(node) {\n    this.next();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"do\");\n    this.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6)\n      { this.eat(types$1.semi); }\n    else\n      { this.semicolon(); }\n    return this.finishNode(node, \"DoWhileStatement\")\n  };\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$8.parseForStatement = function(node) {\n    this.next();\n    var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n    this.labels.push(loopLabel);\n    this.enterScope(0);\n    this.expect(types$1.parenL);\n    if (this.type === types$1.semi) {\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, null)\n    }\n    var isLet = this.isLet();\n    if (this.type === types$1._var || this.type === types$1._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n      this.next();\n      this.parseVar(init$1, true, kind);\n      this.finishNode(init$1, \"VariableDeclaration\");\n      if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n        if (this.options.ecmaVersion >= 9) {\n          if (this.type === types$1._in) {\n            if (awaitAt > -1) { this.unexpected(awaitAt); }\n          } else { node.await = awaitAt > -1; }\n        }\n        return this.parseForIn(node, init$1)\n      }\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, init$1)\n    }\n    var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n    var refDestructuringErrors = new DestructuringErrors;\n    var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\n    if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types$1._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      if (startsWithLet && isForOf) { this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\"); }\n      this.toAssignable(init, false, refDestructuringErrors);\n      this.checkLValPattern(init);\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init)\n  };\n\n  pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n  };\n\n  pp$8.parseIfStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    // allow function declarations in branches, but only in non-strict mode\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\")\n  };\n\n  pp$8.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      { this.raise(this.start, \"'return' outside of function\"); }\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\n    else { node.argument = this.parseExpression(); this.semicolon(); }\n    return this.finishNode(node, \"ReturnStatement\")\n  };\n\n  pp$8.parseSwitchStatement = function(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect(types$1.braceL);\n    this.labels.push(switchLabel);\n    this.enterScope(0);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    var cur;\n    for (var sawDefault = false; this.type !== types$1.braceR;) {\n      if (this.type === types$1._case || this.type === types$1._default) {\n        var isCase = this.type === types$1._case;\n        if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n        node.cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(types$1.colon);\n      } else {\n        if (!cur) { this.unexpected(); }\n        cur.consequent.push(this.parseStatement(null));\n      }\n    }\n    this.exitScope();\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n    this.next(); // Closing brace\n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\")\n  };\n\n  pp$8.parseThrowStatement = function(node) {\n    this.next();\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\")\n  };\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty$1 = [];\n\n  pp$8.parseTryStatement = function(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.type === types$1._catch) {\n      var clause = this.startNode();\n      this.next();\n      if (this.eat(types$1.parenL)) {\n        clause.param = this.parseBindingAtom();\n        var simple = clause.param.type === \"Identifier\";\n        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n        this.expect(types$1.parenR);\n      } else {\n        if (this.options.ecmaVersion < 10) { this.unexpected(); }\n        clause.param = null;\n        this.enterScope(0);\n      }\n      clause.body = this.parseBlock(false);\n      this.exitScope();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer)\n      { this.raise(node.start, \"Missing catch or finally clause\"); }\n    return this.finishNode(node, \"TryStatement\")\n  };\n\n  pp$8.parseVarStatement = function(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\")\n  };\n\n  pp$8.parseWhileStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"while\");\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\")\n  };\n\n  pp$8.parseWithStatement = function(node) {\n    if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(\"with\");\n    return this.finishNode(node, \"WithStatement\")\n  };\n\n  pp$8.parseEmptyStatement = function(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\")\n  };\n\n  pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n      {\n      var label = list[i$1];\n\n      if (label.name === maybeName)\n        { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    } }\n    var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n    for (var i = this.labels.length - 1; i >= 0; i--) {\n      var label$1 = this.labels[i];\n      if (label$1.statementStart === node.start) {\n        // Update information about previous labels on this node\n        label$1.statementStart = this.start;\n        label$1.kind = kind;\n      } else { break }\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\")\n  };\n\n  pp$8.parseExpressionStatement = function(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\")\n  };\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n    if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n    if ( node === void 0 ) node = this.startNode();\n\n    node.body = [];\n    this.expect(types$1.braceL);\n    if (createNewLexicalScope) { this.enterScope(0); }\n    while (this.type !== types$1.braceR) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    if (exitStrict) { this.strict = false; }\n    this.next();\n    if (createNewLexicalScope) { this.exitScope(); }\n    return this.finishNode(node, \"BlockStatement\")\n  };\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$8.parseFor = function(node, init) {\n    node.init = init;\n    this.expect(types$1.semi);\n    node.test = this.type === types$1.semi ? null : this.parseExpression();\n    this.expect(types$1.semi);\n    node.update = this.type === types$1.parenR ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\")\n  };\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$8.parseForIn = function(node, init) {\n    var isForIn = this.type === types$1._in;\n    this.next();\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (\n        !isForIn ||\n        this.options.ecmaVersion < 8 ||\n        this.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\"\n      )\n    ) {\n      this.raise(\n        init.start,\n        ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n      );\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types$1.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n  };\n\n  // Parse a list of variable declarations.\n\n  pp$8.parseVar = function(node, isFor, kind) {\n    node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      var decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(types$1.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else if (kind === \"const\" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n        this.unexpected();\n      } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n        this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n      } else {\n        decl.init = null;\n      }\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) { break }\n    }\n    return node\n  };\n\n  pp$8.parseVarId = function(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n  };\n\n  var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n  // Parse a function declaration or literal (depending on the\n  // `statement & FUNC_STATEMENT`).\n\n  // Remove `allowExpressionBody` for 7.0.0, as it is only called with false\n  pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n      if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\n        { this.unexpected(); }\n      node.generator = this.eat(types$1.star);\n    }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    if (statement & FUNC_STATEMENT) {\n      node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();\n      if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n        // If it is a regular function declaration in sloppy mode, then it is\n        // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n        // mode depends on properties of the current scope (see\n        // treatFunctionsAsVar).\n        { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n    }\n\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(node.async, node.generator));\n\n    if (!(statement & FUNC_STATEMENT))\n      { node.id = this.type === types$1.name ? this.parseIdent() : null; }\n\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  };\n\n  pp$8.parseFunctionParams = function(node) {\n    this.expect(types$1.parenL);\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n  };\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$8.parseClass = function(node, isStatement) {\n    this.next();\n\n    // ecma-262 14.6 Class Definitions\n    // A class definition is always strict mode code.\n    var oldStrict = this.strict;\n    this.strict = true;\n\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var privateNameMap = this.enterClassBody();\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    while (this.type !== types$1.braceR) {\n      var element = this.parseClassElement(node.superClass !== null);\n      if (element) {\n        classBody.body.push(element);\n        if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n          if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n          hadConstructor = true;\n        } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n          this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\n        }\n      }\n    }\n    this.strict = oldStrict;\n    this.next();\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.exitClassBody();\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  };\n\n  pp$8.parseClassElement = function(constructorAllowsSuper) {\n    if (this.eat(types$1.semi)) { return null }\n\n    var ecmaVersion = this.options.ecmaVersion;\n    var node = this.startNode();\n    var keyName = \"\";\n    var isGenerator = false;\n    var isAsync = false;\n    var kind = \"method\";\n    var isStatic = false;\n\n    if (this.eatContextual(\"static\")) {\n      // Parse static init block\n      if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(node);\n        return node\n      }\n      if (this.isClassElementNameStart() || this.type === types$1.star) {\n        isStatic = true;\n      } else {\n        keyName = \"static\";\n      }\n    }\n    node.static = isStatic;\n    if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n      if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n        isAsync = true;\n      } else {\n        keyName = \"async\";\n      }\n    }\n    if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n      isGenerator = true;\n    }\n    if (!keyName && !isAsync && !isGenerator) {\n      var lastValue = this.value;\n      if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n        if (this.isClassElementNameStart()) {\n          kind = lastValue;\n        } else {\n          keyName = lastValue;\n        }\n      }\n    }\n\n    // Parse element name\n    if (keyName) {\n      // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n      // The last token is any of those. Make it the element name.\n      node.computed = false;\n      node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n      node.key.name = keyName;\n      this.finishNode(node.key, \"Identifier\");\n    } else {\n      this.parseClassElementName(node);\n    }\n\n    // Parse element value\n    if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n      var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n      var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n      // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n      if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\n      node.kind = isConstructor ? \"constructor\" : kind;\n      this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n    } else {\n      this.parseClassField(node);\n    }\n\n    return node\n  };\n\n  pp$8.isClassElementNameStart = function() {\n    return (\n      this.type === types$1.name ||\n      this.type === types$1.privateId ||\n      this.type === types$1.num ||\n      this.type === types$1.string ||\n      this.type === types$1.bracketL ||\n      this.type.keyword\n    )\n  };\n\n  pp$8.parseClassElementName = function(element) {\n    if (this.type === types$1.privateId) {\n      if (this.value === \"constructor\") {\n        this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n      }\n      element.computed = false;\n      element.key = this.parsePrivateIdent();\n    } else {\n      this.parsePropertyName(element);\n    }\n  };\n\n  pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n    // Check key and flags\n    var key = method.key;\n    if (method.kind === \"constructor\") {\n      if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n      if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    } else if (method.static && checkKeyName(method, \"prototype\")) {\n      this.raise(key.start, \"Classes may not have a static property named prototype\");\n    }\n\n    // Parse value\n    var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n\n    // Check value\n    if (method.kind === \"get\" && value.params.length !== 0)\n      { this.raiseRecoverable(value.start, \"getter should have no params\"); }\n    if (method.kind === \"set\" && value.params.length !== 1)\n      { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\n    if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\n      { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\n\n    return this.finishNode(method, \"MethodDefinition\")\n  };\n\n  pp$8.parseClassField = function(field) {\n    if (checkKeyName(field, \"constructor\")) {\n      this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n    } else if (field.static && checkKeyName(field, \"prototype\")) {\n      this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n    }\n\n    if (this.eat(types$1.eq)) {\n      // To raise SyntaxError if 'arguments' exists in the initializer.\n      var scope = this.currentThisScope();\n      var inClassFieldInit = scope.inClassFieldInit;\n      scope.inClassFieldInit = true;\n      field.value = this.parseMaybeAssign();\n      scope.inClassFieldInit = inClassFieldInit;\n    } else {\n      field.value = null;\n    }\n    this.semicolon();\n\n    return this.finishNode(field, \"PropertyDefinition\")\n  };\n\n  pp$8.parseClassStaticBlock = function(node) {\n    node.body = [];\n\n    var oldLabels = this.labels;\n    this.labels = [];\n    this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n    while (this.type !== types$1.braceR) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    this.next();\n    this.exitScope();\n    this.labels = oldLabels;\n\n    return this.finishNode(node, \"StaticBlock\")\n  };\n\n  pp$8.parseClassId = function(node, isStatement) {\n    if (this.type === types$1.name) {\n      node.id = this.parseIdent();\n      if (isStatement)\n        { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n    } else {\n      if (isStatement === true)\n        { this.unexpected(); }\n      node.id = null;\n    }\n  };\n\n  pp$8.parseClassSuper = function(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;\n  };\n\n  pp$8.enterClassBody = function() {\n    var element = {declared: Object.create(null), used: []};\n    this.privateNameStack.push(element);\n    return element.declared\n  };\n\n  pp$8.exitClassBody = function() {\n    var ref = this.privateNameStack.pop();\n    var declared = ref.declared;\n    var used = ref.used;\n    var len = this.privateNameStack.length;\n    var parent = len === 0 ? null : this.privateNameStack[len - 1];\n    for (var i = 0; i < used.length; ++i) {\n      var id = used[i];\n      if (!hasOwn(declared, id.name)) {\n        if (parent) {\n          parent.used.push(id);\n        } else {\n          this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\n        }\n      }\n    }\n  };\n\n  function isPrivateNameConflicted(privateNameMap, element) {\n    var name = element.key.name;\n    var curr = privateNameMap[name];\n\n    var next = \"true\";\n    if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n      next = (element.static ? \"s\" : \"i\") + element.kind;\n    }\n\n    // `class { get #a(){}; static set #a(_){} }` is also conflict.\n    if (\n      curr === \"iget\" && next === \"iset\" ||\n      curr === \"iset\" && next === \"iget\" ||\n      curr === \"sget\" && next === \"sset\" ||\n      curr === \"sset\" && next === \"sget\"\n    ) {\n      privateNameMap[name] = \"true\";\n      return false\n    } else if (!curr) {\n      privateNameMap[name] = next;\n      return false\n    } else {\n      return true\n    }\n  }\n\n  function checkKeyName(node, name) {\n    var computed = node.computed;\n    var key = node.key;\n    return !computed && (\n      key.type === \"Identifier\" && key.name === name ||\n      key.type === \"Literal\" && key.value === name\n    )\n  }\n\n  // Parses module export declaration.\n\n  pp$8.parseExport = function(node, exports) {\n    this.next();\n    // export * from '...'\n    if (this.eat(types$1.star)) {\n      if (this.options.ecmaVersion >= 11) {\n        if (this.eatContextual(\"as\")) {\n          node.exported = this.parseModuleExportName();\n          this.checkExport(exports, node.exported, this.lastTokStart);\n        } else {\n          node.exported = null;\n        }\n      }\n      this.expectContextual(\"from\");\n      if (this.type !== types$1.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n      this.semicolon();\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(types$1._default)) { // export default ...\n      this.checkExport(exports, \"default\", this.lastTokStart);\n      var isAsync;\n      if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n        if (isAsync) { this.next(); }\n        node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n      } else if (this.type === types$1._class) {\n        var cNode = this.startNode();\n        node.declaration = this.parseClass(cNode, \"nullableID\");\n      } else {\n        node.declaration = this.parseMaybeAssign();\n        this.semicolon();\n      }\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(null);\n      if (node.declaration.type === \"VariableDeclaration\")\n        { this.checkVariableExport(exports, node.declaration.declarations); }\n      else\n        { this.checkExport(exports, node.declaration.id, node.declaration.id.start); }\n      node.specifiers = [];\n      node.source = null;\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifiers(exports);\n      if (this.eatContextual(\"from\")) {\n        if (this.type !== types$1.string) { this.unexpected(); }\n        node.source = this.parseExprAtom();\n      } else {\n        for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n          // check for keywords used as local names\n          var spec = list[i];\n\n          this.checkUnreserved(spec.local);\n          // check if export is defined\n          this.checkLocalExport(spec.local);\n\n          if (spec.local.type === \"Literal\") {\n            this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n          }\n        }\n\n        node.source = null;\n      }\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  };\n\n  pp$8.checkExport = function(exports, name, pos) {\n    if (!exports) { return }\n    if (typeof name !== \"string\")\n      { name = name.type === \"Identifier\" ? name.name : name.value; }\n    if (hasOwn(exports, name))\n      { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n    exports[name] = true;\n  };\n\n  pp$8.checkPatternExport = function(exports, pat) {\n    var type = pat.type;\n    if (type === \"Identifier\")\n      { this.checkExport(exports, pat, pat.start); }\n    else if (type === \"ObjectPattern\")\n      { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n        {\n          var prop = list[i];\n\n          this.checkPatternExport(exports, prop);\n        } }\n    else if (type === \"ArrayPattern\")\n      { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n        var elt = list$1[i$1];\n\n          if (elt) { this.checkPatternExport(exports, elt); }\n      } }\n    else if (type === \"Property\")\n      { this.checkPatternExport(exports, pat.value); }\n    else if (type === \"AssignmentPattern\")\n      { this.checkPatternExport(exports, pat.left); }\n    else if (type === \"RestElement\")\n      { this.checkPatternExport(exports, pat.argument); }\n    else if (type === \"ParenthesizedExpression\")\n      { this.checkPatternExport(exports, pat.expression); }\n  };\n\n  pp$8.checkVariableExport = function(exports, decls) {\n    if (!exports) { return }\n    for (var i = 0, list = decls; i < list.length; i += 1)\n      {\n      var decl = list[i];\n\n      this.checkPatternExport(exports, decl.id);\n    }\n  };\n\n  pp$8.shouldParseExportStatement = function() {\n    return this.type.keyword === \"var\" ||\n      this.type.keyword === \"const\" ||\n      this.type.keyword === \"class\" ||\n      this.type.keyword === \"function\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n  };\n\n  // Parses a comma-separated list of module exports.\n\n  pp$8.parseExportSpecifiers = function(exports) {\n    var nodes = [], first = true;\n    // export { x, y as z } [from '...']\n    this.expect(types$1.braceL);\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      var node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n      this.checkExport(\n        exports,\n        node.exported,\n        node.exported.start\n      );\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n    return nodes\n  };\n\n  // Parses import declaration.\n\n  pp$8.parseImport = function(node) {\n    this.next();\n    // import '...'\n    if (this.type === types$1.string) {\n      node.specifiers = empty$1;\n      node.source = this.parseExprAtom();\n    } else {\n      node.specifiers = this.parseImportSpecifiers();\n      this.expectContextual(\"from\");\n      node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\")\n  };\n\n  // Parses a comma-separated list of module imports.\n\n  pp$8.parseImportSpecifiers = function() {\n    var nodes = [], first = true;\n    if (this.type === types$1.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode();\n      node.local = this.parseIdent();\n      this.checkLValSimple(node.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n      if (!this.eat(types$1.comma)) { return nodes }\n    }\n    if (this.type === types$1.star) {\n      var node$1 = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      node$1.local = this.parseIdent();\n      this.checkLValSimple(node$1.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n      return nodes\n    }\n    this.expect(types$1.braceL);\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      var node$2 = this.startNode();\n      node$2.imported = this.parseModuleExportName();\n      if (this.eatContextual(\"as\")) {\n        node$2.local = this.parseIdent();\n      } else {\n        this.checkUnreserved(node$2.imported);\n        node$2.local = node$2.imported;\n      }\n      this.checkLValSimple(node$2.local, BIND_LEXICAL);\n      nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n    }\n    return nodes\n  };\n\n  pp$8.parseModuleExportName = function() {\n    if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n      var stringLiteral = this.parseLiteral(this.value);\n      if (loneSurrogate.test(stringLiteral.value)) {\n        this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n      }\n      return stringLiteral\n    }\n    return this.parseIdent(true)\n  };\n\n  // Set `ExpressionStatement#directive` property for directive prologues.\n  pp$8.adaptDirectivePrologue = function(statements) {\n    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n      statements[i].directive = statements[i].expression.raw.slice(1, -1);\n    }\n  };\n  pp$8.isDirectiveCandidate = function(statement) {\n    return (\n      this.options.ecmaVersion >= 5 &&\n      statement.type === \"ExpressionStatement\" &&\n      statement.expression.type === \"Literal\" &&\n      typeof statement.expression.value === \"string\" &&\n      // Reject parenthesized strings.\n      (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n    )\n  };\n\n  var pp$7 = Parser.prototype;\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n        if (this.inAsync && node.name === \"await\")\n          { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n        break\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\n          var prop = list[i];\n\n        this.toAssignable(prop, isBinding);\n          // Early error:\n          //   AssignmentRestProperty[Yield, Await] :\n          //     `...` DestructuringAssignmentTarget[Yield, Await]\n          //\n          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n          if (\n            prop.type === \"RestElement\" &&\n            (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n          ) {\n            this.raise(prop.argument.start, \"Unexpected token\");\n          }\n        }\n        break\n\n      case \"Property\":\n        // AssignmentProperty has type === \"Property\"\n        if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n        this.toAssignable(node.value, isBinding);\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        this.toAssignableList(node.elements, isBinding);\n        break\n\n      case \"SpreadElement\":\n        node.type = \"RestElement\";\n        this.toAssignable(node.argument, isBinding);\n        if (node.argument.type === \"AssignmentPattern\")\n          { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n        break\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n        break\n\n      case \"ChainExpression\":\n        this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) { break }\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n      }\n    } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n    return node\n  };\n\n  // Convert list of expression atoms to binding list.\n\n  pp$7.toAssignableList = function(exprList, isBinding) {\n    var end = exprList.length;\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i];\n      if (elt) { this.toAssignable(elt, isBinding); }\n    }\n    if (end) {\n      var last = exprList[end - 1];\n      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        { this.unexpected(last.argument.start); }\n    }\n    return exprList\n  };\n\n  // Parses spread element.\n\n  pp$7.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\")\n  };\n\n  pp$7.parseRestBinding = function() {\n    var node = this.startNode();\n    this.next();\n\n    // RestElement inside of a function parameter must be an identifier\n    if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\n      { this.unexpected(); }\n\n    node.argument = this.parseBindingAtom();\n\n    return this.finishNode(node, \"RestElement\")\n  };\n\n  // Parses lvalue (assignable) atom.\n\n  pp$7.parseBindingAtom = function() {\n    if (this.options.ecmaVersion >= 6) {\n      switch (this.type) {\n      case types$1.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(types$1.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\")\n\n      case types$1.braceL:\n        return this.parseObj(true)\n      }\n    }\n    return this.parseIdent()\n  };\n\n  pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (first) { first = false; }\n      else { this.expect(types$1.comma); }\n      if (allowEmpty && this.type === types$1.comma) {\n        elts.push(null);\n      } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n        break\n      } else if (this.type === types$1.ellipsis) {\n        var rest = this.parseRestBinding();\n        this.parseBindingListItem(rest);\n        elts.push(rest);\n        if (this.type === types$1.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        this.expect(close);\n        break\n      } else {\n        var elem = this.parseMaybeDefault(this.start, this.startLoc);\n        this.parseBindingListItem(elem);\n        elts.push(elem);\n      }\n    }\n    return elts\n  };\n\n  pp$7.parseBindingListItem = function(param) {\n    return param\n  };\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\")\n  };\n\n  // The following three functions all verify that a node is an lvalue —\n  // something that can be bound, or assigned to. In order to do so, they perform\n  // a variety of checks:\n  //\n  // - Check that none of the bound/assigned-to identifiers are reserved words.\n  // - Record name declarations for bindings in the appropriate scope.\n  // - Check duplicate argument names, if checkClashes is set.\n  //\n  // If a complex binding pattern is encountered (e.g., object and array\n  // destructuring), the entire pattern is recursively checked.\n  //\n  // There are three versions of checkLVal*() appropriate for different\n  // circumstances:\n  //\n  // - checkLValSimple() shall be used if the syntactic construct supports\n  //   nothing other than identifiers and member expressions. Parenthesized\n  //   expressions are also correctly handled. This is generally appropriate for\n  //   constructs for which the spec says\n  //\n  //   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n  //   > simple.\n  //\n  //   It is also appropriate for checking if an identifier is valid and not\n  //   defined elsewhere, like import declarations or function/class identifiers.\n  //\n  //   Examples where this is used include:\n  //     a += …;\n  //     import a from '…';\n  //   where a is the node to be checked.\n  //\n  // - checkLValPattern() shall be used if the syntactic construct supports\n  //   anything checkLValSimple() supports, as well as object and array\n  //   destructuring patterns. This is generally appropriate for constructs for\n  //   which the spec says\n  //\n  //   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n  //   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n  //   > simple.\n  //\n  //   Examples where this is used include:\n  //     (a = …);\n  //     const a = …;\n  //     try { … } catch (a) { … }\n  //   where a is the node to be checked.\n  //\n  // - checkLValInnerPattern() shall be used if the syntactic construct supports\n  //   anything checkLValPattern() supports, as well as default assignment\n  //   patterns, rest elements, and other constructs that may appear within an\n  //   object or array destructuring pattern.\n  //\n  //   As a special case, function parameters also use checkLValInnerPattern(),\n  //   as they also support defaults and rest constructs.\n  //\n  // These functions deliberately support both assignment and binding constructs,\n  // as the logic for both is exceedingly similar. If the node is the target of\n  // an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n  // should be set to the appropriate BIND_* constant, like BIND_VAR or\n  // BIND_LEXICAL.\n  //\n  // If the function is called with a non-BIND_NONE bindingType, then\n  // additionally a checkClashes object may be specified to allow checking for\n  // duplicate argument names. checkClashes is ignored if the provided construct\n  // is an assignment (i.e., bindingType is BIND_NONE).\n\n  pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    var isBind = bindingType !== BIND_NONE;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n      if (isBind) {\n        if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n          { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n        if (checkClashes) {\n          if (hasOwn(checkClashes, expr.name))\n            { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n          checkClashes[expr.name] = true;\n        }\n        if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n      }\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n      break\n\n    case \"ParenthesizedExpression\":\n      if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n      return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n    default:\n      this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n  };\n\n  pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"ObjectPattern\":\n      for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.checkLValInnerPattern(prop, bindingType, checkClashes);\n      }\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n        var elem = list$1[i$1];\n\n      if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n      }\n      break\n\n    default:\n      this.checkLValSimple(expr, bindingType, checkClashes);\n    }\n  };\n\n  pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLValPattern(expr.left, bindingType, checkClashes);\n      break\n\n    case \"RestElement\":\n      this.checkLValPattern(expr.argument, bindingType, checkClashes);\n      break\n\n    default:\n      this.checkLValPattern(expr, bindingType, checkClashes);\n    }\n  };\n\n  // The algorithm used to determine whether a regexp can appear at a\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n    this.generator = !!generator;\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", false),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n    f_stat: new TokContext(\"function\", false),\n    f_expr: new TokContext(\"function\", true),\n    f_expr_gen: new TokContext(\"function\", true, false, null, true),\n    f_gen: new TokContext(\"function\", false, false, null, true)\n  };\n\n  var pp$6 = Parser.prototype;\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  };\n\n  pp$6.curContext = function() {\n    return this.context[this.context.length - 1]\n  };\n\n  pp$6.braceIsBlock = function(prevType) {\n    var parent = this.curContext();\n    if (parent === types.f_expr || parent === types.f_stat)\n      { return true }\n    if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\n      { return !parent.isExpr }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\n      { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\n      { return true }\n    if (prevType === types$1.braceL)\n      { return parent === types.b_stat }\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\n      { return false }\n    return !this.exprAllowed\n  };\n\n  pp$6.inGeneratorContext = function() {\n    for (var i = this.context.length - 1; i >= 1; i--) {\n      var context = this.context[i];\n      if (context.token === \"function\")\n        { return context.generator }\n    }\n    return false\n  };\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type;\n    if (type.keyword && prevType === types$1.dot)\n      { this.exprAllowed = false; }\n    else if (update = type.updateContext)\n      { update.call(this, prevType); }\n    else\n      { this.exprAllowed = type.beforeExpr; }\n  };\n\n  // Used to handle egde cases when token context could not be inferred correctly during tokenization phase\n\n  pp$6.overrideContext = function(tokenCtx) {\n    if (this.curContext() !== tokenCtx) {\n      this.context[this.context.length - 1] = tokenCtx;\n    }\n  };\n\n  // Token-specific context update code\n\n  types$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n    if (this.context.length === 1) {\n      this.exprAllowed = true;\n      return\n    }\n    var out = this.context.pop();\n    if (out === types.b_stat && this.curContext().token === \"function\") {\n      out = this.context.pop();\n    }\n    this.exprAllowed = !out.isExpr;\n  };\n\n  types$1.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n    this.exprAllowed = true;\n  };\n\n  types$1.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl);\n    this.exprAllowed = true;\n  };\n\n  types$1.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n    this.context.push(statementParens ? types.p_stat : types.p_expr);\n    this.exprAllowed = true;\n  };\n\n  types$1.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  };\n\n  types$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== types$1._else &&\n        !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\n        !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n        !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\n      { this.context.push(types.f_expr); }\n    else\n      { this.context.push(types.f_stat); }\n    this.exprAllowed = false;\n  };\n\n  types$1.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      { this.context.pop(); }\n    else\n      { this.context.push(types.q_tmpl); }\n    this.exprAllowed = false;\n  };\n\n  types$1.star.updateContext = function(prevType) {\n    if (prevType === types$1._function) {\n      var index = this.context.length - 1;\n      if (this.context[index] === types.f_expr)\n        { this.context[index] = types.f_expr_gen; }\n      else\n        { this.context[index] = types.f_gen; }\n    }\n    this.exprAllowed = true;\n  };\n\n  types$1.name.updateContext = function(prevType) {\n    var allowed = false;\n    if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n      if (this.value === \"of\" && !this.exprAllowed ||\n          this.value === \"yield\" && this.inGeneratorContext())\n        { allowed = true; }\n    }\n    this.exprAllowed = allowed;\n  };\n\n  // A recursive descent parser operates by defining functions for all\n\n  var pp$5 = Parser.prototype;\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n      { return }\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      { return }\n    var key = prop.key;\n    var name;\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) {\n          if (refDestructuringErrors) {\n            if (refDestructuringErrors.doubleProto < 0) {\n              refDestructuringErrors.doubleProto = key.start;\n            }\n          } else {\n            this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n          }\n        }\n        propHash.proto = true;\n      }\n      return\n    }\n    name = \"$\" + name;\n    var other = propHash[name];\n    if (other) {\n      var redefinition;\n      if (kind === \"init\") {\n        redefinition = this.strict && other.init || other.get || other.set;\n      } else {\n        redefinition = other.init || other[kind];\n      }\n      if (redefinition)\n        { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      };\n    }\n    other[kind] = true;\n  };\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$5.parseExpression = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n    if (this.type === types$1.comma) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  };\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n    if (this.isContextual(\"yield\")) {\n      if (this.inGenerator) { return this.parseYield(forInit) }\n      // The tokenizer will assume an expression is allowed after\n      // `yield`, but this isn't that kind of yield\n      else { this.exprAllowed = false; }\n    }\n\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n    if (refDestructuringErrors) {\n      oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n      oldTrailingComma = refDestructuringErrors.trailingComma;\n      oldDoubleProto = refDestructuringErrors.doubleProto;\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n    } else {\n      refDestructuringErrors = new DestructuringErrors;\n      ownDestructuringErrors = true;\n    }\n\n    var startPos = this.start, startLoc = this.startLoc;\n    if (this.type === types$1.parenL || this.type === types$1.name) {\n      this.potentialArrowAt = this.start;\n      this.potentialArrowInForAwait = forInit === \"await\";\n    }\n    var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n    if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n    if (this.type.isAssign) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      if (this.type === types$1.eq)\n        { left = this.toAssignable(left, false, refDestructuringErrors); }\n      if (!ownDestructuringErrors) {\n        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n      }\n      if (refDestructuringErrors.shorthandAssign >= left.start)\n        { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n      if (this.type === types$1.eq)\n        { this.checkLValPattern(left); }\n      else\n        { this.checkLValSimple(left); }\n      node.left = left;\n      this.next();\n      node.right = this.parseMaybeAssign(forInit);\n      if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n    }\n    if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n    if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n    return left\n  };\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprOps(forInit, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    if (this.eat(types$1.question)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign(forInit);\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  };\n\n  // Start the precedence parser.\n\n  pp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\n  };\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n    var prec = this.type.binop;\n    if (prec != null && (!forInit || this.type !== types$1._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n        var coalesce = this.type === types$1.coalesce;\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = types$1.logicalAND.binop;\n        }\n        var op = this.value;\n        this.next();\n        var startPos = this.start, startLoc = this.startLoc;\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n        if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\n          this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n        }\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\n      }\n    }\n    return left\n  };\n\n  pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    if (right.type === \"PrivateIdentifier\") { this.raise(right.start, \"Private identifier can only be left side of binary expression\"); }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  };\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n    var startPos = this.start, startLoc = this.startLoc, expr;\n    if (this.isContextual(\"await\") && this.canAwait) {\n      expr = this.parseAwait(forInit);\n      sawUnary = true;\n    } else if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === types$1.incDec;\n      node.operator = this.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true, update, forInit);\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      if (update) { this.checkLValSimple(node.argument); }\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n      else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\n        { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\n      else { sawUnary = true; }\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else if (!sawUnary && this.type === types$1.privateId) {\n      if (forInit || this.privateNameStack.length === 0) { this.unexpected(); }\n      expr = this.parsePrivateIdent();\n      // only could be private fields in 'in', such as #x in obj\n      if (this.type !== types$1._in) { this.unexpected(); }\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this.startNodeAt(startPos, startLoc);\n        node$1.operator = this.value;\n        node$1.prefix = false;\n        node$1.argument = expr;\n        this.checkLValSimple(expr);\n        this.next();\n        expr = this.finishNode(node$1, \"UpdateExpression\");\n      }\n    }\n\n    if (!incDec && this.eat(types$1.starstar)) {\n      if (sawUnary)\n        { this.unexpected(this.lastTokStart); }\n      else\n        { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false) }\n    } else {\n      return expr\n    }\n  };\n\n  function isPrivateFieldAccess(node) {\n    return (\n      node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\n      node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression)\n    )\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n    if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n      { return expr }\n    var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n      if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n      if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n      if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n    }\n    return result\n  };\n\n  pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n        this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n        this.potentialArrowAt === base.start;\n    var optionalChained = false;\n\n    while (true) {\n      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n\n      if (element.optional) { optionalChained = true; }\n      if (element === base || element.type === \"ArrowFunctionExpression\") {\n        if (optionalChained) {\n          var chainNode = this.startNodeAt(startPos, startLoc);\n          chainNode.expression = element;\n          element = this.finishNode(chainNode, \"ChainExpression\");\n        }\n        return element\n      }\n\n      base = element;\n    }\n  };\n\n  pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n    var optionalSupported = this.options.ecmaVersion >= 11;\n    var optional = optionalSupported && this.eat(types$1.questionDot);\n    if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n    var computed = this.eat(types$1.bracketL);\n    if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      if (computed) {\n        node.property = this.parseExpression();\n        this.expect(types$1.bracketR);\n      } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n        node.property = this.parsePrivateIdent();\n      } else {\n        node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n      }\n      node.computed = !!computed;\n      if (optionalSupported) {\n        node.optional = optional;\n      }\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(types$1.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      this.awaitIdentPos = 0;\n      var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        if (this.awaitIdentPos > 0)\n          { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)\n      }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      if (optionalSupported) {\n        node$1.optional = optional;\n      }\n      base = this.finishNode(node$1, \"CallExpression\");\n    } else if (this.type === types$1.backQuote) {\n      if (optional || optionalChained) {\n        this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n      }\n      var node$2 = this.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this.parseTemplate({isTagged: true});\n      base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n    }\n    return base\n  };\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$5.parseExprAtom = function(refDestructuringErrors, forInit) {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.type === types$1.slash) { this.readRegexp(); }\n\n    var node, canBeArrow = this.potentialArrowAt === this.start;\n    switch (this.type) {\n    case types$1._super:\n      if (!this.allowSuper)\n        { this.raise(this.start, \"'super' keyword outside a method\"); }\n      node = this.startNode();\n      this.next();\n      if (this.type === types$1.parenL && !this.allowDirectSuper)\n        { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n      // The `super` keyword can appear at below:\n      // SuperProperty:\n      //     super [ Expression ]\n      //     super . IdentifierName\n      // SuperCall:\n      //     super ( Arguments )\n      if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\n        { this.unexpected(); }\n      return this.finishNode(node, \"Super\")\n\n    case types$1._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\")\n\n    case types$1.name:\n      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n      var id = this.parseIdent(false);\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n        this.overrideContext(types.f_expr);\n        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)\n      }\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(types$1.arrow))\n          { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc &&\n            (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n          id = this.parseIdent(false);\n          if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\n            { this.unexpected(); }\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)\n        }\n      }\n      return id\n\n    case types$1.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = {pattern: value.pattern, flags: value.flags};\n      return node\n\n    case types$1.num: case types$1.string:\n      return this.parseLiteral(this.value)\n\n    case types$1._null: case types$1._true: case types$1._false:\n      node = this.startNode();\n      node.value = this.type === types$1._null ? null : this.type === types$1._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case types$1.parenL:\n      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n      if (refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n          { refDestructuringErrors.parenthesizedAssign = start; }\n        if (refDestructuringErrors.parenthesizedBind < 0)\n          { refDestructuringErrors.parenthesizedBind = start; }\n      }\n      return expr\n\n    case types$1.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case types$1.braceL:\n      this.overrideContext(types.b_expr);\n      return this.parseObj(false, refDestructuringErrors)\n\n    case types$1._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, 0)\n\n    case types$1._class:\n      return this.parseClass(this.startNode(), false)\n\n    case types$1._new:\n      return this.parseNew()\n\n    case types$1.backQuote:\n      return this.parseTemplate()\n\n    case types$1._import:\n      if (this.options.ecmaVersion >= 11) {\n        return this.parseExprImport()\n      } else {\n        return this.unexpected()\n      }\n\n    default:\n      this.unexpected();\n    }\n  };\n\n  pp$5.parseExprImport = function() {\n    var node = this.startNode();\n\n    // Consume `import` as an identifier for `import.meta`.\n    // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n    var meta = this.parseIdent(true);\n\n    switch (this.type) {\n    case types$1.parenL:\n      return this.parseDynamicImport(node)\n    case types$1.dot:\n      node.meta = meta;\n      return this.parseImportMeta(node)\n    default:\n      this.unexpected();\n    }\n  };\n\n  pp$5.parseDynamicImport = function(node) {\n    this.next(); // skip `(`\n\n    // Parse node.source.\n    node.source = this.parseMaybeAssign();\n\n    // Verify ending.\n    if (!this.eat(types$1.parenR)) {\n      var errorPos = this.start;\n      if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n        this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n      } else {\n        this.unexpected(errorPos);\n      }\n    }\n\n    return this.finishNode(node, \"ImportExpression\")\n  };\n\n  pp$5.parseImportMeta = function(node) {\n    this.next(); // skip `.`\n\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n\n    if (node.property.name !== \"meta\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n    if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\n      { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n    return this.finishNode(node, \"MetaProperty\")\n  };\n\n  pp$5.parseLiteral = function(value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n    this.next();\n    return this.finishNode(node, \"Literal\")\n  };\n\n  pp$5.parseParenExpression = function() {\n    this.expect(types$1.parenL);\n    var val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val\n  };\n\n  pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n    if (this.options.ecmaVersion >= 6) {\n      this.next();\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc;\n      var exprList = [], first = true, lastIsComma = false;\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      // Do not save awaitIdentPos to allow checking awaits nested in parameters\n      while (this.type !== types$1.parenR) {\n        first ? first = false : this.expect(types$1.comma);\n        if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n          lastIsComma = true;\n          break\n        } else if (this.type === types$1.ellipsis) {\n          spreadStart = this.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding()));\n          if (this.type === types$1.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n          break\n        } else {\n          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n        }\n      }\n      var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n      this.expect(types$1.parenR);\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        return this.parseParenArrowList(startPos, startLoc, exprList, forInit)\n      }\n\n      if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n      if (spreadStart) { this.unexpected(spreadStart); }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n    } else {\n      val = this.parseParenExpression();\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc);\n      par.expression = val;\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  };\n\n  pp$5.parseParenItem = function(item) {\n    return item\n  };\n\n  pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)\n  };\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty = [];\n\n  pp$5.parseNew = function() {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n    var node = this.startNode();\n    var meta = this.parseIdent(true);\n    if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {\n      node.meta = meta;\n      var containsEsc = this.containsEsc;\n      node.property = this.parseIdent(true);\n      if (node.property.name !== \"target\")\n        { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n      if (containsEsc)\n        { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n      if (!this.allowNewDotTarget)\n        { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\"); }\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);\n    if (isImport && node.callee.type === \"ImportExpression\") {\n      this.raise(startPos, \"Cannot use new with import()\");\n    }\n    if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }\n    else { node.arguments = empty; }\n    return this.finishNode(node, \"NewExpression\")\n  };\n\n  // Parse template expression.\n\n  pp$5.parseTemplateElement = function(ref) {\n    var isTagged = ref.isTagged;\n\n    var elem = this.startNode();\n    if (this.type === types$1.invalidTemplate) {\n      if (!isTagged) {\n        this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n      }\n      elem.value = {\n        raw: this.value,\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.value\n      };\n    }\n    this.next();\n    elem.tail = this.type === types$1.backQuote;\n    return this.finishNode(elem, \"TemplateElement\")\n  };\n\n  pp$5.parseTemplate = function(ref) {\n    if ( ref === void 0 ) ref = {};\n    var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement({isTagged: isTagged});\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      if (this.type === types$1.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\")\n  };\n\n  pp$5.isAsyncProp = function(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n      (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\n      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  // Parse an object literal or binding pattern.\n\n  pp$5.parseObj = function(isPattern, refDestructuringErrors) {\n    var node = this.startNode(), first = true, propHash = {};\n    node.properties = [];\n    this.next();\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      var prop = this.parseProperty(isPattern, refDestructuringErrors);\n      if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n      node.properties.push(prop);\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  };\n\n  pp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n      if (isPattern) {\n        prop.argument = this.parseIdent(false);\n        if (this.type === types$1.comma) {\n          this.raise(this.start, \"Comma is not permitted after the rest element\");\n        }\n        return this.finishNode(prop, \"RestElement\")\n      }\n      // Parse argument.\n      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n      // To disallow trailing comma via `this.toAssignable()`.\n      if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n        refDestructuringErrors.trailingComma = this.start;\n      }\n      // Finish\n      return this.finishNode(prop, \"SpreadElement\")\n    }\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern)\n        { isGenerator = this.eat(types$1.star); }\n    }\n    var containsEsc = this.containsEsc;\n    this.parsePropertyName(prop);\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n      this.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n    return this.finishNode(prop, \"Property\")\n  };\n\n  pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n    if ((isGenerator || isAsync) && this.type === types$1.colon)\n      { this.unexpected(); }\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n      prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n      if (isPattern) { this.unexpected(); }\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (!isPattern && !containsEsc &&\n               this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      prop.value = this.parseMethod(false);\n      var paramCount = prop.kind === \"get\" ? 0 : 1;\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start;\n        if (prop.kind === \"get\")\n          { this.raiseRecoverable(start, \"getter should have no params\"); }\n        else\n          { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n      } else {\n        if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n          { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n      }\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      this.checkUnreserved(prop.key);\n      if (prop.key.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = startPos; }\n      prop.kind = \"init\";\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n      } else if (this.type === types$1.eq && refDestructuringErrors) {\n        if (refDestructuringErrors.shorthandAssign < 0)\n          { refDestructuringErrors.shorthandAssign = this.start; }\n        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n      } else {\n        prop.value = this.copyNode(prop.key);\n      }\n      prop.shorthand = true;\n    } else { this.unexpected(); }\n  };\n\n  pp$5.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(types$1.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssign();\n        this.expect(types$1.bracketR);\n        return prop.key\n      } else {\n        prop.computed = false;\n      }\n    }\n    return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n  };\n\n  // Initialize empty function node.\n\n  pp$5.initFunction = function(node) {\n    node.id = null;\n    if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n    if (this.options.ecmaVersion >= 8) { node.async = false; }\n  };\n\n  // Parse object or class method.\n\n  pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6)\n      { node.generator = isGenerator; }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n    this.expect(types$1.parenL);\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false, true, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"FunctionExpression\")\n  };\n\n  // Parse arrow function expression with given parameters.\n\n  pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true, false, forInit);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  };\n\n  // Parse function body and check parameters.\n\n  pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n    var isExpression = isArrowFunction && this.type !== types$1.braceL;\n    var oldStrict = this.strict, useStrict = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign(forInit);\n      node.expression = true;\n      this.checkParams(node, false);\n    } else {\n      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.end);\n        // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n        if (useStrict && nonSimple)\n          { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n      }\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldLabels = this.labels;\n      this.labels = [];\n      if (useStrict) { this.strict = true; }\n\n      // Add the params to varDeclaredNames to ensure that an error is thrown\n      // if a let/const declaration in the function clashes with one of the params.\n      this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n      // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n      if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n      node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n      node.expression = false;\n      this.adaptDirectivePrologue(node.body.body);\n      this.labels = oldLabels;\n    }\n    this.exitScope();\n  };\n\n  pp$5.isSimpleParamList = function(params) {\n    for (var i = 0, list = params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      if (param.type !== \"Identifier\") { return false\n    } }\n    return true\n  };\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$5.checkParams = function(node, allowDuplicates) {\n    var nameHash = Object.create(null);\n    for (var i = 0, list = node.params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n    }\n  };\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n      } else { first = false; }\n\n      var elt = (void 0);\n      if (allowEmpty && this.type === types$1.comma)\n        { elt = null; }\n      else if (this.type === types$1.ellipsis) {\n        elt = this.parseSpread(refDestructuringErrors);\n        if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\n          { refDestructuringErrors.trailingComma = this.start; }\n      } else {\n        elt = this.parseMaybeAssign(false, refDestructuringErrors);\n      }\n      elts.push(elt);\n    }\n    return elts\n  };\n\n  pp$5.checkUnreserved = function(ref) {\n    var start = ref.start;\n    var end = ref.end;\n    var name = ref.name;\n\n    if (this.inGenerator && name === \"yield\")\n      { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n    if (this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n    if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\n      { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\n    if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\"))\n      { this.raise(start, (\"Cannot use \" + name + \" in class static initialization block\")); }\n    if (this.keywords.test(name))\n      { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n    if (this.options.ecmaVersion < 6 &&\n      this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n    if (re.test(name)) {\n      if (!this.inAsync && name === \"await\")\n        { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n      this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n    }\n  };\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$5.parseIdent = function(liberal) {\n    var node = this.startNode();\n    if (this.type === types$1.name) {\n      node.name = this.value;\n    } else if (this.type.keyword) {\n      node.name = this.type.keyword;\n\n      // To fix https://github.com/acornjs/acorn/issues/575\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n      if ((node.name === \"class\" || node.name === \"function\") &&\n          (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n        this.context.pop();\n      }\n    } else {\n      this.unexpected();\n    }\n    this.next(!!liberal);\n    this.finishNode(node, \"Identifier\");\n    if (!liberal) {\n      this.checkUnreserved(node);\n      if (node.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = node.start; }\n    }\n    return node\n  };\n\n  pp$5.parsePrivateIdent = function() {\n    var node = this.startNode();\n    if (this.type === types$1.privateId) {\n      node.name = this.value;\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    this.finishNode(node, \"PrivateIdentifier\");\n\n    // For validating existence\n    if (this.privateNameStack.length === 0) {\n      this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\n    } else {\n      this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n    }\n\n    return node\n  };\n\n  // Parses yield expression inside generator.\n\n  pp$5.parseYield = function(forInit) {\n    if (!this.yieldPos) { this.yieldPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types$1.star);\n      node.argument = this.parseMaybeAssign(forInit);\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  };\n\n  pp$5.parseAwait = function(forInit) {\n    if (!this.awaitPos) { this.awaitPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, false, forInit);\n    return this.finishNode(node, \"AwaitExpression\")\n  };\n\n  var pp$4 = Parser.prototype;\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n    throw err\n  };\n\n  pp$4.raiseRecoverable = pp$4.raise;\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  };\n\n  var pp$3 = Parser.prototype;\n\n  var Scope = function Scope(flags) {\n    this.flags = flags;\n    // A list of var-declared names in the current lexical scope\n    this.var = [];\n    // A list of lexically-declared names in the current lexical scope\n    this.lexical = [];\n    // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n    this.functions = [];\n    // A switch to disallow the identifier reference 'arguments'\n    this.inClassFieldInit = false;\n  };\n\n  // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\n  pp$3.enterScope = function(flags) {\n    this.scopeStack.push(new Scope(flags));\n  };\n\n  pp$3.exitScope = function() {\n    this.scopeStack.pop();\n  };\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  pp$3.treatFunctionsAsVarInScope = function(scope) {\n    return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n  };\n\n  pp$3.declareName = function(name, bindingType, pos) {\n    var redeclared = false;\n    if (bindingType === BIND_LEXICAL) {\n      var scope = this.currentScope();\n      redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      scope.lexical.push(name);\n      if (this.inModule && (scope.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n    } else if (bindingType === BIND_SIMPLE_CATCH) {\n      var scope$1 = this.currentScope();\n      scope$1.lexical.push(name);\n    } else if (bindingType === BIND_FUNCTION) {\n      var scope$2 = this.currentScope();\n      if (this.treatFunctionsAsVar)\n        { redeclared = scope$2.lexical.indexOf(name) > -1; }\n      else\n        { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n      scope$2.functions.push(name);\n    } else {\n      for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n        var scope$3 = this.scopeStack[i];\n        if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n            !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n          redeclared = true;\n          break\n        }\n        scope$3.var.push(name);\n        if (this.inModule && (scope$3.flags & SCOPE_TOP))\n          { delete this.undefinedExports[name]; }\n        if (scope$3.flags & SCOPE_VAR) { break }\n      }\n    }\n    if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n  };\n\n  pp$3.checkLocalExport = function(id) {\n    // scope.functions must be empty as Module code is always strict.\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n        this.scopeStack[0].var.indexOf(id.name) === -1) {\n      this.undefinedExports[id.name] = id;\n    }\n  };\n\n  pp$3.currentScope = function() {\n    return this.scopeStack[this.scopeStack.length - 1]\n  };\n\n  pp$3.currentVarScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) { return scope }\n    }\n  };\n\n  // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  pp$3.currentThisScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n    }\n  };\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations)\n      { this.loc = new SourceLocation(parser, loc); }\n    if (parser.options.directSourceFile)\n      { this.sourceFile = parser.options.directSourceFile; }\n    if (parser.options.ranges)\n      { this.range = [pos, 0]; }\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$2 = Parser.prototype;\n\n  pp$2.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  };\n\n  pp$2.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  };\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations)\n      { node.loc.end = loc; }\n    if (this.options.ranges)\n      { node.range[1] = pos; }\n    return node\n  }\n\n  pp$2.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  };\n\n  // Finish node at given position\n\n  pp$2.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  };\n\n  pp$2.copyNode = function(node) {\n    var newNode = new Node(this, node.start, this.startLoc);\n    for (var prop in node) { newNode[prop] = node[prop]; }\n    return newNode\n  };\n\n  // This file contains Unicode properties extracted from the ECMAScript specification.\n  // The lists are extracted like so:\n  // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n  // #table-binary-unicode-properties\n  var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\n  var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\n  var ecma11BinaryProperties = ecma10BinaryProperties;\n  var ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\n  var ecma13BinaryProperties = ecma12BinaryProperties;\n  var ecma14BinaryProperties = ecma13BinaryProperties;\n\n  var unicodeBinaryProperties = {\n    9: ecma9BinaryProperties,\n    10: ecma10BinaryProperties,\n    11: ecma11BinaryProperties,\n    12: ecma12BinaryProperties,\n    13: ecma13BinaryProperties,\n    14: ecma14BinaryProperties\n  };\n\n  // #table-unicode-general-category-values\n  var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n  // #table-unicode-script-values\n  var ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\n  var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\n  var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\n  var ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\n  var ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\n  var ecma14ScriptValues = ecma13ScriptValues + \" Kawi Nag_Mundari Nagm\";\n\n  var unicodeScriptValues = {\n    9: ecma9ScriptValues,\n    10: ecma10ScriptValues,\n    11: ecma11ScriptValues,\n    12: ecma12ScriptValues,\n    13: ecma13ScriptValues,\n    14: ecma14ScriptValues\n  };\n\n  var data = {};\n  function buildUnicodeData(ecmaVersion) {\n    var d = data[ecmaVersion] = {\n      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n      nonBinary: {\n        General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n      }\n    };\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n    d.nonBinary.gc = d.nonBinary.General_Category;\n    d.nonBinary.sc = d.nonBinary.Script;\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\n  }\n\n  for (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {\n    var ecmaVersion = list[i];\n\n    buildUnicodeData(ecmaVersion);\n  }\n\n  var pp$1 = Parser.prototype;\n\n  var RegExpValidationState = function RegExpValidationState(parser) {\n    this.parser = parser;\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\");\n    this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];\n    this.source = \"\";\n    this.flags = \"\";\n    this.start = 0;\n    this.switchU = false;\n    this.switchN = false;\n    this.pos = 0;\n    this.lastIntValue = 0;\n    this.lastStringValue = \"\";\n    this.lastAssertionIsQuantifiable = false;\n    this.numCapturingParens = 0;\n    this.maxBackReference = 0;\n    this.groupNames = [];\n    this.backReferenceNames = [];\n  };\n\n  RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n    var unicode = flags.indexOf(\"u\") !== -1;\n    this.start = start | 0;\n    this.source = pattern + \"\";\n    this.flags = flags;\n    this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n    this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n  };\n\n  RegExpValidationState.prototype.raise = function raise (message) {\n    this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n  };\n\n  // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n  // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n  RegExpValidationState.prototype.at = function at (i, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return -1\n    }\n    var c = s.charCodeAt(i);\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n      return c\n    }\n    var next = s.charCodeAt(i + 1);\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n  };\n\n  RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return l\n    }\n    var c = s.charCodeAt(i), next;\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n        (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n      return i + 1\n    }\n    return i + 2\n  };\n\n  RegExpValidationState.prototype.current = function current (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    return this.at(this.pos, forceU)\n  };\n\n  RegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    return this.at(this.nextIndex(this.pos, forceU), forceU)\n  };\n\n  RegExpValidationState.prototype.advance = function advance (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    this.pos = this.nextIndex(this.pos, forceU);\n  };\n\n  RegExpValidationState.prototype.eat = function eat (ch, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    if (this.current(forceU) === ch) {\n      this.advance(forceU);\n      return true\n    }\n    return false\n  };\n\n  /**\n   * Validate the flags part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$1.validateRegExpFlags = function(state) {\n    var validFlags = state.validFlags;\n    var flags = state.flags;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags.charAt(i);\n      if (validFlags.indexOf(flag) === -1) {\n        this.raise(state.start, \"Invalid regular expression flag\");\n      }\n      if (flags.indexOf(flag, i + 1) > -1) {\n        this.raise(state.start, \"Duplicate regular expression flag\");\n      }\n    }\n  };\n\n  /**\n   * Validate the pattern part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$1.validateRegExpPattern = function(state) {\n    this.regexp_pattern(state);\n\n    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n    // parsing contains a |GroupName|, reparse with the goal symbol\n    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n    // exception if _P_ did not conform to the grammar, if any elements of _P_\n    // were not matched by the parse, or if any Early Error conditions exist.\n    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n      state.switchN = true;\n      this.regexp_pattern(state);\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n  pp$1.regexp_pattern = function(state) {\n    state.pos = 0;\n    state.lastIntValue = 0;\n    state.lastStringValue = \"\";\n    state.lastAssertionIsQuantifiable = false;\n    state.numCapturingParens = 0;\n    state.maxBackReference = 0;\n    state.groupNames.length = 0;\n    state.backReferenceNames.length = 0;\n\n    this.regexp_disjunction(state);\n\n    if (state.pos !== state.source.length) {\n      // Make the same messages as V8.\n      if (state.eat(0x29 /* ) */)) {\n        state.raise(\"Unmatched ')'\");\n      }\n      if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n        state.raise(\"Lone quantifier brackets\");\n      }\n    }\n    if (state.maxBackReference > state.numCapturingParens) {\n      state.raise(\"Invalid escape\");\n    }\n    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n      var name = list[i];\n\n      if (state.groupNames.indexOf(name) === -1) {\n        state.raise(\"Invalid named capture referenced\");\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n  pp$1.regexp_disjunction = function(state) {\n    this.regexp_alternative(state);\n    while (state.eat(0x7C /* | */)) {\n      this.regexp_alternative(state);\n    }\n\n    // Make the same message as V8.\n    if (this.regexp_eatQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    if (state.eat(0x7B /* { */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n  pp$1.regexp_alternative = function(state) {\n    while (state.pos < state.source.length && this.regexp_eatTerm(state))\n      { }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n  pp$1.regexp_eatTerm = function(state) {\n    if (this.regexp_eatAssertion(state)) {\n      // Handle `QuantifiableAssertion Quantifier` alternative.\n      // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n      // is a QuantifiableAssertion.\n      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n        // Make the same message as V8.\n        if (state.switchU) {\n          state.raise(\"Invalid quantifier\");\n        }\n      }\n      return true\n    }\n\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n      this.regexp_eatQuantifier(state);\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n  pp$1.regexp_eatAssertion = function(state) {\n    var start = state.pos;\n    state.lastAssertionIsQuantifiable = false;\n\n    // ^, $\n    if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n      return true\n    }\n\n    // \\b \\B\n    if (state.eat(0x5C /* \\ */)) {\n      if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    // Lookahead / Lookbehind\n    if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n      var lookbehind = false;\n      if (this.options.ecmaVersion >= 9) {\n        lookbehind = state.eat(0x3C /* < */);\n      }\n      if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n        this.regexp_disjunction(state);\n        if (!state.eat(0x29 /* ) */)) {\n          state.raise(\"Unterminated group\");\n        }\n        state.lastAssertionIsQuantifiable = !lookbehind;\n        return true\n      }\n    }\n\n    state.pos = start;\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n  pp$1.regexp_eatQuantifier = function(state, noError) {\n    if ( noError === void 0 ) noError = false;\n\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\n      state.eat(0x3F /* ? */);\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n  pp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n    return (\n      state.eat(0x2A /* * */) ||\n      state.eat(0x2B /* + */) ||\n      state.eat(0x3F /* ? */) ||\n      this.regexp_eatBracedQuantifier(state, noError)\n    )\n  };\n  pp$1.regexp_eatBracedQuantifier = function(state, noError) {\n    var start = state.pos;\n    if (state.eat(0x7B /* { */)) {\n      var min = 0, max = -1;\n      if (this.regexp_eatDecimalDigits(state)) {\n        min = state.lastIntValue;\n        if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n          max = state.lastIntValue;\n        }\n        if (state.eat(0x7D /* } */)) {\n          // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n          if (max !== -1 && max < min && !noError) {\n            state.raise(\"numbers out of order in {} quantifier\");\n          }\n          return true\n        }\n      }\n      if (state.switchU && !noError) {\n        state.raise(\"Incomplete quantifier\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n  pp$1.regexp_eatAtom = function(state) {\n    return (\n      this.regexp_eatPatternCharacters(state) ||\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state)\n    )\n  };\n  pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatAtomEscape(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatUncapturingGroup = function(state) {\n    var start = state.pos;\n    if (state.eat(0x28 /* ( */)) {\n      if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n        this.regexp_disjunction(state);\n        if (state.eat(0x29 /* ) */)) {\n          return true\n        }\n        state.raise(\"Unterminated group\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatCapturingGroup = function(state) {\n    if (state.eat(0x28 /* ( */)) {\n      if (this.options.ecmaVersion >= 9) {\n        this.regexp_groupSpecifier(state);\n      } else if (state.current() === 0x3F /* ? */) {\n        state.raise(\"Invalid group\");\n      }\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        state.numCapturingParens += 1;\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n  pp$1.regexp_eatExtendedAtom = function(state) {\n    return (\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state) ||\n      this.regexp_eatInvalidBracedQuantifier(state) ||\n      this.regexp_eatExtendedPatternCharacter(state)\n    )\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n  pp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n    if (this.regexp_eatBracedQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n  pp$1.regexp_eatSyntaxCharacter = function(state) {\n    var ch = state.current();\n    if (isSyntaxCharacter(ch)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isSyntaxCharacter(ch) {\n    return (\n      ch === 0x24 /* $ */ ||\n      ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n      ch === 0x2E /* . */ ||\n      ch === 0x3F /* ? */ ||\n      ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n  // But eat eager.\n  pp$1.regexp_eatPatternCharacters = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n      state.advance();\n    }\n    return state.pos !== start\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n  pp$1.regexp_eatExtendedPatternCharacter = function(state) {\n    var ch = state.current();\n    if (\n      ch !== -1 &&\n      ch !== 0x24 /* $ */ &&\n      !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n      ch !== 0x2E /* . */ &&\n      ch !== 0x3F /* ? */ &&\n      ch !== 0x5B /* [ */ &&\n      ch !== 0x5E /* ^ */ &&\n      ch !== 0x7C /* | */\n    ) {\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // GroupSpecifier ::\n  //   [empty]\n  //   `?` GroupName\n  pp$1.regexp_groupSpecifier = function(state) {\n    if (state.eat(0x3F /* ? */)) {\n      if (this.regexp_eatGroupName(state)) {\n        if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n          state.raise(\"Duplicate capture group name\");\n        }\n        state.groupNames.push(state.lastStringValue);\n        return\n      }\n      state.raise(\"Invalid group\");\n    }\n  };\n\n  // GroupName ::\n  //   `<` RegExpIdentifierName `>`\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$1.regexp_eatGroupName = function(state) {\n    state.lastStringValue = \"\";\n    if (state.eat(0x3C /* < */)) {\n      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n        return true\n      }\n      state.raise(\"Invalid capture group name\");\n    }\n    return false\n  };\n\n  // RegExpIdentifierName ::\n  //   RegExpIdentifierStart\n  //   RegExpIdentifierName RegExpIdentifierPart\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$1.regexp_eatRegExpIdentifierName = function(state) {\n    state.lastStringValue = \"\";\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n      while (this.regexp_eatRegExpIdentifierPart(state)) {\n        state.lastStringValue += codePointToString(state.lastIntValue);\n      }\n      return true\n    }\n    return false\n  };\n\n  // RegExpIdentifierStart ::\n  //   UnicodeIDStart\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[+U]\n  pp$1.regexp_eatRegExpIdentifierStart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierStart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierStart(ch) {\n    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n  }\n\n  // RegExpIdentifierPart ::\n  //   UnicodeIDContinue\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[+U]\n  //   <ZWNJ>\n  //   <ZWJ>\n  pp$1.regexp_eatRegExpIdentifierPart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierPart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierPart(ch) {\n    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n  pp$1.regexp_eatAtomEscape = function(state) {\n    if (\n      this.regexp_eatBackReference(state) ||\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state) ||\n      (state.switchN && this.regexp_eatKGroupName(state))\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      if (state.current() === 0x63 /* c */) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    return false\n  };\n  pp$1.regexp_eatBackReference = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatDecimalEscape(state)) {\n      var n = state.lastIntValue;\n      if (state.switchU) {\n        // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n        if (n > state.maxBackReference) {\n          state.maxBackReference = n;\n        }\n        return true\n      }\n      if (n <= state.numCapturingParens) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatKGroupName = function(state) {\n    if (state.eat(0x6B /* k */)) {\n      if (this.regexp_eatGroupName(state)) {\n        state.backReferenceNames.push(state.lastStringValue);\n        return true\n      }\n      state.raise(\"Invalid named reference\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n  pp$1.regexp_eatCharacterEscape = function(state) {\n    return (\n      this.regexp_eatControlEscape(state) ||\n      this.regexp_eatCControlLetter(state) ||\n      this.regexp_eatZero(state) ||\n      this.regexp_eatHexEscapeSequence(state) ||\n      this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n      (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n      this.regexp_eatIdentityEscape(state)\n    )\n  };\n  pp$1.regexp_eatCControlLetter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x63 /* c */)) {\n      if (this.regexp_eatControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatZero = function(state) {\n    if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n      state.lastIntValue = 0;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n  pp$1.regexp_eatControlEscape = function(state) {\n    var ch = state.current();\n    if (ch === 0x74 /* t */) {\n      state.lastIntValue = 0x09; /* \\t */\n      state.advance();\n      return true\n    }\n    if (ch === 0x6E /* n */) {\n      state.lastIntValue = 0x0A; /* \\n */\n      state.advance();\n      return true\n    }\n    if (ch === 0x76 /* v */) {\n      state.lastIntValue = 0x0B; /* \\v */\n      state.advance();\n      return true\n    }\n    if (ch === 0x66 /* f */) {\n      state.lastIntValue = 0x0C; /* \\f */\n      state.advance();\n      return true\n    }\n    if (ch === 0x72 /* r */) {\n      state.lastIntValue = 0x0D; /* \\r */\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n  pp$1.regexp_eatControlLetter = function(state) {\n    var ch = state.current();\n    if (isControlLetter(ch)) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isControlLetter(ch) {\n    return (\n      (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n  pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n    var start = state.pos;\n    var switchU = forceU || state.switchU;\n\n    if (state.eat(0x75 /* u */)) {\n      if (this.regexp_eatFixedHexDigits(state, 4)) {\n        var lead = state.lastIntValue;\n        if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n          var leadSurrogateEnd = state.pos;\n          if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n            var trail = state.lastIntValue;\n            if (trail >= 0xDC00 && trail <= 0xDFFF) {\n              state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n              return true\n            }\n          }\n          state.pos = leadSurrogateEnd;\n          state.lastIntValue = lead;\n        }\n        return true\n      }\n      if (\n        switchU &&\n        state.eat(0x7B /* { */) &&\n        this.regexp_eatHexDigits(state) &&\n        state.eat(0x7D /* } */) &&\n        isValidUnicode(state.lastIntValue)\n      ) {\n        return true\n      }\n      if (switchU) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.pos = start;\n    }\n\n    return false\n  };\n  function isValidUnicode(ch) {\n    return ch >= 0 && ch <= 0x10FFFF\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n  pp$1.regexp_eatIdentityEscape = function(state) {\n    if (state.switchU) {\n      if (this.regexp_eatSyntaxCharacter(state)) {\n        return true\n      }\n      if (state.eat(0x2F /* / */)) {\n        state.lastIntValue = 0x2F; /* / */\n        return true\n      }\n      return false\n    }\n\n    var ch = state.current();\n    if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n  pp$1.regexp_eatDecimalEscape = function(state) {\n    state.lastIntValue = 0;\n    var ch = state.current();\n    if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n      do {\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n        state.advance();\n      } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n  pp$1.regexp_eatCharacterClassEscape = function(state) {\n    var ch = state.current();\n\n    if (isCharacterClassEscape(ch)) {\n      state.lastIntValue = -1;\n      state.advance();\n      return true\n    }\n\n    if (\n      state.switchU &&\n      this.options.ecmaVersion >= 9 &&\n      (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n    ) {\n      state.lastIntValue = -1;\n      state.advance();\n      if (\n        state.eat(0x7B /* { */) &&\n        this.regexp_eatUnicodePropertyValueExpression(state) &&\n        state.eat(0x7D /* } */)\n      ) {\n        return true\n      }\n      state.raise(\"Invalid property name\");\n    }\n\n    return false\n  };\n  function isCharacterClassEscape(ch) {\n    return (\n      ch === 0x64 /* d */ ||\n      ch === 0x44 /* D */ ||\n      ch === 0x73 /* s */ ||\n      ch === 0x53 /* S */ ||\n      ch === 0x77 /* w */ ||\n      ch === 0x57 /* W */\n    )\n  }\n\n  // UnicodePropertyValueExpression ::\n  //   UnicodePropertyName `=` UnicodePropertyValue\n  //   LoneUnicodePropertyNameOrValue\n  pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n    var start = state.pos;\n\n    // UnicodePropertyName `=` UnicodePropertyValue\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n      var name = state.lastStringValue;\n      if (this.regexp_eatUnicodePropertyValue(state)) {\n        var value = state.lastStringValue;\n        this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n        return true\n      }\n    }\n    state.pos = start;\n\n    // LoneUnicodePropertyNameOrValue\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n      var nameOrValue = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n      return true\n    }\n    return false\n  };\n  pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n    if (!hasOwn(state.unicodeProperties.nonBinary, name))\n      { state.raise(\"Invalid property name\"); }\n    if (!state.unicodeProperties.nonBinary[name].test(value))\n      { state.raise(\"Invalid property value\"); }\n  };\n  pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n    if (!state.unicodeProperties.binary.test(nameOrValue))\n      { state.raise(\"Invalid property name\"); }\n  };\n\n  // UnicodePropertyName ::\n  //   UnicodePropertyNameCharacters\n  pp$1.regexp_eatUnicodePropertyName = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyNameCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyNameCharacter(ch) {\n    return isControlLetter(ch) || ch === 0x5F /* _ */\n  }\n\n  // UnicodePropertyValue ::\n  //   UnicodePropertyValueCharacters\n  pp$1.regexp_eatUnicodePropertyValue = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyValueCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyValueCharacter(ch) {\n    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n  }\n\n  // LoneUnicodePropertyNameOrValue ::\n  //   UnicodePropertyValueCharacters\n  pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n    return this.regexp_eatUnicodePropertyValue(state)\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n  pp$1.regexp_eatCharacterClass = function(state) {\n    if (state.eat(0x5B /* [ */)) {\n      state.eat(0x5E /* ^ */);\n      this.regexp_classRanges(state);\n      if (state.eat(0x5D /* ] */)) {\n        return true\n      }\n      // Unreachable since it threw \"unterminated regular expression\" error before.\n      state.raise(\"Unterminated character class\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n  pp$1.regexp_classRanges = function(state) {\n    while (this.regexp_eatClassAtom(state)) {\n      var left = state.lastIntValue;\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n        var right = state.lastIntValue;\n        if (state.switchU && (left === -1 || right === -1)) {\n          state.raise(\"Invalid character class\");\n        }\n        if (left !== -1 && right !== -1 && left > right) {\n          state.raise(\"Range out of order in character class\");\n        }\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n  pp$1.regexp_eatClassAtom = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatClassEscape(state)) {\n        return true\n      }\n      if (state.switchU) {\n        // Make the same message as V8.\n        var ch$1 = state.current();\n        if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n          state.raise(\"Invalid class escape\");\n        }\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n\n    var ch = state.current();\n    if (ch !== 0x5D /* ] */) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n  pp$1.regexp_eatClassEscape = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x62 /* b */)) {\n      state.lastIntValue = 0x08; /* <BS> */\n      return true\n    }\n\n    if (state.switchU && state.eat(0x2D /* - */)) {\n      state.lastIntValue = 0x2D; /* - */\n      return true\n    }\n\n    if (!state.switchU && state.eat(0x63 /* c */)) {\n      if (this.regexp_eatClassControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    return (\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state)\n    )\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n  pp$1.regexp_eatClassControlLetter = function(state) {\n    var ch = state.current();\n    if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$1.regexp_eatHexEscapeSequence = function(state) {\n    var start = state.pos;\n    if (state.eat(0x78 /* x */)) {\n      if (this.regexp_eatFixedHexDigits(state, 2)) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n  pp$1.regexp_eatDecimalDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isDecimalDigit(ch = state.current())) {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isDecimalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n  pp$1.regexp_eatHexDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isHexDigit(ch = state.current())) {\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isHexDigit(ch) {\n    return (\n      (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n      (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n    )\n  }\n  function hexToInt(ch) {\n    if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n      return 10 + (ch - 0x41 /* A */)\n    }\n    if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n      return 10 + (ch - 0x61 /* a */)\n    }\n    return ch - 0x30 /* 0 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n  // Allows only 0-377(octal) i.e. 0-255(decimal).\n  pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n    if (this.regexp_eatOctalDigit(state)) {\n      var n1 = state.lastIntValue;\n      if (this.regexp_eatOctalDigit(state)) {\n        var n2 = state.lastIntValue;\n        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n        } else {\n          state.lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        state.lastIntValue = n1;\n      }\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n  pp$1.regexp_eatOctalDigit = function(state) {\n    var ch = state.current();\n    if (isOctalDigit(ch)) {\n      state.lastIntValue = ch - 0x30; /* 0 */\n      state.advance();\n      return true\n    }\n    state.lastIntValue = 0;\n    return false\n  };\n  function isOctalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n  // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$1.regexp_eatFixedHexDigits = function(state, length) {\n    var start = state.pos;\n    state.lastIntValue = 0;\n    for (var i = 0; i < length; ++i) {\n      var ch = state.current();\n      if (!isHexDigit(ch)) {\n        state.pos = start;\n        return false\n      }\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return true\n  };\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations)\n      { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n    if (p.options.ranges)\n      { this.range = [p.start, p.end]; }\n  };\n\n  // ## Tokenizer\n\n  var pp = Parser.prototype;\n\n  // Move to the next token\n\n  pp.next = function(ignoreEscapeSequenceInKeyword) {\n    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n      { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n    if (this.options.onToken)\n      { this.options.onToken(new Token(this)); }\n\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n  };\n\n  pp.getToken = function() {\n    this.next();\n    return new Token(this)\n  };\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    { pp[Symbol.iterator] = function() {\n      var this$1$1 = this;\n\n      return {\n        next: function () {\n          var token = this$1$1.getToken();\n          return {\n            done: token.type === types$1.eof,\n            value: token\n          }\n        }\n      }\n    }; }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp.nextToken = function() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n    this.start = this.pos;\n    if (this.options.locations) { this.startLoc = this.curPosition(); }\n    if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\n\n    if (curContext.override) { return curContext.override(this) }\n    else { this.readToken(this.fullCharCodeAtPos()); }\n  };\n\n  pp.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      { return this.readWord() }\n\n    return this.getTokenFromCode(code)\n  };\n\n  pp.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xdc00) { return code }\n    var next = this.input.charCodeAt(this.pos + 1);\n    return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n  };\n\n  pp.skipBlockComment = function() {\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n    this.pos = end + 2;\n    if (this.options.locations) {\n      for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\n        ++this.curLine;\n        pos = this.lineStart = nextBreak;\n      }\n    }\n    if (this.options.onComment)\n      { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  pp.skipLineComment = function(startSkip) {\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n    while (this.pos < this.input.length && !isNewLine(ch)) {\n      ch = this.input.charCodeAt(++this.pos);\n    }\n    if (this.options.onComment)\n      { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp.skipSpace = function() {\n    loop: while (this.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.pos);\n      switch (ch) {\n      case 32: case 160: // ' '\n        ++this.pos;\n        break\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10: case 8232: case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break\n      case 47: // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n        case 42: // '*'\n          this.skipBlockComment();\n          break\n        case 47:\n          this.skipLineComment(2);\n          break\n        default:\n          break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop\n        }\n      }\n    }\n  };\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp.finishToken = function(type, val) {\n    this.end = this.pos;\n    if (this.options.locations) { this.endLoc = this.curPosition(); }\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n\n    this.updateContext(prevType);\n  };\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) { return this.readNumber(true) }\n    var next2 = this.input.charCodeAt(this.pos + 2);\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3;\n      return this.finishToken(types$1.ellipsis)\n    } else {\n      ++this.pos;\n      return this.finishToken(types$1.dot)\n    }\n  };\n\n  pp.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.slash, 1)\n  };\n\n  pp.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? types$1.star : types$1.modulo;\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n      ++size;\n      tokentype = types$1.starstar;\n      next = this.input.charCodeAt(this.pos + 2);\n    }\n\n    if (next === 61) { return this.finishOp(types$1.assign, size + 1) }\n    return this.finishOp(tokentype, size)\n  };\n\n  pp.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (this.options.ecmaVersion >= 12) {\n        var next2 = this.input.charCodeAt(this.pos + 2);\n        if (next2 === 61) { return this.finishOp(types$1.assign, 3) }\n      }\n      return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)\n    }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)\n  };\n\n  pp.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.bitwiseXOR, 1)\n  };\n\n  pp.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n          (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken()\n      }\n      return this.finishOp(types$1.incDec, 2)\n    }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.plusMin, 1)\n  };\n\n  pp.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }\n      return this.finishOp(types$1.bitShift, size)\n    }\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n        this.input.charCodeAt(this.pos + 3) === 45) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    if (next === 61) { size = 2; }\n    return this.finishOp(types$1.relational, size)\n  };\n\n  pp.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2;\n      return this.finishToken(types$1.arrow)\n    }\n    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)\n  };\n\n  pp.readToken_question = function() { // '?'\n    var ecmaVersion = this.options.ecmaVersion;\n    if (ecmaVersion >= 11) {\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 46) {\n        var next2 = this.input.charCodeAt(this.pos + 2);\n        if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }\n      }\n      if (next === 63) {\n        if (ecmaVersion >= 12) {\n          var next2$1 = this.input.charCodeAt(this.pos + 2);\n          if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }\n        }\n        return this.finishOp(types$1.coalesce, 2)\n      }\n    }\n    return this.finishOp(types$1.question, 1)\n  };\n\n  pp.readToken_numberSign = function() { // '#'\n    var ecmaVersion = this.options.ecmaVersion;\n    var code = 35; // '#'\n    if (ecmaVersion >= 13) {\n      ++this.pos;\n      code = this.fullCharCodeAtPos();\n      if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\n        return this.finishToken(types$1.privateId, this.readWord1())\n      }\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  pp.getTokenFromCode = function(code) {\n    switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n    // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(types$1.parenL)\n    case 41: ++this.pos; return this.finishToken(types$1.parenR)\n    case 59: ++this.pos; return this.finishToken(types$1.semi)\n    case 44: ++this.pos; return this.finishToken(types$1.comma)\n    case 91: ++this.pos; return this.finishToken(types$1.bracketL)\n    case 93: ++this.pos; return this.finishToken(types$1.bracketR)\n    case 123: ++this.pos; return this.finishToken(types$1.braceL)\n    case 125: ++this.pos; return this.finishToken(types$1.braceR)\n    case 58: ++this.pos; return this.finishToken(types$1.colon)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) { break }\n      ++this.pos;\n      return this.finishToken(types$1.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n        if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n      }\n\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n    // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 63: // '?'\n      return this.readToken_question()\n\n    case 126: // '~'\n      return this.finishOp(types$1.prefix, 1)\n\n    case 35: // '#'\n      return this.readToken_numberSign()\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  pp.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str)\n  };\n\n  pp.readRegexp = function() {\n    var escaped, inClass, start = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n      var ch = this.input.charAt(this.pos);\n      if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n      if (!escaped) {\n        if (ch === \"[\") { inClass = true; }\n        else if (ch === \"]\" && inClass) { inClass = false; }\n        else if (ch === \"/\" && !inClass) { break }\n        escaped = ch === \"\\\\\";\n      } else { escaped = false; }\n      ++this.pos;\n    }\n    var pattern = this.input.slice(start, this.pos);\n    ++this.pos;\n    var flagsStart = this.pos;\n    var flags = this.readWord1();\n    if (this.containsEsc) { this.unexpected(flagsStart); }\n\n    // Validate pattern\n    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n    state.reset(start, pattern, flags);\n    this.validateRegExpFlags(state);\n    this.validateRegExpPattern(state);\n\n    // Create Literal#value property value.\n    var value = null;\n    try {\n      value = new RegExp(pattern, flags);\n    } catch (e) {\n      // ESTree requires null if it failed to instantiate RegExp object.\n      // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n    }\n\n    return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})\n  };\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n    // `len` is used for character escape sequences. In that case, disallow separators.\n    var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n    // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n    // and isn't fraction part nor exponent part. In that case, if the first digit\n    // is zero then disallow separators.\n    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n    var start = this.pos, total = 0, lastCode = 0;\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n      var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n      if (allowSeparators && code === 95) {\n        if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n        if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n        if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n        lastCode = code;\n        continue\n      }\n\n      if (code >= 97) { val = code - 97 + 10; } // a\n      else if (code >= 65) { val = code - 65 + 10; } // A\n      else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n      else { val = Infinity; }\n      if (val >= radix) { break }\n      lastCode = code;\n      total = total * radix + val;\n    }\n\n    if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n    if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n    return total\n  };\n\n  function stringToNumber(str, isLegacyOctalNumericLiteral) {\n    if (isLegacyOctalNumericLiteral) {\n      return parseInt(str, 8)\n    }\n\n    // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n    return parseFloat(str.replace(/_/g, \"\"))\n  }\n\n  function stringToBigInt(str) {\n    if (typeof BigInt !== \"function\") {\n      return null\n    }\n\n    // `BigInt(value)` throws syntax error if the string contains numeric separators.\n    return BigInt(str.replace(/_/g, \"\"))\n  }\n\n  pp.readRadixNumber = function(radix) {\n    var start = this.pos;\n    this.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n      val = stringToBigInt(this.input.slice(start, this.pos));\n      ++this.pos;\n    } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types$1.num, val)\n  };\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp.readNumber = function(startsWithDot) {\n    var start = this.pos;\n    if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n    var next = this.input.charCodeAt(this.pos);\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n      var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n      ++this.pos;\n      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n      return this.finishToken(types$1.num, val$1)\n    }\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n    if (next === 46 && !octal) { // '.'\n      ++this.pos;\n      this.readInt(10);\n      next = this.input.charCodeAt(this.pos);\n    }\n    if ((next === 69 || next === 101) && !octal) { // 'eE'\n      next = this.input.charCodeAt(++this.pos);\n      if (next === 43 || next === 45) { ++this.pos; } // '+-'\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n    var val = stringToNumber(this.input.slice(start, this.pos), octal);\n    return this.finishToken(types$1.num, val)\n  };\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code;\n\n    if (ch === 123) { // '{'\n      if (this.options.ecmaVersion < 6) { this.unexpected(); }\n      var codePos = ++this.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n      ++this.pos;\n      if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n    } else {\n      code = this.readHexChar(4);\n    }\n    return code\n  };\n\n  pp.readString = function(quote) {\n    var out = \"\", chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) { break }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.pos;\n      } else if (ch === 0x2028 || ch === 0x2029) {\n        if (this.options.ecmaVersion < 10) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n        if (this.options.locations) {\n          this.curLine++;\n          this.lineStart = this.pos;\n        }\n      } else {\n        if (isNewLine(ch)) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(types$1.string, out)\n  };\n\n  // Reads template string tokens.\n\n  var INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\n  pp.tryReadTemplateToken = function() {\n    this.inTemplateElement = true;\n    try {\n      this.readTmplToken();\n    } catch (err) {\n      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n        this.readInvalidTemplateToken();\n      } else {\n        throw err\n      }\n    }\n\n    this.inTemplateElement = false;\n  };\n\n  pp.invalidStringToken = function(position, message) {\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n      throw INVALID_TEMPLATE_ESCAPE_ERROR\n    } else {\n      this.raise(position, message);\n    }\n  };\n\n  pp.readTmplToken = function() {\n    var out = \"\", chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n        if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n          if (ch === 36) {\n            this.pos += 2;\n            return this.finishToken(types$1.dollarBraceL)\n          } else {\n            ++this.pos;\n            return this.finishToken(types$1.backQuote)\n          }\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(types$1.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(true);\n        chunkStart = this.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        ++this.pos;\n        switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n        case 10:\n          out += \"\\n\";\n          break\n        default:\n          out += String.fromCharCode(ch);\n          break\n        }\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n  };\n\n  // Reads a template token to search for the end, without validating any escape sequences\n  pp.readInvalidTemplateToken = function() {\n    for (; this.pos < this.input.length; this.pos++) {\n      switch (this.input[this.pos]) {\n      case \"\\\\\":\n        ++this.pos;\n        break\n\n      case \"$\":\n        if (this.input[this.pos + 1] !== \"{\") {\n          break\n        }\n\n      // falls through\n      case \"`\":\n        return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))\n\n      // no default\n      }\n    }\n    this.raise(this.start, \"Unterminated template\");\n  };\n\n  // Used to read escaped characters\n\n  pp.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n      return \"\"\n    case 56:\n    case 57:\n      if (this.strict) {\n        this.invalidStringToken(\n          this.pos - 1,\n          \"Invalid escape sequence\"\n        );\n      }\n      if (inTemplate) {\n        var codePos = this.pos - 1;\n\n        this.invalidStringToken(\n          codePos,\n          \"Invalid escape sequence in template string\"\n        );\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        this.pos += octalStr.length - 1;\n        ch = this.input.charCodeAt(this.pos);\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n          this.invalidStringToken(\n            this.pos - 1 - octalStr.length,\n            inTemplate\n              ? \"Octal literal in template string\"\n              : \"Octal literal in strict mode\"\n          );\n        }\n        return String.fromCharCode(octal)\n      }\n      if (isNewLine(ch)) {\n        // Unicode new line characters after \\ get removed from output in both\n        // template literals and strings\n        return \"\"\n      }\n      return String.fromCharCode(ch)\n    }\n  };\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp.readHexChar = function(len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n    return n\n  };\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp.readWord1 = function() {\n    this.containsEsc = false;\n    var word = \"\", first = true, chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n    while (this.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch, astral)) {\n        this.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) { // \"\\\"\n        this.containsEsc = true;\n        word += this.input.slice(chunkStart, this.pos);\n        var escStart = this.pos;\n        if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n          { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n        ++this.pos;\n        var esc = this.readCodePoint();\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n        word += codePointToString(esc);\n        chunkStart = this.pos;\n      } else {\n        break\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  };\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp.readWord = function() {\n    var word = this.readWord1();\n    var type = types$1.name;\n    if (this.keywords.test(word)) {\n      type = keywords[word];\n    }\n    return this.finishToken(type, word)\n  };\n\n  // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\n  var version = \"8.8.2\";\n\n  Parser.acorn = {\n    Parser: Parser,\n    version: version,\n    defaultOptions: defaultOptions,\n    Position: Position,\n    SourceLocation: SourceLocation,\n    getLineInfo: getLineInfo,\n    Node: Node,\n    TokenType: TokenType,\n    tokTypes: types$1,\n    keywordTypes: keywords,\n    TokContext: TokContext,\n    tokContexts: types,\n    isIdentifierChar: isIdentifierChar,\n    isIdentifierStart: isIdentifierStart,\n    Token: Token,\n    isNewLine: isNewLine,\n    lineBreak: lineBreak,\n    lineBreakG: lineBreakG,\n    nonASCIIwhitespace: nonASCIIwhitespace\n  };\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return Parser.parse(input, options)\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    return Parser.parseExpressionAt(input, pos, options)\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return Parser.tokenizer(input, options)\n  }\n\n  exports.Node = Node;\n  exports.Parser = Parser;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.TokContext = TokContext;\n  exports.Token = Token;\n  exports.TokenType = TokenType;\n  exports.defaultOptions = defaultOptions;\n  exports.getLineInfo = getLineInfo;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.isNewLine = isNewLine;\n  exports.keywordTypes = keywords;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n  exports.nonASCIIwhitespace = nonASCIIwhitespace;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokContexts = types;\n  exports.tokTypes = types$1;\n  exports.tokenizer = tokenizer;\n  exports.version = version;\n\n}));\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport { AST_Node } from \"../ast.js\";\n\nfunction characters(str) {\n    return str.split(\"\");\n}\n\nfunction member(name, array) {\n    return array.includes(name);\n}\n\nclass DefaultsError extends Error {\n    constructor(msg, defs) {\n        super();\n\n        this.name = \"DefaultsError\";\n        this.message = msg;\n        this.defs = defs;\n    }\n}\n\nfunction defaults(args, defs, croak) {\n    if (args === true) {\n        args = {};\n    } else if (args != null && typeof args === \"object\") {\n        args = {...args};\n    }\n\n    const ret = args || {};\n\n    if (croak) for (const i in ret) if (HOP(ret, i) && !HOP(defs, i)) {\n        throw new DefaultsError(\"`\" + i + \"` is not a supported option\", defs);\n    }\n\n    for (const i in defs) if (HOP(defs, i)) {\n        if (!args || !HOP(args, i)) {\n            ret[i] = defs[i];\n        } else if (i === \"ecma\") {\n            let ecma = args[i] | 0;\n            if (ecma > 5 && ecma < 2015) ecma += 2009;\n            ret[i] = ecma;\n        } else {\n            ret[i] = (args && HOP(args, i)) ? args[i] : defs[i];\n        }\n    }\n\n    return ret;\n}\n\nfunction noop() {}\nfunction return_false() { return false; }\nfunction return_true() { return true; }\nfunction return_this() { return this; }\nfunction return_null() { return null; }\n\nvar MAP = (function() {\n    function MAP(a, tw, allow_splicing = true) {\n        const new_a = [];\n\n        for (let i = 0; i < a.length; ++i) {\n            let item = a[i];\n            let ret = item.transform(tw, allow_splicing);\n\n            if (ret instanceof AST_Node) {\n                new_a.push(ret);\n            } else if (ret instanceof Splice) {\n                new_a.push(...ret.v);\n            }\n        }\n\n        return new_a;\n    }\n\n    MAP.splice = function(val) { return new Splice(val); };\n    MAP.skip = {};\n    function Splice(val) { this.v = val; }\n    return MAP;\n})();\n\nfunction make_node(ctor, orig, props) {\n    if (!props) props = {};\n    if (orig) {\n        if (!props.start) props.start = orig.start;\n        if (!props.end) props.end = orig.end;\n    }\n    return new ctor(props);\n}\n\nfunction push_uniq(array, el) {\n    if (!array.includes(el))\n        array.push(el);\n}\n\nfunction string_template(text, props) {\n    return text.replace(/{(.+?)}/g, function(str, p) {\n        return props && props[p];\n    });\n}\n\nfunction remove(array, el) {\n    for (var i = array.length; --i >= 0;) {\n        if (array[i] === el) array.splice(i, 1);\n    }\n}\n\nfunction mergeSort(array, cmp) {\n    if (array.length < 2) return array.slice();\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            cmp(a[ai], b[bi]) <= 0\n                ? r[i++] = a[ai++]\n                : r[i++] = b[bi++];\n        }\n        if (ai < a.length) r.push.apply(r, a.slice(ai));\n        if (bi < b.length) r.push.apply(r, b.slice(bi));\n        return r;\n    }\n    function _ms(a) {\n        if (a.length <= 1)\n            return a;\n        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);\n        left = _ms(left);\n        right = _ms(right);\n        return merge(left, right);\n    }\n    return _ms(array);\n}\n\nfunction makePredicate(words) {\n    if (!Array.isArray(words)) words = words.split(\" \");\n\n    return new Set(words.sort());\n}\n\nfunction map_add(map, key, value) {\n    if (map.has(key)) {\n        map.get(key).push(value);\n    } else {\n        map.set(key, [ value ]);\n    }\n}\n\nfunction map_from_object(obj) {\n    var map = new Map();\n    for (var key in obj) {\n        if (HOP(obj, key) && key.charAt(0) === \"$\") {\n            map.set(key.substr(1), obj[key]);\n        }\n    }\n    return map;\n}\n\nfunction map_to_object(map) {\n    var obj = Object.create(null);\n    map.forEach(function (value, key) {\n        obj[\"$\" + key] = value;\n    });\n    return obj;\n}\n\nfunction HOP(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction keep_name(keep_setting, name) {\n    return keep_setting === true\n        || (keep_setting instanceof RegExp && keep_setting.test(name));\n}\n\nvar lineTerminatorEscape = {\n    \"\\0\": \"0\",\n    \"\\n\": \"n\",\n    \"\\r\": \"r\",\n    \"\\u2028\": \"u2028\",\n    \"\\u2029\": \"u2029\",\n};\nfunction regexp_source_fix(source) {\n    // V8 does not escape line terminators in regexp patterns in node 12\n    // We'll also remove literal \\0\n    return source.replace(/[\\0\\n\\r\\u2028\\u2029]/g, function (match, offset) {\n        var escaped = source[offset - 1] == \"\\\\\"\n            && (source[offset - 2] != \"\\\\\"\n            || /(?:^|[^\\\\])(?:\\\\{2})*$/.test(source.slice(0, offset - 1)));\n        return (escaped ? \"\" : \"\\\\\") + lineTerminatorEscape[match];\n    });\n}\n\n// Subset of regexps that is not going to cause regexp based DDOS\n// https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\nconst re_safe_regexp = /^[\\\\/|\\0\\s\\w^$.[\\]()]*$/;\n\n/** Check if the regexp is safe for Terser to create without risking a RegExp DOS */\nexport const regexp_is_safe = (source) => re_safe_regexp.test(source);\n\nconst all_flags = \"dgimsuy\";\nfunction sort_regexp_flags(flags) {\n    const existing_flags = new Set(flags.split(\"\"));\n    let out = \"\";\n    for (const flag of all_flags) {\n        if (existing_flags.has(flag)) {\n            out += flag;\n            existing_flags.delete(flag);\n        }\n    }\n    if (existing_flags.size) {\n        // Flags Terser doesn't know about\n        existing_flags.forEach(flag => { out += flag; });\n    }\n    return out;\n}\n\nfunction has_annotation(node, annotation) {\n    return node._annotations & annotation;\n}\n\nfunction set_annotation(node, annotation) {\n    node._annotations |= annotation;\n}\n\nexport {\n    characters,\n    defaults,\n    HOP,\n    keep_name,\n    make_node,\n    makePredicate,\n    map_add,\n    map_from_object,\n    map_to_object,\n    MAP,\n    member,\n    mergeSort,\n    noop,\n    push_uniq,\n    regexp_source_fix,\n    remove,\n    return_false,\n    return_null,\n    return_this,\n    return_true,\n    sort_regexp_flags,\n    string_template,\n    has_annotation,\n    set_annotation\n};\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    characters,\n    defaults,\n    makePredicate,\n    set_annotation,\n} from \"./utils/index.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_ClassExpression,\n    AST_ClassPrivateProperty,\n    AST_ClassProperty,\n    AST_ClassStaticBlock,\n    AST_ConciseMethod,\n    AST_PrivateIn,\n    AST_PrivateGetter,\n    AST_PrivateMethod,\n    AST_PrivateSetter,\n    AST_Conditional,\n    AST_Const,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DotHash,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolClassProperty,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_SymbolPrivateProperty,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_TryBlock,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    _INLINE,\n    _NOINLINE,\n    _PURE\n} from \"./ast.js\";\n\nvar LATEST_RAW = \"\";  // Only used for numbers and template strings\nvar TEMPLATE_RAWS = new Map();  // Raw template strings\n\nvar KEYWORDS = \"break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with\";\nvar KEYWORDS_ATOM = \"false null true\";\nvar RESERVED_WORDS = \"enum import super this \" + KEYWORDS_ATOM + \" \" + KEYWORDS;\nvar ALL_RESERVED_WORDS = \"implements interface package private protected public static \" + RESERVED_WORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = \"return new delete throw else case yield await\";\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\nALL_RESERVED_WORDS = makePredicate(ALL_RESERVED_WORDS);\n\nvar OPERATOR_CHARS = makePredicate(characters(\"+-*&%=<>!?|~^\"));\n\nvar RE_NUM_LITERAL = /[0-9a-f]/i;\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\nvar RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;\nvar RE_BIN_NUMBER = /^0b[01]+$/i;\nvar RE_DEC_NUMBER = /^\\d*\\.?\\d*(?:e[+-]?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?$/i;\nvar RE_BIG_INT = /^(0[xob])?[0-9a-f]+n$/i;\n\nvar OPERATORS = makePredicate([\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"new\",\n    \"void\",\n    \"delete\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"!\",\n    \"~\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"*\",\n    \"**\",\n    \"/\",\n    \"%\",\n    \">>\",\n    \"<<\",\n    \">>>\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \"?\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"||=\",\n    \"&&=\",\n    \"??=\",\n    \"/=\",\n    \"*=\",\n    \"**=\",\n    \"%=\",\n    \">>=\",\n    \"<<=\",\n    \">>>=\",\n    \"|=\",\n    \"^=\",\n    \"&=\",\n    \"&&\",\n    \"??\",\n    \"||\",\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(\" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\uFEFF\"));\n\nvar NEWLINE_CHARS = makePredicate(characters(\"\\n\\r\\u2028\\u2029\"));\n\nvar PUNC_AFTER_EXPRESSION = makePredicate(characters(\";]),:\"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters(\"[{(,;:\"));\n\nvar PUNC_CHARS = makePredicate(characters(\"[]{}(),;:\"));\n\n/* -----[ Tokenizer ]----- */\n\n// surrogate safe regexps adapted from https://github.com/mathiasbynens/unicode-8.0.0/tree/89b412d8a71ecca9ed593d9e9fa073ab64acfebe/Binary_Property\nvar UNICODE = {\n    ID_Start: /[$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n    ID_Continue: /(?:[$0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF])+/,\n};\n\ntry {\n    UNICODE = {\n        // https://262.ecma-international.org/13.0/#prod-IdentifierStartChar\n        // $, _, ID_Start\n        ID_Start: new RegExp(\"[_$\\\\p{ID_Start}]\", \"u\"),\n        // https://262.ecma-international.org/13.0/#prod-IdentifierPartChar\n        // $, zero-width-joiner, zero-width-non-joiner, ID_Continue\n        ID_Continue: new RegExp(\"[$\\\\u200C\\\\u200D\\\\p{ID_Continue}]+\", \"u\"),\n    };\n} catch(e) {\n    // Could not use modern JS \\p{...}. UNICODE is already defined above so let's continue\n}\n\nfunction get_full_char(str, pos) {\n    if (is_surrogate_pair_head(str.charCodeAt(pos))) {\n        if (is_surrogate_pair_tail(str.charCodeAt(pos + 1))) {\n            return str.charAt(pos) + str.charAt(pos + 1);\n        }\n    } else if (is_surrogate_pair_tail(str.charCodeAt(pos))) {\n        if (is_surrogate_pair_head(str.charCodeAt(pos - 1))) {\n            return str.charAt(pos - 1) + str.charAt(pos);\n        }\n    }\n    return str.charAt(pos);\n}\n\nfunction get_full_char_code(str, pos) {\n    // https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n    if (is_surrogate_pair_head(str.charCodeAt(pos))) {\n        return 0x10000 + (str.charCodeAt(pos) - 0xd800 << 10) + str.charCodeAt(pos + 1) - 0xdc00;\n    }\n    return str.charCodeAt(pos);\n}\n\nfunction get_full_char_length(str) {\n    var surrogates = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        if (is_surrogate_pair_head(str.charCodeAt(i)) && is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n            surrogates++;\n            i++;\n        }\n    }\n\n    return str.length - surrogates;\n}\n\nfunction from_char_code(code) {\n    // Based on https://github.com/mathiasbynens/String.fromCodePoint/blob/master/fromcodepoint.js\n    if (code > 0xFFFF) {\n        code -= 0x10000;\n        return (String.fromCharCode((code >> 10) + 0xD800) +\n            String.fromCharCode((code % 0x400) + 0xDC00));\n    }\n    return String.fromCharCode(code);\n}\n\nfunction is_surrogate_pair_head(code) {\n    return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction is_surrogate_pair_tail(code) {\n    return code >= 0xdc00 && code <= 0xdfff;\n}\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction is_identifier_start(ch) {\n    return UNICODE.ID_Start.test(ch);\n}\n\nfunction is_identifier_char(ch) {\n    return UNICODE.ID_Continue.test(ch);\n}\n\nconst BASIC_IDENT = /^[a-z_$][a-z0-9_$]*$/i;\n\nfunction is_basic_identifier_string(str) {\n    return BASIC_IDENT.test(str);\n}\n\nfunction is_identifier_string(str, allow_surrogates) {\n    if (BASIC_IDENT.test(str)) {\n        return true;\n    }\n    if (!allow_surrogates && /[\\ud800-\\udfff]/.test(str)) {\n        return false;\n    }\n    var match = UNICODE.ID_Start.exec(str);\n    if (!match || match.index !== 0) {\n        return false;\n    }\n\n    str = str.slice(match[0].length);\n    if (!str) {\n        return true;\n    }\n\n    match = UNICODE.ID_Continue.exec(str);\n    return !!match && match[0].length === str.length;\n}\n\nfunction parse_js_number(num, allow_e = true) {\n    if (!allow_e && num.includes(\"e\")) {\n        return NaN;\n    }\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else if (RE_ES6_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 8);\n    } else if (RE_BIN_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 2);\n    } else if (RE_DEC_NUMBER.test(num)) {\n        return parseFloat(num);\n    } else {\n        var val = parseFloat(num);\n        if (val == num) return val;\n    }\n}\n\nclass JS_Parse_Error extends Error {\n    constructor(message, filename, line, col, pos) {\n        super();\n\n        this.name = \"SyntaxError\";\n        this.message = message;\n        this.filename = filename;\n        this.line = line;\n        this.col = col;\n        this.pos = pos;\n    }\n}\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n}\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n}\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        brace_counter   : 0,\n        template_braces : [],\n        comments_before : [],\n        directives      : {},\n        directive_stack : []\n    };\n\n    function peek() { return get_full_char(S.text, S.pos); }\n\n    // Used because parsing ?. involves a lookahead for a digit\n    function is_option_chain_op() {\n        const must_be_dot = S.text.charCodeAt(S.pos + 1) === 46;\n        if (!must_be_dot) return false;\n\n        const cannot_be_digit = S.text.charCodeAt(S.pos + 2);\n        return cannot_be_digit < 48 || cannot_be_digit > 57;\n    }\n\n    function next(signal_eof, in_string) {\n        var ch = get_full_char(S.text, S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if (NEWLINE_CHARS.has(ch)) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (ch == \"\\r\" && peek() == \"\\n\") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = \"\\n\";\n            }\n        } else {\n            if (ch.length > 1) {\n                ++S.pos;\n                ++S.col;\n            }\n            ++S.col;\n        }\n        return ch;\n    }\n\n    function forward(i) {\n        while (i--) next();\n    }\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    }\n\n    function find_eol() {\n        var text = S.text;\n        for (var i = S.pos, n = S.text.length; i < n; ++i) {\n            var ch = text[i];\n            if (NEWLINE_CHARS.has(ch))\n                return i;\n        }\n        return -1;\n    }\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    }\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    }\n\n    var prev_was_dot = false;\n    var previous_token = null;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == \"operator\" && !UNARY_POSTFIX.has(value)) ||\n                           (type == \"keyword\" && KEYWORDS_BEFORE_EXPRESSION.has(value)) ||\n                           (type == \"punc\" && PUNC_BEFORE_EXPRESSION.has(value))) ||\n                           (type == \"arrow\");\n        if (type == \"punc\" && (value == \".\" || value == \"?.\")) {\n            prev_was_dot = true;\n        } else if (!is_comment) {\n            prev_was_dot = false;\n        }\n        const line     = S.tokline;\n        const col      = S.tokcol;\n        const pos      = S.tokpos;\n        const nlb      = S.newline_before;\n        const file     = filename;\n        let comments_before = [];\n        let comments_after  = [];\n\n        if (!is_comment) {\n            comments_before = S.comments_before;\n            comments_after = S.comments_before = [];\n        }\n        S.newline_before = false;\n        const tok = new AST_Token(type, value, line, col, pos, nlb, comments_before, comments_after, file);\n\n        if (!is_comment) previous_token = tok;\n        return tok;\n    }\n\n    function skip_whitespace() {\n        while (WHITESPACE_CHARS.has(peek()))\n            next();\n    }\n\n    function read_while(pred) {\n        var ret = \"\", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    }\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    }\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == \".\", is_big_int = false, numeric_separator = false;\n        var num = read_while(function(ch, i) {\n            if (is_big_int) return false;\n\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 95: // _\n                return (numeric_separator = true);\n              case 98: case 66: // bB\n                return (has_x = true); // Can occur in hex sequence, don't return false yet\n              case 111: case 79: // oO\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n\n            if (ch === \"n\") {\n                is_big_int = true;\n\n                return true;\n            }\n\n            return RE_NUM_LITERAL.test(ch);\n        });\n        if (prefix) num = prefix + num;\n\n        LATEST_RAW = num;\n\n        if (RE_OCT_NUMBER.test(num) && next_token.has_directive(\"use strict\")) {\n            parse_error(\"Legacy octal literals are not allowed in strict mode\");\n        }\n        if (numeric_separator) {\n            if (num.endsWith(\"_\")) {\n                parse_error(\"Numeric separators are not allowed at the end of numeric literals\");\n            } else if (num.includes(\"__\")) {\n                parse_error(\"Only one underscore is allowed as numeric separator\");\n            }\n            num = num.replace(/_/g, \"\");\n        }\n        if (num.endsWith(\"n\")) {\n            const without_n = num.slice(0, -1);\n            const allow_e = RE_HEX_NUMBER.test(without_n);\n            const valid = parse_js_number(without_n, allow_e);\n            if (!has_dot && RE_BIG_INT.test(num) && !isNaN(valid))\n                return token(\"big_int\", without_n);\n            parse_error(\"Invalid or unexpected token\");\n        }\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            return token(\"num\", valid);\n        } else {\n            parse_error(\"Invalid syntax: \" + num);\n        }\n    }\n\n    function is_octal(ch) {\n        return ch >= \"0\" && ch <= \"7\";\n    }\n\n    function read_escaped_char(in_string, strict_hex, template_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return \"\\n\";\n          case 114 : return \"\\r\";\n          case 116 : return \"\\t\";\n          case 98  : return \"\\b\";\n          case 118 : return \"\\u000b\"; // \\v\n          case 102 : return \"\\f\";\n          case 120 : return String.fromCharCode(hex_bytes(2, strict_hex)); // \\x\n          case 117 : // \\u\n            if (peek() == \"{\") {\n                next(true);\n                if (peek() === \"}\")\n                    parse_error(\"Expecting hex-character between {}\");\n                while (peek() == \"0\") next(true); // No significance\n                var result, length = find(\"}\", true) - S.pos;\n                // Avoid 32 bit integer overflow (1 << 32 === 1)\n                // We know first character isn't 0 and thus out of range anyway\n                if (length > 6 || (result = hex_bytes(length, strict_hex)) > 0x10FFFF) {\n                    parse_error(\"Unicode reference out of bounds\");\n                }\n                next(true);\n                return from_char_code(result);\n            }\n            return String.fromCharCode(hex_bytes(4, strict_hex));\n          case 10  : return \"\"; // newline\n          case 13  :            // \\r\n            if (peek() == \"\\n\") { // DOS newline\n                next(true, in_string);\n                return \"\";\n            }\n        }\n        if (is_octal(ch)) {\n            if (template_string && strict_hex) {\n                const represents_null_character = ch === \"0\" && !is_octal(peek());\n                if (!represents_null_character) {\n                    parse_error(\"Octal escape sequences are not allowed in template strings\");\n                }\n            }\n            return read_octal_escape_sequence(ch, strict_hex);\n        }\n        return ch;\n    }\n\n    function read_octal_escape_sequence(ch, strict_octal) {\n        // Read\n        var p = peek();\n        if (p >= \"0\" && p <= \"7\") {\n            ch += next(true);\n            if (ch[0] <= \"3\" && (p = peek()) >= \"0\" && p <= \"7\")\n                ch += next(true);\n        }\n\n        // Parse\n        if (ch === \"0\") return \"\\0\";\n        if (ch.length > 0 && next_token.has_directive(\"use strict\") && strict_octal)\n            parse_error(\"Legacy octal escape sequences are not allowed in strict mode\");\n        return String.fromCharCode(parseInt(ch, 8));\n    }\n\n    function hex_bytes(n, strict_hex) {\n        var num = 0;\n        for (; n > 0; --n) {\n            if (!strict_hex && isNaN(parseInt(peek(), 16))) {\n                return parseInt(num, 16) || \"\";\n            }\n            var digit = next(true);\n            if (isNaN(parseInt(digit, 16)))\n                parse_error(\"Invalid hex-character pattern in string\");\n            num += digit;\n        }\n        return parseInt(num, 16);\n    }\n\n    var read_string = with_eof_error(\"Unterminated string constant\", function() {\n        const start_pos = S.pos;\n        var quote = next(), ret = [];\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == \"\\\\\") ch = read_escaped_char(true, true);\n            else if (ch == \"\\r\" || ch == \"\\n\") parse_error(\"Unterminated string constant\");\n            else if (ch == quote) break;\n            ret.push(ch);\n        }\n        var tok = token(\"string\", ret.join(\"\"));\n        LATEST_RAW = S.text.slice(start_pos, S.pos);\n        tok.quote = quote;\n        return tok;\n    });\n\n    var read_template_characters = with_eof_error(\"Unterminated template\", function(begin) {\n        if (begin) {\n            S.template_braces.push(S.brace_counter);\n        }\n        var content = \"\", raw = \"\", ch, tok;\n        next(true, true);\n        while ((ch = next(true, true)) != \"`\") {\n            if (ch == \"\\r\") {\n                if (peek() == \"\\n\") ++S.pos;\n                ch = \"\\n\";\n            } else if (ch == \"$\" && peek() == \"{\") {\n                next(true, true);\n                S.brace_counter++;\n                tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n                TEMPLATE_RAWS.set(tok, raw);\n                tok.template_end = false;\n                return tok;\n            }\n\n            raw += ch;\n            if (ch == \"\\\\\") {\n                var tmp = S.pos;\n                var prev_is_tag = previous_token && (previous_token.type === \"name\" || previous_token.type === \"punc\" && (previous_token.value === \")\" || previous_token.value === \"]\"));\n                ch = read_escaped_char(true, !prev_is_tag, true);\n                raw += S.text.substr(tmp, S.pos - tmp);\n            }\n\n            content += ch;\n        }\n        S.template_braces.pop();\n        tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n        TEMPLATE_RAWS.set(tok, raw);\n        tok.template_end = true;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find_eol(), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    }\n\n    var skip_multiline_comment = with_eof_error(\"Unterminated multiline comment\", function() {\n        var regex_allowed = S.regex_allowed;\n        var i = find(\"*/\", true);\n        var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, \"\\n\");\n        // update stream position\n        forward(get_full_char_length(text) /* text length doesn't count \\r\\n as 2 char while S.pos - i does */ + 2);\n        S.comments_before.push(token(\"comment2\", text, true));\n        S.newline_before = S.newline_before || text.includes(\"\\n\");\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    });\n\n    var read_name = with_eof_error(\"Unterminated identifier name\", function() {\n        var name = [], ch, escaped = false;\n        var read_escaped_identifier_char = function() {\n            escaped = true;\n            next();\n            if (peek() !== \"u\") {\n                parse_error(\"Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}\");\n            }\n            return read_escaped_char(false, true);\n        };\n\n        // Read first character (ID_Start)\n        if ((ch = peek()) === \"\\\\\") {\n            ch = read_escaped_identifier_char();\n            if (!is_identifier_start(ch)) {\n                parse_error(\"First identifier char is an invalid identifier char\");\n            }\n        } else if (is_identifier_start(ch)) {\n            next();\n        } else {\n            return \"\";\n        }\n\n        name.push(ch);\n\n        // Read ID_Continue\n        while ((ch = peek()) != null) {\n            if ((ch = peek()) === \"\\\\\") {\n                ch = read_escaped_identifier_char();\n                if (!is_identifier_char(ch)) {\n                    parse_error(\"Invalid escaped identifier char\");\n                }\n            } else {\n                if (!is_identifier_char(ch)) {\n                    break;\n                }\n                next();\n            }\n            name.push(ch);\n        }\n        const name_str = name.join(\"\");\n        if (RESERVED_WORDS.has(name_str) && escaped) {\n            parse_error(\"Escaped characters are not allowed in keywords\");\n        }\n        return name_str;\n    });\n\n    var read_regexp = with_eof_error(\"Unterminated regular expression\", function(source) {\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (NEWLINE_CHARS.has(ch)) {\n            parse_error(\"Unexpected line terminator\");\n        } else if (prev_backslash) {\n            source += \"\\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == \"[\") {\n            in_class = true;\n            source += ch;\n        } else if (ch == \"]\" && in_class) {\n            in_class = false;\n            source += ch;\n        } else if (ch == \"/\" && !in_class) {\n            break;\n        } else if (ch == \"\\\\\") {\n            prev_backslash = true;\n        } else {\n            source += ch;\n        }\n        const flags = read_name();\n        return token(\"regexp\", \"/\" + source + \"/\" + flags);\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS.has(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        }\n        return token(\"operator\", grow(prefix || next()));\n    }\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case \"/\":\n            next();\n            return skip_line_comment(\"comment1\");\n          case \"*\":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp(\"\") : read_operator(\"/\");\n    }\n\n    function handle_eq_sign() {\n        next();\n        if (peek() === \">\") {\n            next();\n            return token(\"arrow\", \"=>\");\n        } else {\n            return read_operator(\"=\");\n        }\n    }\n\n    function handle_dot() {\n        next();\n        if (is_digit(peek().charCodeAt(0))) {\n            return read_num(\".\");\n        }\n        if (peek() === \".\") {\n            next();  // Consume second dot\n            next();  // Consume third dot\n            return token(\"expand\", \"...\");\n        }\n\n        return token(\"punc\", \".\");\n    }\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token(\"name\", word);\n        return KEYWORDS_ATOM.has(word) ? token(\"atom\", word)\n            : !KEYWORDS.has(word) ? token(\"name\", word)\n            : OPERATORS.has(word) ? token(\"operator\", word)\n            : token(\"keyword\", word);\n    }\n\n    function read_private_word() {\n        next();\n        return token(\"privatename\", read_name());\n    }\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    }\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        if (shebang && S.pos == 0 && looking_at(\"#!\")) {\n            start_token();\n            forward(2);\n            skip_line_comment(\"comment5\");\n        }\n        for (;;) {\n            skip_whitespace();\n            start_token();\n            if (html5_comments) {\n                if (looking_at(\"<!--\")) {\n                    forward(4);\n                    skip_line_comment(\"comment3\");\n                    continue;\n                }\n                if (looking_at(\"-->\") && S.newline_before) {\n                    forward(3);\n                    skip_line_comment(\"comment4\");\n                    continue;\n                }\n            }\n            var ch = peek();\n            if (!ch) return token(\"eof\");\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 34: case 39: return read_string();\n              case 46: return handle_dot();\n              case 47: {\n                  var tok = handle_slash();\n                  if (tok === next_token) continue;\n                  return tok;\n              }\n              case 61: return handle_eq_sign();\n              case 63: {\n                  if (!is_option_chain_op()) break;  // Handled below\n\n                  next(); // ?\n                  next(); // .\n\n                  return token(\"punc\", \"?.\");\n              }\n              case 96: return read_template_characters(true);\n              case 123:\n                S.brace_counter++;\n                break;\n              case 125:\n                S.brace_counter--;\n                if (S.template_braces.length > 0\n                    && S.template_braces[S.template_braces.length - 1] === S.brace_counter)\n                    return read_template_characters(false);\n                break;\n            }\n            if (is_digit(code)) return read_num();\n            if (PUNC_CHARS.has(ch)) return token(\"punc\", next());\n            if (OPERATOR_CHARS.has(ch)) return read_operator();\n            if (code == 92 || is_identifier_start(ch)) return read_word();\n            if (code == 35) return read_private_word();\n            break;\n        }\n        parse_error(\"Unexpected character '\" + ch + \"'\");\n    }\n\n    next_token.next = next;\n    next_token.peek = peek;\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    next_token.add_directive = function(directive) {\n        S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n        if (S.directives[directive] === undefined) {\n            S.directives[directive] = 1;\n        } else {\n            S.directives[directive]++;\n        }\n    };\n\n    next_token.push_directives_stack = function() {\n        S.directive_stack.push([]);\n    };\n\n    next_token.pop_directives_stack = function() {\n        var directives = S.directive_stack[S.directive_stack.length - 1];\n\n        for (var i = 0; i < directives.length; i++) {\n            S.directives[directives[i]]--;\n        }\n\n        S.directive_stack.pop();\n    };\n\n    next_token.has_directive = function(directive) {\n        return S.directives[directive] > 0;\n    };\n\n    return next_token;\n\n}\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    \"typeof\",\n    \"void\",\n    \"delete\",\n    \"--\",\n    \"++\",\n    \"!\",\n    \"~\",\n    \"-\",\n    \"+\"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ \"--\", \"++\" ]);\n\nvar ASSIGNMENT = makePredicate([ \"=\", \"+=\", \"-=\", \"??=\", \"&&=\", \"||=\", \"/=\", \"*=\", \"**=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\" ]);\n\nvar LOGICAL_ASSIGNMENT = makePredicate([ \"??=\", \"&&=\", \"||=\" ]);\n\nvar PRECEDENCE = (function(a, ret) {\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        [\"||\"],\n        [\"??\"],\n        [\"&&\"],\n        [\"|\"],\n        [\"^\"],\n        [\"&\"],\n        [\"==\", \"===\", \"!=\", \"!==\"],\n        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n        [\">>\", \"<<\", \">>>\"],\n        [\"+\", \"-\"],\n        [\"*\", \"/\", \"%\"],\n        [\"**\"]\n    ],\n    {}\n);\n\nvar ATOMIC_START_TOKEN = makePredicate([ \"atom\", \"num\", \"big_int\", \"string\", \"regexp\", \"name\"]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n    // maps start tokens to count of comments found outside of their parens\n    // Example: /* I count */ ( /* I don't */ foo() )\n    // Useful because comments_before property of call with parens outside\n    // contains both comments inside and outside these parens. Used to find the\n    // right #__PURE__ comments for an expression\n    const outer_comments_before_counts = new WeakMap();\n\n    options = defaults(options, {\n        bare_returns   : false,\n        ecma           : null,  // Legacy\n        expression     : false,\n        filename       : null,\n        html5_comments : true,\n        module         : false,\n        shebang        : true,\n        strict         : false,\n        toplevel       : null,\n    }, true);\n\n    var S = {\n        input         : (typeof $TEXT == \"string\"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_async      : -1,\n        in_generator  : -1,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    }\n\n    function peek() { return S.peeked || (S.peeked = S.input()); }\n\n    function next() {\n        S.prev = S.token;\n\n        if (!S.peeked) peek();\n        S.token = S.peeked;\n        S.peeked = null;\n        S.in_directives = S.in_directives && (\n            S.token.type == \"string\" || is(\"punc\", \";\")\n        );\n        return S.token;\n    }\n\n    function prev() {\n        return S.prev;\n    }\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    }\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    }\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, \"Unexpected token: \" + token.type + \" (\" + token.value + \")\");\n    }\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, \"Unexpected token \" + S.token.type + \" «\" + S.token.value + \"»\" + \", expected \" + type + \" «\" + val + \"»\");\n    }\n\n    function expect(punc) { return expect_token(\"punc\", punc); }\n\n    function has_newline_before(token) {\n        return token.nlb || !token.comments_before.every((comment) => !comment.nlb);\n    }\n\n    function can_insert_semicolon() {\n        return !options.strict\n            && (is(\"eof\") || is(\"punc\", \"}\") || has_newline_before(S.token));\n    }\n\n    function is_in_generator() {\n        return S.in_generator === S.in_function;\n    }\n\n    function is_in_async() {\n        return S.in_async === S.in_function;\n    }\n\n    function can_await() {\n        return (\n            S.in_async === S.in_function\n            || S.in_function === 0 && S.input.has_directive(\"use strict\")\n        );\n    }\n\n    function semicolon(optional) {\n        if (is(\"punc\", \";\")) next();\n        else if (!optional && !can_insert_semicolon()) unexpected();\n    }\n\n    function parenthesised() {\n        expect(\"(\");\n        var exp = expression(true);\n        expect(\")\");\n        return exp;\n    }\n\n    function embed_tokens(parser) {\n        return function _embed_tokens_wrapper(...args) {\n            const start = S.token;\n            const expr = parser(...args);\n            expr.start = start;\n            expr.end = prev();\n            return expr;\n        };\n    }\n\n    function handle_regexp() {\n        if (is(\"operator\", \"/\") || is(\"operator\", \"/=\")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    }\n\n    var statement = embed_tokens(function statement(is_export_default, is_for_body, is_if_body) {\n        handle_regexp();\n        switch (S.token.type) {\n          case \"string\":\n            if (S.in_directives) {\n                var token = peek();\n                if (!LATEST_RAW.includes(\"\\\\\")\n                    && (is_token(token, \"punc\", \";\")\n                        || is_token(token, \"punc\", \"}\")\n                        || has_newline_before(token)\n                        || is_token(token, \"eof\"))) {\n                    S.input.add_directive(S.token.value);\n                } else {\n                    S.in_directives = false;\n                }\n            }\n            var dir = S.in_directives, stat = simple_statement();\n            return dir && stat.body instanceof AST_String ? new AST_Directive(stat.body) : stat;\n          case \"template_head\":\n          case \"num\":\n          case \"big_int\":\n          case \"regexp\":\n          case \"operator\":\n          case \"atom\":\n            return simple_statement();\n\n          case \"name\":\n          case \"privatename\":\n            if(is(\"privatename\") && !S.in_class)\n                croak(\"Private field must be used in an enclosing class\");\n\n            if (S.token.value == \"async\" && is_token(peek(), \"keyword\", \"function\")) {\n                next();\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, true, is_export_default);\n            }\n            if (S.token.value == \"import\" && !is_token(peek(), \"punc\", \"(\") && !is_token(peek(), \"punc\", \".\")) {\n                next();\n                var node = import_statement();\n                semicolon();\n                return node;\n            }\n            return is_token(peek(), \"punc\", \":\")\n                ? labeled_statement()\n                : simple_statement();\n\n          case \"punc\":\n            switch (S.token.value) {\n              case \"{\":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case \"[\":\n              case \"(\":\n                return simple_statement();\n              case \";\":\n                S.in_directives = false;\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case \"keyword\":\n            switch (S.token.value) {\n              case \"break\":\n                next();\n                return break_cont(AST_Break);\n\n              case \"continue\":\n                next();\n                return break_cont(AST_Continue);\n\n              case \"debugger\":\n                next();\n                semicolon();\n                return new AST_Debugger();\n\n              case \"do\":\n                next();\n                var body = in_loop(statement);\n                expect_token(\"keyword\", \"while\");\n                var condition = parenthesised();\n                semicolon(true);\n                return new AST_Do({\n                    body      : body,\n                    condition : condition\n                });\n\n              case \"while\":\n                next();\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(function() { return statement(false, true); })\n                });\n\n              case \"for\":\n                next();\n                return for_();\n\n              case \"class\":\n                next();\n                if (is_for_body) {\n                    croak(\"classes are not allowed as the body of a loop\");\n                }\n                if (is_if_body) {\n                    croak(\"classes are not allowed as the body of an if\");\n                }\n                return class_(AST_DefClass, is_export_default);\n\n              case \"function\":\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, false, is_export_default);\n\n              case \"if\":\n                next();\n                return if_();\n\n              case \"return\":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak(\"'return' outside of function\");\n                next();\n                var value = null;\n                if (is(\"punc\", \";\")) {\n                    next();\n                } else if (!can_insert_semicolon()) {\n                    value = expression(true);\n                    semicolon();\n                }\n                return new AST_Return({\n                    value: value\n                });\n\n              case \"switch\":\n                next();\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case \"throw\":\n                next();\n                if (has_newline_before(S.token))\n                    croak(\"Illegal newline after 'throw'\");\n                var value = expression(true);\n                semicolon();\n                return new AST_Throw({\n                    value: value\n                });\n\n              case \"try\":\n                next();\n                return try_();\n\n              case \"var\":\n                next();\n                var node = var_();\n                semicolon();\n                return node;\n\n              case \"let\":\n                next();\n                var node = let_();\n                semicolon();\n                return node;\n\n              case \"const\":\n                next();\n                var node = const_();\n                semicolon();\n                return node;\n\n              case \"with\":\n                if (S.input.has_directive(\"use strict\")) {\n                    croak(\"Strict mode may not include a with statement\");\n                }\n                next();\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n\n              case \"export\":\n                if (!is_token(peek(), \"punc\", \"(\")) {\n                    next();\n                    var node = export_statement();\n                    if (is(\"punc\", \";\")) semicolon();\n                    return node;\n                }\n            }\n        }\n        unexpected();\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (label.name === \"await\" && is_in_async()) {\n            token_error(S.prev, \"await cannot be used as label inside async function\");\n        }\n        if (S.labels.some((l) => l.name === label.name)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak(\"Label \" + label.name + \" defined twice\");\n        }\n        expect(\":\");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref) {\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak(\"Continue label `\" + label.name + \"` refers to non-IterationStatement.\",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    }\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    }\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = S.labels.find((l) => l.name === label.name);\n            if (!ldef)\n                croak(\"Undefined label \" + label.name);\n            label.thedef = ldef;\n        } else if (S.in_loop == 0)\n            croak(type.TYPE + \" not inside a loop or switch\");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    }\n\n    function for_() {\n        var for_await_error = \"`for await` invalid in this context\";\n        var await_tok = S.token;\n        if (await_tok.type == \"name\" && await_tok.value == \"await\") {\n            if (!can_await()) {\n                token_error(await_tok, for_await_error);\n            }\n            next();\n        } else {\n            await_tok = false;\n        }\n        expect(\"(\");\n        var init = null;\n        if (!is(\"punc\", \";\")) {\n            init =\n                is(\"keyword\", \"var\") ? (next(), var_(true)) :\n                is(\"keyword\", \"let\") ? (next(), let_(true)) :\n                is(\"keyword\", \"const\") ? (next(), const_(true)) :\n                                       expression(true, true);\n            var is_in = is(\"operator\", \"in\");\n            var is_of = is(\"name\", \"of\");\n            if (await_tok && !is_of) {\n                token_error(await_tok, for_await_error);\n            }\n            if (is_in || is_of) {\n                if (init instanceof AST_Definitions) {\n                    if (init.definitions.length > 1)\n                        token_error(init.start, \"Only one variable declaration allowed in for..in loop\");\n                } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {\n                    token_error(init.start, \"Invalid left-hand side in for..in loop\");\n                }\n                next();\n                if (is_in) {\n                    return for_in(init);\n                } else {\n                    return for_of(init, !!await_tok);\n                }\n            }\n        } else if (await_tok) {\n            token_error(await_tok, for_await_error);\n        }\n        return regular_for(init);\n    }\n\n    function regular_for(init) {\n        expect(\";\");\n        var test = is(\"punc\", \";\") ? null : expression(true);\n        expect(\";\");\n        var step = is(\"punc\", \")\") ? null : expression(true);\n        expect(\")\");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_of(init, is_await) {\n        var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForOf({\n            await  : is_await,\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_in(init) {\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForIn({\n            init   : init,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    var arrow_function = function(start, argnames, is_async) {\n        if (has_newline_before(S.token)) {\n            croak(\"Unexpected newline before arrow (=>)\");\n        }\n\n        expect_token(\"arrow\", \"=>\");\n\n        var body = _function_body(is(\"punc\", \"{\"), false, is_async);\n\n        var end =\n            body instanceof Array && body.length ? body[body.length - 1].end :\n            body instanceof Array ? start :\n                body.end;\n\n        return new AST_Arrow({\n            start    : start,\n            end      : end,\n            async    : is_async,\n            argnames : argnames,\n            body     : body\n        });\n    };\n\n    var function_ = function(ctor, is_generator_property, is_async, is_export_default) {\n        var in_statement = ctor === AST_Defun;\n        var is_generator = is(\"operator\", \"*\");\n        if (is_generator) {\n            next();\n        }\n\n        var name = is(\"name\") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name) {\n            if (is_export_default) {\n                ctor = AST_Function;\n            } else {\n                unexpected();\n            }\n        }\n\n        if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration))\n            unexpected(prev());\n\n        var args = [];\n        var body = _function_body(true, is_generator || is_generator_property, is_async, name, args);\n        return new ctor({\n            start : args.start,\n            end   : body.end,\n            is_generator: is_generator,\n            async : is_async,\n            name  : name,\n            argnames: args,\n            body  : body\n        });\n    };\n\n    class UsedParametersTracker {\n        constructor(is_parameter, strict, duplicates_ok = false) {\n            this.is_parameter = is_parameter;\n            this.duplicates_ok = duplicates_ok;\n            this.parameters = new Set();\n            this.duplicate = null;\n            this.default_assignment = false;\n            this.spread = false;\n            this.strict_mode = !!strict;\n        }\n        add_parameter(token) {\n            if (this.parameters.has(token.value)) {\n                if (this.duplicate === null) {\n                    this.duplicate = token;\n                }\n                this.check_strict();\n            } else {\n                this.parameters.add(token.value);\n                if (this.is_parameter) {\n                    switch (token.value) {\n                      case \"arguments\":\n                      case \"eval\":\n                      case \"yield\":\n                        if (this.strict_mode) {\n                            token_error(token, \"Unexpected \" + token.value + \" identifier as parameter inside strict mode\");\n                        }\n                        break;\n                      default:\n                        if (RESERVED_WORDS.has(token.value)) {\n                            unexpected();\n                        }\n                    }\n                }\n            }\n        }\n        mark_default_assignment(token) {\n            if (this.default_assignment === false) {\n                this.default_assignment = token;\n            }\n        }\n        mark_spread(token) {\n            if (this.spread === false) {\n                this.spread = token;\n            }\n        }\n        mark_strict_mode() {\n            this.strict_mode = true;\n        }\n        is_strict() {\n            return this.default_assignment !== false || this.spread !== false || this.strict_mode;\n        }\n        check_strict() {\n            if (this.is_strict() && this.duplicate !== null && !this.duplicates_ok) {\n                token_error(this.duplicate, \"Parameter \" + this.duplicate.value + \" was used already\");\n            }\n        }\n    }\n\n    function parameters(params) {\n        var used_parameters = new UsedParametersTracker(true, S.input.has_directive(\"use strict\"));\n\n        expect(\"(\");\n\n        while (!is(\"punc\", \")\")) {\n            var param = parameter(used_parameters);\n            params.push(param);\n\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n            }\n\n            if (param instanceof AST_Expansion) {\n                break;\n            }\n        }\n\n        next();\n    }\n\n    function parameter(used_parameters, symbol_type) {\n        var param;\n        var expand = false;\n        if (used_parameters === undefined) {\n            used_parameters = new UsedParametersTracker(true, S.input.has_directive(\"use strict\"));\n        }\n        if (is(\"expand\", \"...\")) {\n            expand = S.token;\n            used_parameters.mark_spread(S.token);\n            next();\n        }\n        param = binding_element(used_parameters, symbol_type);\n\n        if (is(\"operator\", \"=\") && expand === false) {\n            used_parameters.mark_default_assignment(S.token);\n            next();\n            param = new AST_DefaultAssign({\n                start: param.start,\n                left: param,\n                operator: \"=\",\n                right: expression(false),\n                end: S.token\n            });\n        }\n\n        if (expand !== false) {\n            if (!is(\"punc\", \")\")) {\n                unexpected();\n            }\n            param = new AST_Expansion({\n                start: expand,\n                expression: param,\n                end: expand\n            });\n        }\n        used_parameters.check_strict();\n\n        return param;\n    }\n\n    function binding_element(used_parameters, symbol_type) {\n        var elements = [];\n        var first = true;\n        var is_expand = false;\n        var expand_token;\n        var first_token = S.token;\n        if (used_parameters === undefined) {\n            const strict = S.input.has_directive(\"use strict\");\n            const duplicates_ok = symbol_type === AST_SymbolVar;\n            used_parameters = new UsedParametersTracker(false, strict, duplicates_ok);\n        }\n        symbol_type = symbol_type === undefined ? AST_SymbolFunarg : symbol_type;\n        if (is(\"punc\", \"[\")) {\n            next();\n            while (!is(\"punc\", \"]\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"punc\")) {\n                    switch (S.token.value) {\n                      case \",\":\n                        elements.push(new AST_Hole({\n                            start: S.token,\n                            end: S.token\n                        }));\n                        continue;\n                      case \"]\": // Trailing comma after last element\n                        break;\n                      case \"[\":\n                      case \"{\":\n                        elements.push(binding_element(used_parameters, symbol_type));\n                        break;\n                      default:\n                        unexpected();\n                    }\n                } else if (is(\"name\")) {\n                    used_parameters.add_parameter(S.token);\n                    elements.push(as_symbol(symbol_type));\n                } else {\n                    croak(\"Invalid function parameter\");\n                }\n                if (is(\"operator\", \"=\") && is_expand === false) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1] = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].start,\n                        left: elements[elements.length - 1],\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"]\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                    elements[elements.length - 1] = new AST_Expansion({\n                        start: expand_token,\n                        expression: elements[elements.length - 1],\n                        end: expand_token\n                    });\n                }\n            }\n            expect(\"]\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: true,\n                end: prev()\n            });\n        } else if (is(\"punc\", \"{\")) {\n            next();\n            while (!is(\"punc\", \"}\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"name\") && (is_token(peek(), \"punc\") || is_token(peek(), \"operator\")) && [\",\", \"}\", \"=\"].includes(peek().value)) {\n                    used_parameters.add_parameter(S.token);\n                    var start = prev();\n                    var value = as_symbol(symbol_type);\n                    if (is_expand) {\n                        elements.push(new AST_Expansion({\n                            start: expand_token,\n                            expression: value,\n                            end: value.end,\n                        }));\n                    } else {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: start,\n                            key: value.name,\n                            value: value,\n                            end: value.end,\n                        }));\n                    }\n                } else if (is(\"punc\", \"}\")) {\n                    continue; // Allow trailing hole\n                } else {\n                    var property_token = S.token;\n                    var property = as_property_name();\n                    if (property === null) {\n                        unexpected(prev());\n                    } else if (prev().type === \"name\" && !is(\"punc\", \":\")) {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: prev(),\n                            key: property,\n                            value: new symbol_type({\n                                start: prev(),\n                                name: property,\n                                end: prev()\n                            }),\n                            end: prev()\n                        }));\n                    } else {\n                        expect(\":\");\n                        elements.push(new AST_ObjectKeyVal({\n                            start: property_token,\n                            quote: property_token.quote,\n                            key: property,\n                            value: binding_element(used_parameters, symbol_type),\n                            end: prev()\n                        }));\n                    }\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"}\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                } else if (is(\"operator\", \"=\")) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1].value = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].value.start,\n                        left: elements[elements.length - 1].value,\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n            }\n            expect(\"}\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: false,\n                end: prev()\n            });\n        } else if (is(\"name\")) {\n            used_parameters.add_parameter(S.token);\n            return as_symbol(symbol_type);\n        } else {\n            croak(\"Invalid function parameter\");\n        }\n    }\n\n    function params_or_seq_(allow_arrows, maybe_sequence) {\n        var spread_token;\n        var invalid_sequence;\n        var trailing_comma;\n        var a = [];\n        expect(\"(\");\n        while (!is(\"punc\", \")\")) {\n            if (spread_token) unexpected(spread_token);\n            if (is(\"expand\", \"...\")) {\n                spread_token = S.token;\n                if (maybe_sequence) invalid_sequence = S.token;\n                next();\n                a.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(),\n                    end: S.token,\n                }));\n            } else {\n                a.push(expression());\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\")) {\n                    trailing_comma = prev();\n                    if (maybe_sequence) invalid_sequence = trailing_comma;\n                }\n            }\n        }\n        expect(\")\");\n        if (allow_arrows && is(\"arrow\", \"=>\")) {\n            if (spread_token && trailing_comma) unexpected(trailing_comma);\n        } else if (invalid_sequence) {\n            unexpected(invalid_sequence);\n        }\n        return a;\n    }\n\n    function _function_body(block, generator, is_async, name, args) {\n        var loop = S.in_loop;\n        var labels = S.labels;\n        var current_generator = S.in_generator;\n        var current_async = S.in_async;\n        ++S.in_function;\n        if (generator)\n            S.in_generator = S.in_function;\n        if (is_async)\n            S.in_async = S.in_function;\n        if (args) parameters(args);\n        if (block)\n            S.in_directives = true;\n        S.in_loop = 0;\n        S.labels = [];\n        if (block) {\n            S.input.push_directives_stack();\n            var a = block_();\n            if (name) _verify_symbol(name);\n            if (args) args.forEach(_verify_symbol);\n            S.input.pop_directives_stack();\n        } else {\n            var a = [new AST_Return({\n                start: S.token,\n                value: expression(false),\n                end: S.token\n            })];\n        }\n        --S.in_function;\n        S.in_loop = loop;\n        S.labels = labels;\n        S.in_generator = current_generator;\n        S.in_async = current_async;\n        return a;\n    }\n\n    function _await_expression() {\n        // Previous token must be \"await\" and not be interpreted as an identifier\n        if (!can_await()) {\n            croak(\"Unexpected await expression outside async function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        // the await expression is parsed as a unary expression in Babel\n        return new AST_Await({\n            start: prev(),\n            end: S.token,\n            expression : maybe_unary(true),\n        });\n    }\n\n    function _yield_expression() {\n        // Previous token must be keyword yield and not be interpret as an identifier\n        if (!is_in_generator()) {\n            croak(\"Unexpected yield expression outside generator function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        var start = S.token;\n        var star = false;\n        var has_expression = true;\n\n        // Attempt to get expression or star (and then the mandatory expression)\n        // behind yield on the same line.\n        //\n        // If nothing follows on the same line of the yieldExpression,\n        // it should default to the value `undefined` for yield to return.\n        // In that case, the `undefined` stored as `null` in ast.\n        //\n        // Note 1: It isn't allowed for yield* to close without an expression\n        // Note 2: If there is a nlb between yield and star, it is interpret as\n        //         yield <explicit undefined> <inserted automatic semicolon> *\n        if (can_insert_semicolon() ||\n            (is(\"punc\") && PUNC_AFTER_EXPRESSION.has(S.token.value))) {\n            has_expression = false;\n\n        } else if (is(\"operator\", \"*\")) {\n            star = true;\n            next();\n        }\n\n        return new AST_Yield({\n            start      : start,\n            is_star    : star,\n            expression : has_expression ? expression() : null,\n            end        : prev()\n        });\n    }\n\n    function if_() {\n        var cond = parenthesised(), body = statement(false, false, true), belse = null;\n        if (is(\"keyword\", \"else\")) {\n            next();\n            belse = statement(false, false, true);\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    }\n\n    function block_() {\n        expect(\"{\");\n        var a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    }\n\n    function switch_body_() {\n        expect(\"{\");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            if (is(\"keyword\", \"case\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(\":\");\n            } else if (is(\"keyword\", \"default\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(\":\"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            } else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    }\n\n    function try_() {\n        var body, bcatch = null, bfinally = null;\n        body = new AST_TryBlock({\n            start : S.token,\n            body  : block_(),\n            end   : prev(),\n        });\n        if (is(\"keyword\", \"catch\")) {\n            var start = S.token;\n            next();\n            if (is(\"punc\", \"{\")) {\n                var name = null;\n            } else {\n                expect(\"(\");\n                var name = parameter(undefined, AST_SymbolCatch);\n                expect(\")\");\n            }\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is(\"keyword\", \"finally\")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak(\"Missing catch/finally blocks\");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    }\n\n    /**\n     * var\n     *   vardef1 = 2,\n     *   vardef2 = 3;\n     */\n    function vardefs(no_in, kind) {\n        var var_defs = [];\n        var def;\n        for (;;) {\n            var sym_type =\n                kind === \"var\" ? AST_SymbolVar :\n                kind === \"const\" ? AST_SymbolConst :\n                kind === \"let\" ? AST_SymbolLet : null;\n            // var { a } = b\n            if (is(\"punc\", \"{\") || is(\"punc\", \"[\")) {\n                def = new AST_VarDef({\n                    start: S.token,\n                    name: binding_element(undefined, sym_type),\n                    value: is(\"operator\", \"=\") ? (expect_token(\"operator\", \"=\"), expression(false, no_in)) : null,\n                    end: prev()\n                });\n            } else {\n                def = new AST_VarDef({\n                    start : S.token,\n                    name  : as_symbol(sym_type),\n                    value : is(\"operator\", \"=\")\n                        ? (next(), expression(false, no_in))\n                        : !no_in && kind === \"const\"\n                            ? croak(\"Missing initializer in const declaration\") : null,\n                    end   : prev()\n                });\n                if (def.name.name == \"import\") croak(\"Unexpected token: import\");\n            }\n            var_defs.push(def);\n            if (!is(\"punc\", \",\"))\n                break;\n            next();\n        }\n        return var_defs;\n    }\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in, \"var\"),\n            end         : prev()\n        });\n    };\n\n    var let_ = function(no_in) {\n        return new AST_Let({\n            start       : prev(),\n            definitions : vardefs(no_in, \"let\"),\n            end         : prev()\n        });\n    };\n\n    var const_ = function(no_in) {\n        return new AST_Const({\n            start       : prev(),\n            definitions : vardefs(no_in, \"const\"),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token(\"operator\", \"new\");\n        if (is(\"punc\", \".\")) {\n            next();\n            expect_token(\"name\", \"target\");\n            return subscripts(new AST_NewTarget({\n                start : start,\n                end   : prev()\n            }), allow_calls);\n        }\n        var newexp = expr_atom(false), args;\n        if (is(\"punc\", \"(\")) {\n            next();\n            args = expr_list(\")\", true);\n        } else {\n            args = [];\n        }\n        var call = new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        });\n        annotate(call);\n        return subscripts(call, allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case \"name\":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case \"num\":\n            ret = new AST_Number({\n                start: tok,\n                end: tok,\n                value: tok.value,\n                raw: LATEST_RAW\n            });\n            break;\n          case \"big_int\":\n            ret = new AST_BigInt({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"string\":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case \"regexp\":\n            const [_, source, flags] = tok.value.match(/^\\/(.*)\\/(\\w*)$/);\n\n            ret = new AST_RegExp({ start: tok, end: tok, value: { source, flags } });\n            break;\n          case \"atom\":\n            switch (tok.value) {\n              case \"false\":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case \"true\":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case \"null\":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n        }\n        next();\n        return ret;\n    }\n\n    function to_fun_args(ex, default_seen_above) {\n        var insert_default = function(ex, default_value) {\n            if (default_value) {\n                return new AST_DefaultAssign({\n                    start: ex.start,\n                    left: ex,\n                    operator: \"=\",\n                    right: default_value,\n                    end: default_value.end\n                });\n            }\n            return ex;\n        };\n        if (ex instanceof AST_Object) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: false,\n                names: ex.properties.map(prop => to_fun_args(prop))\n            }), default_seen_above);\n        } else if (ex instanceof AST_ObjectKeyVal) {\n            ex.value = to_fun_args(ex.value);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Hole) {\n            return ex;\n        } else if (ex instanceof AST_Destructuring) {\n            ex.names = ex.names.map(name => to_fun_args(name));\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_SymbolRef) {\n            return insert_default(new AST_SymbolFunarg({\n                name: ex.name,\n                start: ex.start,\n                end: ex.end\n            }), default_seen_above);\n        } else if (ex instanceof AST_Expansion) {\n            ex.expression = to_fun_args(ex.expression);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Array) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: true,\n                names: ex.elements.map(elm => to_fun_args(elm))\n            }), default_seen_above);\n        } else if (ex instanceof AST_Assign) {\n            return insert_default(to_fun_args(ex.left, ex.right), default_seen_above);\n        } else if (ex instanceof AST_DefaultAssign) {\n            ex.left = to_fun_args(ex.left);\n            return ex;\n        } else {\n            croak(\"Invalid function parameter\", ex.start.line, ex.start.col);\n        }\n    }\n\n    var expr_atom = function(allow_calls, allow_arrows) {\n        if (is(\"operator\", \"new\")) {\n            return new_(allow_calls);\n        }\n        if (is(\"name\", \"import\") && is_token(peek(), \"punc\", \".\")) {\n            return import_meta();\n        }\n        var start = S.token;\n        var peeked;\n        var async = is(\"name\", \"async\")\n            && (peeked = peek()).value != \"[\"\n            && peeked.type != \"arrow\"\n            && as_atom_node();\n        if (is(\"punc\")) {\n            switch (S.token.value) {\n              case \"(\":\n                if (async && !allow_calls) break;\n                var exprs = params_or_seq_(allow_arrows, !async);\n                if (allow_arrows && is(\"arrow\", \"=>\")) {\n                    return arrow_function(start, exprs.map(e => to_fun_args(e)), !!async);\n                }\n                var ex = async ? new AST_Call({\n                    expression: async,\n                    args: exprs\n                }) : exprs.length == 1 ? exprs[0] : new AST_Sequence({\n                    expressions: exprs\n                });\n                if (ex.start) {\n                    const outer_comments_before = start.comments_before.length;\n                    outer_comments_before_counts.set(start, outer_comments_before);\n                    ex.start.comments_before.unshift(...start.comments_before);\n                    start.comments_before = ex.start.comments_before;\n                    if (outer_comments_before == 0 && start.comments_before.length > 0) {\n                        var comment = start.comments_before[0];\n                        if (!comment.nlb) {\n                            comment.nlb = start.nlb;\n                            start.nlb = false;\n                        }\n                    }\n                    start.comments_after = ex.start.comments_after;\n                }\n                ex.start = start;\n                var end = prev();\n                if (ex.end) {\n                    end.comments_before = ex.end.comments_before;\n                    ex.end.comments_after.push(...end.comments_after);\n                    end.comments_after = ex.end.comments_after;\n                }\n                ex.end = end;\n                if (ex instanceof AST_Call) annotate(ex);\n                return subscripts(ex, allow_calls);\n              case \"[\":\n                return subscripts(array_(), allow_calls);\n              case \"{\":\n                return subscripts(object_or_destructuring_(), allow_calls);\n            }\n            if (!async) unexpected();\n        }\n        if (allow_arrows && is(\"name\") && is_token(peek(), \"arrow\")) {\n            var param = new AST_SymbolFunarg({\n                name: S.token.value,\n                start: start,\n                end: start,\n            });\n            next();\n            return arrow_function(start, [param], !!async);\n        }\n        if (is(\"keyword\", \"function\")) {\n            next();\n            var func = function_(AST_Function, false, !!async);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (async) return subscripts(async, allow_calls);\n        if (is(\"keyword\", \"class\")) {\n            next();\n            var cls = class_(AST_ClassExpression);\n            cls.start = start;\n            cls.end = prev();\n            return subscripts(cls, allow_calls);\n        }\n        if (is(\"template_head\")) {\n            return subscripts(template_string(), allow_calls);\n        }\n        if (is(\"privatename\")) {\n            if(!S.in_class) {\n                croak(\"Private field must be used in an enclosing class\");\n            }\n\n            const start = S.token;\n            const key = new AST_SymbolPrivateProperty({\n                start,\n                name: start.value,\n                end: start\n            });\n            next();\n            expect_token(\"operator\", \"in\");\n\n            const private_in = new AST_PrivateIn({\n                start,\n                key,\n                value: subscripts(as_atom_node(), allow_calls),\n                end: prev()\n            });\n\n            return subscripts(private_in, allow_calls);\n        }\n        if (ATOMIC_START_TOKEN.has(S.token.type)) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function template_string() {\n        var segments = [], start = S.token;\n\n        segments.push(new AST_TemplateSegment({\n            start: S.token,\n            raw: TEMPLATE_RAWS.get(S.token),\n            value: S.token.value,\n            end: S.token\n        }));\n\n        while (!S.token.template_end) {\n            next();\n            handle_regexp();\n            segments.push(expression(true));\n\n            segments.push(new AST_TemplateSegment({\n                start: S.token,\n                raw: TEMPLATE_RAWS.get(S.token),\n                value: S.token.value,\n                end: S.token\n            }));\n        }\n        next();\n\n        return new AST_TemplateString({\n            start: start,\n            segments: segments,\n            end: S.token\n        });\n    }\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is(\"punc\", closing)) {\n            if (first) first = false; else expect(\",\");\n            if (allow_trailing_comma && is(\"punc\", closing)) break;\n            if (is(\"punc\", \",\") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else if (is(\"expand\", \"...\")) {\n                next();\n                a.push(new AST_Expansion({start: prev(), expression: expression(),end: S.token}));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    }\n\n    var array_ = embed_tokens(function() {\n        expect(\"[\");\n        return new AST_Array({\n            elements: expr_list(\"]\", !options.strict, true)\n        });\n    });\n\n    var create_accessor = embed_tokens((is_generator, is_async) => {\n        return function_(AST_Accessor, is_generator, is_async);\n    });\n\n    var object_or_destructuring_ = embed_tokens(function object_or_destructuring_() {\n        var start = S.token, first = true, a = [];\n        expect(\"{\");\n        while (!is(\"punc\", \"}\")) {\n            if (first) first = false; else expect(\",\");\n            if (!options.strict && is(\"punc\", \"}\"))\n                // allow trailing comma\n                break;\n\n            start = S.token;\n            if (start.type == \"expand\") {\n                next();\n                a.push(new AST_Expansion({\n                    start: start,\n                    expression: expression(false),\n                    end: prev(),\n                }));\n                continue;\n            }\n            if(is(\"privatename\")) {\n                croak(\"private fields are not allowed in an object\");\n            }\n            var name = as_property_name();\n            var value;\n\n            // Check property and fetch value\n            if (!is(\"punc\", \":\")) {\n                var concise = concise_method_or_getset(name, start);\n                if (concise) {\n                    a.push(concise);\n                    continue;\n                }\n\n                value = new AST_SymbolRef({\n                    start: prev(),\n                    name: name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected(prev());\n            } else {\n                next(); // `:` - see first condition\n                value = expression(false);\n            }\n\n            // Check for default value and alter value accordingly if necessary\n            if (is(\"operator\", \"=\")) {\n                next();\n                value = new AST_Assign({\n                    start: start,\n                    left: value,\n                    operator: \"=\",\n                    right: expression(false),\n                    logical: false,\n                    end: prev()\n                });\n            }\n\n            // Create property\n            a.push(new AST_ObjectKeyVal({\n                start: start,\n                quote: start.quote,\n                key: name instanceof AST_Node ? name : \"\" + name,\n                value: value,\n                end: prev()\n            }));\n        }\n        next();\n        return new AST_Object({ properties: a });\n    });\n\n    function class_(KindOfClass, is_export_default) {\n        var start, method, class_name, extends_, a = [];\n\n        S.input.push_directives_stack(); // Push directive stack, but not scope stack\n        S.input.add_directive(\"use strict\");\n\n        if (S.token.type == \"name\" && S.token.value != \"extends\") {\n            class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);\n        }\n\n        if (KindOfClass === AST_DefClass && !class_name) {\n            if (is_export_default) {\n                KindOfClass = AST_ClassExpression;\n            } else {\n                unexpected();\n            }\n        }\n\n        if (S.token.value == \"extends\") {\n            next();\n            extends_ = expression(true);\n        }\n\n        expect(\"{\");\n        // mark in class feild,\n        const save_in_class = S.in_class;\n        S.in_class = true;\n        while (is(\"punc\", \";\")) { next(); }  // Leading semicolons are okay in class bodies.\n        while (!is(\"punc\", \"}\")) {\n            start = S.token;\n            method = concise_method_or_getset(as_property_name(), start, true);\n            if (!method) { unexpected(); }\n            a.push(method);\n            while (is(\"punc\", \";\")) { next(); }\n        }\n        // mark in class feild,\n        S.in_class = save_in_class;\n\n        S.input.pop_directives_stack();\n\n        next();\n\n        return new KindOfClass({\n            start: start,\n            name: class_name,\n            extends: extends_,\n            properties: a,\n            end: prev(),\n        });\n    }\n\n    function concise_method_or_getset(name, start, is_class) {\n        const get_symbol_ast = (name, SymbolClass = AST_SymbolMethod) => {\n            if (typeof name === \"string\" || typeof name === \"number\") {\n                return new SymbolClass({\n                    start,\n                    name: \"\" + name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected();\n            }\n            return name;\n        };\n\n        const is_not_method_start = () =>\n            !is(\"punc\", \"(\") && !is(\"punc\", \",\") && !is(\"punc\", \"}\") && !is(\"punc\", \";\") && !is(\"operator\", \"=\");\n\n        var is_async = false;\n        var is_static = false;\n        var is_generator = false;\n        var is_private = false;\n        var accessor_type = null;\n\n        if (is_class && name === \"static\" && is_not_method_start()) {\n            const static_block = class_static_block();\n            if (static_block != null) {\n                return static_block;\n            }\n            is_static = true;\n            name = as_property_name();\n        }\n        if (name === \"async\" && is_not_method_start()) {\n            is_async = true;\n            name = as_property_name();\n        }\n        if (prev().type === \"operator\" && prev().value === \"*\") {\n            is_generator = true;\n            name = as_property_name();\n        }\n        if ((name === \"get\" || name === \"set\") && is_not_method_start()) {\n            accessor_type = name;\n            name = as_property_name();\n        }\n        if (prev().type === \"privatename\") {\n            is_private = true;\n        }\n\n        const property_token = prev();\n\n        if (accessor_type != null) {\n            if (!is_private) {\n                const AccessorClass = accessor_type === \"get\"\n                    ? AST_ObjectGetter\n                    : AST_ObjectSetter;\n\n                name = get_symbol_ast(name);\n                return new AccessorClass({\n                    start,\n                    static: is_static,\n                    key: name,\n                    quote: name instanceof AST_SymbolMethod ? property_token.quote : undefined,\n                    value: create_accessor(),\n                    end: prev()\n                });\n            } else {\n                const AccessorClass = accessor_type === \"get\"\n                    ? AST_PrivateGetter\n                    : AST_PrivateSetter;\n\n                return new AccessorClass({\n                    start,\n                    static: is_static,\n                    key: get_symbol_ast(name),\n                    value: create_accessor(),\n                    end: prev(),\n                });\n            }\n        }\n\n        if (is(\"punc\", \"(\")) {\n            name = get_symbol_ast(name);\n            const AST_MethodVariant = is_private\n                ? AST_PrivateMethod\n                : AST_ConciseMethod;\n            var node = new AST_MethodVariant({\n                start       : start,\n                static      : is_static,\n                is_generator: is_generator,\n                async       : is_async,\n                key         : name,\n                quote       : name instanceof AST_SymbolMethod ?\n                              property_token.quote : undefined,\n                value       : create_accessor(is_generator, is_async),\n                end         : prev()\n            });\n            return node;\n        }\n\n        if (is_class) {\n            const key = get_symbol_ast(name, AST_SymbolClassProperty);\n            const quote = key instanceof AST_SymbolClassProperty\n                ? property_token.quote\n                : undefined;\n            const AST_ClassPropertyVariant = is_private\n                ? AST_ClassPrivateProperty\n                : AST_ClassProperty;\n            if (is(\"operator\", \"=\")) {\n                next();\n                return new AST_ClassPropertyVariant({\n                    start,\n                    static: is_static,\n                    quote,\n                    key,\n                    value: expression(false),\n                    end: prev()\n                });\n            } else if (\n                is(\"name\")\n                || is(\"privatename\")\n                || is(\"operator\", \"*\")\n                || is(\"punc\", \";\")\n                || is(\"punc\", \"}\")\n            ) {\n                return new AST_ClassPropertyVariant({\n                    start,\n                    static: is_static,\n                    quote,\n                    key,\n                    end: prev()\n                });\n            }\n        }\n    }\n\n    function class_static_block() {\n        if (!is(\"punc\", \"{\")) {\n            return null;\n        }\n\n        const start = S.token;\n        const body = [];\n\n        next();\n\n        while (!is(\"punc\", \"}\")) {\n            body.push(statement());\n        }\n\n        next();\n\n        return new AST_ClassStaticBlock({ start, body, end: prev() });\n    }\n\n    function maybe_import_assertion() {\n        if (is(\"name\", \"assert\") && !has_newline_before(S.token)) {\n            next();\n            return object_or_destructuring_();\n        }\n        return null;\n    }\n\n    function import_statement() {\n        var start = prev();\n\n        var imported_name;\n        var imported_names;\n        if (is(\"name\")) {\n            imported_name = as_symbol(AST_SymbolImport);\n        }\n\n        if (is(\"punc\", \",\")) {\n            next();\n        }\n\n        imported_names = map_names(true);\n\n        if (imported_names || imported_name) {\n            expect_token(\"name\", \"from\");\n        }\n        var mod_str = S.token;\n        if (mod_str.type !== \"string\") {\n            unexpected();\n        }\n        next();\n\n        const assert_clause = maybe_import_assertion();\n\n        return new AST_Import({\n            start,\n            imported_name,\n            imported_names,\n            module_name: new AST_String({\n                start: mod_str,\n                value: mod_str.value,\n                quote: mod_str.quote,\n                end: mod_str,\n            }),\n            assert_clause,\n            end: S.token,\n        });\n    }\n\n    function import_meta() {\n        var start = S.token;\n        expect_token(\"name\", \"import\");\n        expect_token(\"punc\", \".\");\n        expect_token(\"name\", \"meta\");\n        return subscripts(new AST_ImportMeta({\n            start: start,\n            end: prev()\n        }), false);\n    }\n\n    function map_name(is_import) {\n        function make_symbol(type, quote) {\n            return new type({\n                name: as_property_name(),\n                quote: quote || undefined,\n                start: prev(),\n                end: prev()\n            });\n        }\n\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var name;\n\n        if (is_import) {\n            foreign_name = make_symbol(foreign_type, start.quote);\n        } else {\n            name = make_symbol(type, start.quote);\n        }\n        if (is(\"name\", \"as\")) {\n            next();  // The \"as\" word\n            if (is_import) {\n                name = make_symbol(type);\n            } else {\n                foreign_name = make_symbol(foreign_type, S.token.quote);\n            }\n        } else if (is_import) {\n            name = new type(foreign_name);\n        } else {\n            foreign_name = new foreign_type(name);\n        }\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: prev(),\n        });\n    }\n\n    function map_nameAsterisk(is_import, import_or_export_foreign_name) {\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var name, foreign_name;\n        var end = prev();\n\n        if (is_import) {\n            name = import_or_export_foreign_name;\n        } else {\n            foreign_name = import_or_export_foreign_name;\n        }\n\n        name = name || new type({\n            start: start,\n            name: \"*\",\n            end: end,\n        });\n\n        foreign_name = foreign_name || new foreign_type({\n            start: start,\n            name: \"*\",\n            end: end,\n        });\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: end,\n        });\n    }\n\n    function map_names(is_import) {\n        var names;\n        if (is(\"punc\", \"{\")) {\n            next();\n            names = [];\n            while (!is(\"punc\", \"}\")) {\n                names.push(map_name(is_import));\n                if (is(\"punc\", \",\")) {\n                    next();\n                }\n            }\n            next();\n        } else if (is(\"operator\", \"*\")) {\n            var name;\n            next();\n            if (is(\"name\", \"as\")) {\n                next();  // The \"as\" word\n                name = is_import ? as_symbol(AST_SymbolImport) : as_symbol_or_string(AST_SymbolExportForeign);\n            }\n            names = [map_nameAsterisk(is_import, name)];\n        }\n        return names;\n    }\n\n    function export_statement() {\n        var start = S.token;\n        var is_default;\n        var exported_names;\n\n        if (is(\"keyword\", \"default\")) {\n            is_default = true;\n            next();\n        } else if (exported_names = map_names(false)) {\n            if (is(\"name\", \"from\")) {\n                next();\n\n                var mod_str = S.token;\n                if (mod_str.type !== \"string\") {\n                    unexpected();\n                }\n                next();\n\n                const assert_clause = maybe_import_assertion();\n\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    module_name: new AST_String({\n                        start: mod_str,\n                        value: mod_str.value,\n                        quote: mod_str.quote,\n                        end: mod_str,\n                    }),\n                    end: prev(),\n                    assert_clause\n                });\n            } else {\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    end: prev(),\n                });\n            }\n        }\n\n        var node;\n        var exported_value;\n        var exported_definition;\n        if (is(\"punc\", \"{\")\n            || is_default\n                && (is(\"keyword\", \"class\") || is(\"keyword\", \"function\"))\n                && is_token(peek(), \"punc\")) {\n            exported_value = expression(false);\n            semicolon();\n        } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {\n            unexpected(node.start);\n        } else if (\n            node instanceof AST_Definitions\n            || node instanceof AST_Defun\n            || node instanceof AST_DefClass\n        ) {\n            exported_definition = node;\n        } else if (\n            node instanceof AST_ClassExpression\n            || node instanceof AST_Function\n        ) {\n            exported_value = node;\n        } else if (node instanceof AST_SimpleStatement) {\n            exported_value = node.body;\n        } else {\n            unexpected(node.start);\n        }\n\n        return new AST_Export({\n            start: start,\n            is_default: is_default,\n            exported_value: exported_value,\n            exported_definition: exported_definition,\n            end: prev(),\n            assert_clause: null\n        });\n    }\n\n    function as_property_name() {\n        var tmp = S.token;\n        switch (tmp.type) {\n          case \"punc\":\n            if (tmp.value === \"[\") {\n                next();\n                var ex = expression(false);\n                expect(\"]\");\n                return ex;\n            } else unexpected(tmp);\n          case \"operator\":\n            if (tmp.value === \"*\") {\n                next();\n                return null;\n            }\n            if (![\"delete\", \"in\", \"instanceof\", \"new\", \"typeof\", \"void\"].includes(tmp.value)) {\n                unexpected(tmp);\n            }\n            /* falls through */\n          case \"name\":\n          case \"privatename\":\n          case \"string\":\n          case \"num\":\n          case \"big_int\":\n          case \"keyword\":\n          case \"atom\":\n            next();\n            return tmp.value;\n          default:\n            unexpected(tmp);\n        }\n    }\n\n    function as_name() {\n        var tmp = S.token;\n        if (tmp.type != \"name\" && tmp.type != \"privatename\") unexpected();\n        next();\n        return tmp.value;\n    }\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == \"this\" ? AST_This :\n                    name == \"super\" ? AST_Super :\n                    type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    }\n\n    function _verify_symbol(sym) {\n        var name = sym.name;\n        if (is_in_generator() && name == \"yield\") {\n            token_error(sym.start, \"Yield cannot be used as identifier inside generators\");\n        }\n        if (S.input.has_directive(\"use strict\")) {\n            if (name == \"yield\") {\n                token_error(sym.start, \"Unexpected yield identifier inside strict mode\");\n            }\n            if (sym instanceof AST_SymbolDeclaration && (name == \"arguments\" || name == \"eval\")) {\n                token_error(sym.start, \"Unexpected \" + name + \" in strict mode\");\n            }\n        }\n    }\n\n    function as_symbol(type, noerror) {\n        if (!is(\"name\")) {\n            if (!noerror) croak(\"Name expected\");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        _verify_symbol(sym);\n        next();\n        return sym;\n    }\n\n    function as_symbol_or_string(type) {\n        if (!is(\"name\")) {\n            if (!is(\"string\")) {\n                croak(\"Name or string expected\");\n            }\n            var tok = S.token;\n            var ret = new type({\n                start : tok,\n                end   : tok,\n                name : tok.value,\n                quote : tok.quote\n            });\n            next();\n            return ret;\n        }\n        var sym = _make_symbol(type);\n        _verify_symbol(sym);\n        next();\n        return sym;\n    }\n\n    // Annotate AST_Call, AST_Lambda or AST_New with the special comments\n    function annotate(node) {\n        var start = node.start;\n        var comments = start.comments_before;\n        const comments_outside_parens = outer_comments_before_counts.get(start);\n        var i = comments_outside_parens != null ? comments_outside_parens : comments.length;\n        while (--i >= 0) {\n            var comment = comments[i];\n            if (/[@#]__/.test(comment.value)) {\n                if (/[@#]__PURE__/.test(comment.value)) {\n                    set_annotation(node, _PURE);\n                    break;\n                }\n                if (/[@#]__INLINE__/.test(comment.value)) {\n                    set_annotation(node, _INLINE);\n                    break;\n                }\n                if (/[@#]__NOINLINE__/.test(comment.value)) {\n                    set_annotation(node, _NOINLINE);\n                    break;\n                }\n            }\n        }\n    }\n\n    var subscripts = function(expr, allow_calls, is_chain) {\n        var start = expr.start;\n        if (is(\"punc\", \".\")) {\n            next();\n            if(is(\"privatename\") && !S.in_class) \n                croak(\"Private field must be used in an enclosing class\");\n            const AST_DotVariant = is(\"privatename\") ? AST_DotHash : AST_Dot;\n            return subscripts(new AST_DotVariant({\n                start      : start,\n                expression : expr,\n                optional   : false,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls, is_chain);\n        }\n        if (is(\"punc\", \"[\")) {\n            next();\n            var prop = expression(true);\n            expect(\"]\");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                optional   : false,\n                property   : prop,\n                end        : prev()\n            }), allow_calls, is_chain);\n        }\n        if (allow_calls && is(\"punc\", \"(\")) {\n            next();\n            var call = new AST_Call({\n                start      : start,\n                expression : expr,\n                optional   : false,\n                args       : call_args(),\n                end        : prev()\n            });\n            annotate(call);\n            return subscripts(call, true, is_chain);\n        }\n\n        if (is(\"punc\", \"?.\")) {\n            next();\n\n            let chain_contents;\n\n            if (allow_calls && is(\"punc\", \"(\")) {\n                next();\n\n                const call = new AST_Call({\n                    start,\n                    optional: true,\n                    expression: expr,\n                    args: call_args(),\n                    end: prev()\n                });\n                annotate(call);\n\n                chain_contents = subscripts(call, true, true);\n            } else if (is(\"name\") || is(\"privatename\")) {\n                if(is(\"privatename\") && !S.in_class) \n                    croak(\"Private field must be used in an enclosing class\");\n                const AST_DotVariant = is(\"privatename\") ? AST_DotHash : AST_Dot;\n                chain_contents = subscripts(new AST_DotVariant({\n                    start,\n                    expression: expr,\n                    optional: true,\n                    property: as_name(),\n                    end: prev()\n                }), allow_calls, true);\n            } else if (is(\"punc\", \"[\")) {\n                next();\n                const property = expression(true);\n                expect(\"]\");\n                chain_contents = subscripts(new AST_Sub({\n                    start,\n                    expression: expr,\n                    optional: true,\n                    property,\n                    end: prev()\n                }), allow_calls, true);\n            }\n\n            if (!chain_contents) unexpected();\n\n            if (chain_contents instanceof AST_Chain) return chain_contents;\n\n            return new AST_Chain({\n                start,\n                expression: chain_contents,\n                end: prev()\n            });\n        }\n\n        if (is(\"template_head\")) {\n            if (is_chain) {\n                // a?.b`c` is a syntax error\n                unexpected();\n            }\n\n            return subscripts(new AST_PrefixedTemplateString({\n                start: start,\n                prefix: expr,\n                template_string: template_string(),\n                end: prev()\n            }), allow_calls);\n        }\n        return expr;\n    };\n\n    function call_args() {\n        var args = [];\n        while (!is(\"punc\", \")\")) {\n            if (is(\"expand\", \"...\")) {\n                next();\n                args.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(false),\n                    end: prev()\n                }));\n            } else {\n                args.push(expression(false));\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n            }\n        }\n        next();\n        return args;\n    }\n\n    var maybe_unary = function(allow_calls, allow_arrows) {\n        var start = S.token;\n        if (start.type == \"name\" && start.value == \"await\" && can_await()) {\n            next();\n            return _await_expression();\n        }\n        if (is(\"operator\") && UNARY_PREFIX.has(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls, allow_arrows);\n        while (is(\"operator\") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {\n            if (val instanceof AST_Arrow) unexpected();\n            val = make_unary(AST_UnaryPostfix, S.token, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, token, expr) {\n        var op = token.value;\n        switch (op) {\n          case \"++\":\n          case \"--\":\n            if (!is_assignable(expr))\n                croak(\"Invalid use of \" + op + \" operator\", token.line, token.col, token.pos);\n            break;\n          case \"delete\":\n            if (expr instanceof AST_SymbolRef && S.input.has_directive(\"use strict\"))\n                croak(\"Calling delete on expression not allowed in strict mode\", expr.start.line, expr.start.col, expr.start.pos);\n            break;\n        }\n        return new ctor({ operator: op, expression: expr });\n    }\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is(\"operator\") ? S.token.value : null;\n        if (op == \"in\" && no_in) op = null;\n        if (op == \"**\" && left instanceof AST_UnaryPrefix\n            /* unary token in front not allowed - parenthesis required */\n            && !is_token(left.start, \"punc\", \"(\")\n            && left.operator !== \"--\" && left.operator !== \"++\")\n                unexpected(left.start);\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && (prec > min_prec || (op === \"**\" && min_prec === prec))) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true, true), 0, no_in);\n    }\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is(\"operator\", \"?\")) {\n            next();\n            var yes = expression(false);\n            expect(\":\");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n    }\n\n    function to_destructuring(node) {\n        if (node instanceof AST_Object) {\n            node = new AST_Destructuring({\n                start: node.start,\n                names: node.properties.map(to_destructuring),\n                is_array: false,\n                end: node.end\n            });\n        } else if (node instanceof AST_Array) {\n            var names = [];\n\n            for (var i = 0; i < node.elements.length; i++) {\n                // Only allow expansion as last element\n                if (node.elements[i] instanceof AST_Expansion) {\n                    if (i + 1 !== node.elements.length) {\n                        token_error(node.elements[i].start, \"Spread must the be last element in destructuring array\");\n                    }\n                    node.elements[i].expression = to_destructuring(node.elements[i].expression);\n                }\n\n                names.push(to_destructuring(node.elements[i]));\n            }\n\n            node = new AST_Destructuring({\n                start: node.start,\n                names: names,\n                is_array: true,\n                end: node.end\n            });\n        } else if (node instanceof AST_ObjectProperty) {\n            node.value = to_destructuring(node.value);\n        } else if (node instanceof AST_Assign) {\n            node = new AST_DefaultAssign({\n                start: node.start,\n                left: node.left,\n                operator: \"=\",\n                right: node.right,\n                end: node.end\n            });\n        }\n        return node;\n    }\n\n    // In ES6, AssignmentExpression can also be an ArrowFunction\n    var maybe_assign = function(no_in) {\n        handle_regexp();\n        var start = S.token;\n\n        if (start.type == \"name\" && start.value == \"yield\") {\n            if (is_in_generator()) {\n                next();\n                return _yield_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected yield identifier inside strict mode\");\n            }\n        }\n\n        var left = maybe_conditional(no_in);\n        var val = S.token.value;\n\n        if (is(\"operator\") && ASSIGNMENT.has(val)) {\n            if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {\n                next();\n\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    logical  : LOGICAL_ASSIGNMENT.has(val),\n                    end      : prev()\n                });\n            }\n            croak(\"Invalid assignment\");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var exprs = [];\n        while (true) {\n            exprs.push(maybe_assign(no_in));\n            if (!commas || !is(\"punc\", \",\")) break;\n            next();\n            commas = true;\n        }\n        return exprs.length == 1 ? exprs[0] : new AST_Sequence({\n            start       : start,\n            expressions : exprs,\n            end         : peek()\n        });\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    }\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function parse_toplevel() {\n        var start = S.token;\n        var body = [];\n        S.input.push_directives_stack();\n        if (options.module) S.input.add_directive(\"use strict\");\n        while (!is(\"eof\")) {\n            body.push(statement());\n        }\n        S.input.pop_directives_stack();\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        TEMPLATE_RAWS = new Map();\n        return toplevel;\n    })();\n\n}\n\nexport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_basic_identifier_string,\n    is_identifier_string,\n    is_surrogate_pair_head,\n    is_surrogate_pair_tail,\n    js_error,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n    ALL_RESERVED_WORDS,\n    tokenizer,\n};\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    HOP,\n    MAP,\n    noop\n} from \"./utils/index.js\";\nimport { parse } from \"./parse.js\";\n\nfunction DEFNODE(type, props, ctor, methods, base = AST_Node) {\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    const proto = base && Object.create(base.prototype);\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.prototype.constructor = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (let i in methods) if (HOP(methods, i)) {\n        if (i[0] === \"$\") {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    return ctor;\n}\n\nconst has_tok_flag = (tok, flag) => Boolean(tok.flags & flag);\nconst set_tok_flag = (tok, flag, truth) => {\n    if (truth) {\n        tok.flags |= flag;\n    } else {\n        tok.flags &= ~flag;\n    }\n};\n\nconst TOK_FLAG_NLB          = 0b0001;\nconst TOK_FLAG_QUOTE_SINGLE = 0b0010;\nconst TOK_FLAG_QUOTE_EXISTS = 0b0100;\nconst TOK_FLAG_TEMPLATE_END = 0b1000;\n\nclass AST_Token {\n    constructor(type, value, line, col, pos, nlb, comments_before, comments_after, file) {\n        this.flags = (nlb ? 1 : 0);\n\n        this.type = type;\n        this.value = value;\n        this.line = line;\n        this.col = col;\n        this.pos = pos;\n        this.comments_before = comments_before;\n        this.comments_after = comments_after;\n        this.file = file;\n\n        Object.seal(this);\n    }\n\n    // Return a string summary of the token for node.js console.log\n    [Symbol.for(\"nodejs.util.inspect.custom\")](_depth, options) {\n        const special = str => options.stylize(str, \"special\");\n        const quote = typeof this.value === \"string\" && this.value.includes(\"`\") ? \"'\" : \"`\";\n        const value = `${quote}${this.value}${quote}`;\n        return `${special(\"[AST_Token\")} ${value} at ${this.line}:${this.col}${special(\"]\")}`;\n    }\n\n    get nlb() {\n        return has_tok_flag(this, TOK_FLAG_NLB);\n    }\n\n    set nlb(new_nlb) {\n        set_tok_flag(this, TOK_FLAG_NLB, new_nlb);\n    }\n\n    get quote() {\n        return !has_tok_flag(this, TOK_FLAG_QUOTE_EXISTS)\n            ? \"\"\n            : (has_tok_flag(this, TOK_FLAG_QUOTE_SINGLE) ? \"'\" : '\"');\n    }\n\n    set quote(quote_type) {\n        set_tok_flag(this, TOK_FLAG_QUOTE_SINGLE, quote_type === \"'\");\n        set_tok_flag(this, TOK_FLAG_QUOTE_EXISTS, !!quote_type);\n    }\n\n    get template_end() {\n        return has_tok_flag(this, TOK_FLAG_TEMPLATE_END);\n    }\n\n    set template_end(new_template_end) {\n        set_tok_flag(this, TOK_FLAG_TEMPLATE_END, new_template_end);\n    }\n}\n\nvar AST_Node = DEFNODE(\"Node\", \"start end\", function AST_Node(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    _clone: function(deep) {\n        if (deep) {\n            var self = this.clone();\n            return self.transform(new TreeTransformer(function(node) {\n                if (node !== self) {\n                    return node.clone(true);\n                }\n            }));\n        }\n        return new this.CTOR(this);\n    },\n    clone: function(deep) {\n        return this._clone(deep);\n    },\n    $documentation: \"Base class of all AST nodes\",\n    $propdoc: {\n        start: \"[AST_Token] The first token of this node\",\n        end: \"[AST_Token] The last token of this node\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    },\n    _children_backwards: () => {}\n}, null);\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE(\"Statement\", null, function AST_Statement(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class of all statements\",\n});\n\nvar AST_Debugger = DEFNODE(\"Debugger\", null, function AST_Debugger(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Represents a debugger statement\",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE(\"Directive\", \"value quote\", function AST_Directive(props) {\n    if (props) {\n        this.value = props.value;\n        this.quote = props.quote;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Represents a directive, like \\\"use strict\\\";\",\n    $propdoc: {\n        value: \"[string] The value of this directive as a plain string (it's not an AST_String!)\",\n        quote: \"[string] the original quote character\"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE(\"SimpleStatement\", \"body\", function AST_SimpleStatement(props) {\n    if (props) {\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A statement consisting of an expression, i.e. a = 1 + 2\",\n    $propdoc: {\n        body: \"[AST_Node] an expression node (should not be instanceof AST_Statement)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    const body = node.body;\n    if (visitor.walk_defun_first) {\n        for (var i = 0, len = body.length; i < len; i++) {\n            if (body[i] instanceof AST_Defun) {\n                body[i]._walk(visitor);\n            }\n        }\n        for (var i = 0, len = body.length; i < len; i++) {\n            if (!(body[i] instanceof AST_Defun)) {\n                body[i]._walk(visitor);\n            }\n        }\n    } else {\n        for (var i = 0, len = body.length; i < len; i++) {\n            body[i]._walk(visitor);\n        }\n    }\n}\n\nfunction clone_block_scope(deep) {\n    var clone = this._clone(deep);\n    if (this.block_scope) {\n        clone.block_scope = this.block_scope.clone();\n    }\n    return clone;\n}\n\nvar AST_Block = DEFNODE(\"Block\", \"body block_scope\", function AST_Block(props) {\n    if (props) {\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A body of statements (usually braced)\",\n    $propdoc: {\n        body: \"[AST_Statement*] an array of statements\",\n        block_scope: \"[AST_Scope] the block scope\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n    },\n    clone: clone_block_scope\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE(\"BlockStatement\", null, function AST_BlockStatement(props) {\n    if (props) {\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A block statement\",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE(\"EmptyStatement\", null, function AST_EmptyStatement(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The empty statement (empty block or simply a semicolon)\"\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE(\"StatementWithBody\", \"body\", function AST_StatementWithBody(props) {\n    if (props) {\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",\n    $propdoc: {\n        body: \"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE(\"LabeledStatement\", \"label\", function AST_LabeledStatement(props) {\n    if (props) {\n        this.label = props.label;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Statement with a label\",\n    $propdoc: {\n        label: \"[AST_Label] a label definition\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        push(this.label);\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (deep) {\n            var label = node.label;\n            var def = this.label;\n            node.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_LoopControl\n                    && node.label && node.label.thedef === def) {\n                    node.label.thedef = label;\n                    label.references.push(node);\n                }\n            }));\n        }\n        return node;\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE(\n    \"IterationStatement\",\n    \"block_scope\",\n    function AST_IterationStatement(props) {\n        if (props) {\n            this.block_scope = props.block_scope;\n            this.body = props.body;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"Internal class.  All loops inherit from it.\",\n        $propdoc: {\n            block_scope: \"[AST_Scope] the block scope for this iteration statement.\"\n        },\n        clone: clone_block_scope\n    },\n    AST_StatementWithBody\n);\n\nvar AST_DWLoop = DEFNODE(\"DWLoop\", \"condition\", function AST_DWLoop(props) {\n    if (props) {\n        this.condition = props.condition;\n        this.block_scope = props.block_scope;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for do/while statements\",\n    $propdoc: {\n        condition: \"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE(\"Do\", null, function AST_Do(props) {\n    if (props) {\n        this.condition = props.condition;\n        this.block_scope = props.block_scope;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `do` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.condition);\n        push(this.body);\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE(\"While\", null, function AST_While(props) {\n    if (props) {\n        this.condition = props.condition;\n        this.block_scope = props.block_scope;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `while` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        push(this.condition);\n    },\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE(\"For\", \"init condition step\", function AST_For(props) {\n    if (props) {\n        this.init = props.init;\n        this.condition = props.condition;\n        this.step = props.step;\n        this.block_scope = props.block_scope;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `for` statement\",\n    $propdoc: {\n        init: \"[AST_Node?] the `for` initialization code, or null if empty\",\n        condition: \"[AST_Node?] the `for` termination clause, or null if empty\",\n        step: \"[AST_Node?] the `for` update clause, or null if empty\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        if (this.step) push(this.step);\n        if (this.condition) push(this.condition);\n        if (this.init) push(this.init);\n    },\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE(\"ForIn\", \"init object\", function AST_ForIn(props) {\n    if (props) {\n        this.init = props.init;\n        this.object = props.object;\n        this.block_scope = props.block_scope;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `for ... in` statement\",\n    $propdoc: {\n        init: \"[AST_Node] the `for/in` initialization code\",\n        object: \"[AST_Node] the object that we're looping through\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        if (this.object) push(this.object);\n        if (this.init) push(this.init);\n    },\n}, AST_IterationStatement);\n\nvar AST_ForOf = DEFNODE(\"ForOf\", \"await\", function AST_ForOf(props) {\n    if (props) {\n        this.await = props.await;\n        this.init = props.init;\n        this.object = props.object;\n        this.block_scope = props.block_scope;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `for ... of` statement\",\n}, AST_ForIn);\n\nvar AST_With = DEFNODE(\"With\", \"expression\", function AST_With(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `with` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `with` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.body);\n        push(this.expression);\n    },\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE(\n    \"Scope\",\n    \"variables uses_with uses_eval parent_scope enclosed cname\",\n    function AST_Scope(props) {\n        if (props) {\n            this.variables = props.variables;\n            this.uses_with = props.uses_with;\n            this.uses_eval = props.uses_eval;\n            this.parent_scope = props.parent_scope;\n            this.enclosed = props.enclosed;\n            this.cname = props.cname;\n            this.body = props.body;\n            this.block_scope = props.block_scope;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"Base class for all statements introducing a lexical scope\",\n        $propdoc: {\n            variables: \"[Map/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",\n            uses_with: \"[boolean/S] tells whether this scope uses the `with` statement\",\n            uses_eval: \"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",\n            parent_scope: \"[AST_Scope?/S] link to the parent scope\",\n            enclosed: \"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",\n            cname: \"[integer/S] current index for mangling variables (used internally by the mangler)\",\n        },\n        get_defun_scope: function() {\n            var self = this;\n            while (self.is_block_scope()) {\n                self = self.parent_scope;\n            }\n            return self;\n        },\n        clone: function(deep, toplevel) {\n            var node = this._clone(deep);\n            if (deep && this.variables && toplevel && !this._block_scope) {\n                node.figure_out_scope({}, {\n                    toplevel: toplevel,\n                    parent_scope: this.parent_scope\n                });\n            } else {\n                if (this.variables) node.variables = new Map(this.variables);\n                if (this.enclosed) node.enclosed = this.enclosed.slice();\n                if (this._block_scope) node._block_scope = this._block_scope;\n            }\n            return node;\n        },\n        pinned: function() {\n            return this.uses_eval || this.uses_with;\n        }\n    },\n    AST_Block\n);\n\nvar AST_Toplevel = DEFNODE(\"Toplevel\", \"globals\", function AST_Toplevel(props) {\n    if (props) {\n        this.globals = props.globals;\n        this.variables = props.variables;\n        this.uses_with = props.uses_with;\n        this.uses_eval = props.uses_eval;\n        this.parent_scope = props.parent_scope;\n        this.enclosed = props.enclosed;\n        this.cname = props.cname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The toplevel scope\",\n    $propdoc: {\n        globals: \"[Map/S] a map of name -> SymbolDef for all undeclared names\",\n    },\n    wrap_commonjs: function(name) {\n        var body = this.body;\n        var wrapped_tl = \"(function(exports){'$ORIG';})(typeof \" + name + \"=='undefined'?(\" + name + \"={}):\" + name + \");\";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n        return wrapped_tl;\n    },\n    wrap_enclose: function(args_values) {\n        if (typeof args_values != \"string\") args_values = \"\";\n        var index = args_values.indexOf(\":\");\n        if (index < 0) index = args_values.length;\n        var body = this.body;\n        return parse([\n            \"(function(\",\n            args_values.slice(0, index),\n            '){\"$ORIG\"})(',\n            args_values.slice(index + 1),\n            \")\"\n        ].join(\"\")).transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n    }\n}, AST_Scope);\n\nvar AST_Expansion = DEFNODE(\"Expansion\", \"expression\", function AST_Expansion(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list\",\n    $propdoc: {\n        expression: \"[AST_Node] the thing to be expanded\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression.walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n});\n\nvar AST_Lambda = DEFNODE(\n    \"Lambda\",\n    \"name argnames uses_arguments is_generator async\",\n    function AST_Lambda(props) {\n        if (props) {\n            this.name = props.name;\n            this.argnames = props.argnames;\n            this.uses_arguments = props.uses_arguments;\n            this.is_generator = props.is_generator;\n            this.async = props.async;\n            this.variables = props.variables;\n            this.uses_with = props.uses_with;\n            this.uses_eval = props.uses_eval;\n            this.parent_scope = props.parent_scope;\n            this.enclosed = props.enclosed;\n            this.cname = props.cname;\n            this.body = props.body;\n            this.block_scope = props.block_scope;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"Base class for functions\",\n        $propdoc: {\n            name: \"[AST_SymbolDeclaration?] the name of this function\",\n            argnames: \"[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments\",\n            uses_arguments: \"[boolean/S] tells whether this function accesses the arguments array\",\n            is_generator: \"[boolean] is this a generator method\",\n            async: \"[boolean] is this method async\",\n        },\n        args_as_names: function () {\n            var out = [];\n            for (var i = 0; i < this.argnames.length; i++) {\n                if (this.argnames[i] instanceof AST_Destructuring) {\n                    out.push(...this.argnames[i].all_symbols());\n                } else {\n                    out.push(this.argnames[i]);\n                }\n            }\n            return out;\n        },\n        _walk: function(visitor) {\n            return visitor._visit(this, function() {\n                if (this.name) this.name._walk(visitor);\n                var argnames = this.argnames;\n                for (var i = 0, len = argnames.length; i < len; i++) {\n                    argnames[i]._walk(visitor);\n                }\n                walk_body(this, visitor);\n            });\n        },\n        _children_backwards(push) {\n            let i = this.body.length;\n            while (i--) push(this.body[i]);\n\n            i = this.argnames.length;\n            while (i--) push(this.argnames[i]);\n\n            if (this.name) push(this.name);\n        },\n        is_braceless() {\n            return this.body[0] instanceof AST_Return && this.body[0].value;\n        },\n        // Default args and expansion don't count, so .argnames.length doesn't cut it\n        length_property() {\n            let length = 0;\n\n            for (const arg of this.argnames) {\n                if (arg instanceof AST_SymbolFunarg || arg instanceof AST_Destructuring) {\n                    length++;\n                }\n            }\n\n            return length;\n        }\n    },\n    AST_Scope\n);\n\nvar AST_Accessor = DEFNODE(\"Accessor\", null, function AST_Accessor(props) {\n    if (props) {\n        this.name = props.name;\n        this.argnames = props.argnames;\n        this.uses_arguments = props.uses_arguments;\n        this.is_generator = props.is_generator;\n        this.async = props.async;\n        this.variables = props.variables;\n        this.uses_with = props.uses_with;\n        this.uses_eval = props.uses_eval;\n        this.parent_scope = props.parent_scope;\n        this.enclosed = props.enclosed;\n        this.cname = props.cname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A setter/getter function.  The `name` property is always null.\"\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE(\"Function\", null, function AST_Function(props) {\n    if (props) {\n        this.name = props.name;\n        this.argnames = props.argnames;\n        this.uses_arguments = props.uses_arguments;\n        this.is_generator = props.is_generator;\n        this.async = props.async;\n        this.variables = props.variables;\n        this.uses_with = props.uses_with;\n        this.uses_eval = props.uses_eval;\n        this.parent_scope = props.parent_scope;\n        this.enclosed = props.enclosed;\n        this.cname = props.cname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A function expression\"\n}, AST_Lambda);\n\nvar AST_Arrow = DEFNODE(\"Arrow\", null, function AST_Arrow(props) {\n    if (props) {\n        this.name = props.name;\n        this.argnames = props.argnames;\n        this.uses_arguments = props.uses_arguments;\n        this.is_generator = props.is_generator;\n        this.async = props.async;\n        this.variables = props.variables;\n        this.uses_with = props.uses_with;\n        this.uses_eval = props.uses_eval;\n        this.parent_scope = props.parent_scope;\n        this.enclosed = props.enclosed;\n        this.cname = props.cname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"An ES6 Arrow function ((a) => b)\"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE(\"Defun\", null, function AST_Defun(props) {\n    if (props) {\n        this.name = props.name;\n        this.argnames = props.argnames;\n        this.uses_arguments = props.uses_arguments;\n        this.is_generator = props.is_generator;\n        this.async = props.async;\n        this.variables = props.variables;\n        this.uses_with = props.uses_with;\n        this.uses_eval = props.uses_eval;\n        this.parent_scope = props.parent_scope;\n        this.enclosed = props.enclosed;\n        this.cname = props.cname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A function definition\"\n}, AST_Lambda);\n\n/* -----[ DESTRUCTURING ]----- */\nvar AST_Destructuring = DEFNODE(\"Destructuring\", \"names is_array\", function AST_Destructuring(props) {\n    if (props) {\n        this.names = props.names;\n        this.is_array = props.is_array;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A destructuring of several names. Used in destructuring assignment and with destructuring function argument names\",\n    $propdoc: {\n        \"names\": \"[AST_Node*] Array of properties or elements\",\n        \"is_array\": \"[Boolean] Whether the destructuring represents an object or array\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.names.forEach(function(name) {\n                name._walk(visitor);\n            });\n        });\n    },\n    _children_backwards(push) {\n        let i = this.names.length;\n        while (i--) push(this.names[i]);\n    },\n    all_symbols: function() {\n        var out = [];\n        this.walk(new TreeWalker(function (node) {\n            if (node instanceof AST_Symbol) {\n                out.push(node);\n            }\n        }));\n        return out;\n    }\n});\n\nvar AST_PrefixedTemplateString = DEFNODE(\n    \"PrefixedTemplateString\",\n    \"template_string prefix\",\n    function AST_PrefixedTemplateString(props) {\n        if (props) {\n            this.template_string = props.template_string;\n            this.prefix = props.prefix;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"A templatestring with a prefix, such as String.raw`foobarbaz`\",\n        $propdoc: {\n            template_string: \"[AST_TemplateString] The template string\",\n            prefix: \"[AST_Node] The prefix, which will get called.\"\n        },\n        _walk: function(visitor) {\n            return visitor._visit(this, function () {\n                this.prefix._walk(visitor);\n                this.template_string._walk(visitor);\n            });\n        },\n        _children_backwards(push) {\n            push(this.template_string);\n            push(this.prefix);\n        },\n    }\n);\n\nvar AST_TemplateString = DEFNODE(\"TemplateString\", \"segments\", function AST_TemplateString(props) {\n    if (props) {\n        this.segments = props.segments;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A template string literal\",\n    $propdoc: {\n        segments: \"[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.segments.forEach(function(seg) {\n                seg._walk(visitor);\n            });\n        });\n    },\n    _children_backwards(push) {\n        let i = this.segments.length;\n        while (i--) push(this.segments[i]);\n    }\n});\n\nvar AST_TemplateSegment = DEFNODE(\"TemplateSegment\", \"value raw\", function AST_TemplateSegment(props) {\n    if (props) {\n        this.value = props.value;\n        this.raw = props.raw;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A segment of a template string literal\",\n    $propdoc: {\n        value: \"Content of the segment\",\n        raw: \"Raw source of the segment\",\n    }\n});\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE(\"Jump\", null, function AST_Jump(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"\n}, AST_Statement);\n\n/** Base class for “exits” (`return` and `throw`) */\nvar AST_Exit = DEFNODE(\"Exit\", \"value\", function AST_Exit(props) {\n    if (props) {\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for “exits” (`return` and `throw`)\",\n    $propdoc: {\n        value: \"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function() {\n            this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.value) push(this.value);\n    },\n}, AST_Jump);\n\nvar AST_Return = DEFNODE(\"Return\", null, function AST_Return(props) {\n    if (props) {\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `return` statement\"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE(\"Throw\", null, function AST_Throw(props) {\n    if (props) {\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `throw` statement\"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE(\"LoopControl\", \"label\", function AST_LoopControl(props) {\n    if (props) {\n        this.label = props.label;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for loop control statements (`break` and `continue`)\",\n    $propdoc: {\n        label: \"[AST_LabelRef?] the label, or null if none\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function() {\n            this.label._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.label) push(this.label);\n    },\n}, AST_Jump);\n\nvar AST_Break = DEFNODE(\"Break\", null, function AST_Break(props) {\n    if (props) {\n        this.label = props.label;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `break` statement\"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE(\"Continue\", null, function AST_Continue(props) {\n    if (props) {\n        this.label = props.label;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `continue` statement\"\n}, AST_LoopControl);\n\nvar AST_Await = DEFNODE(\"Await\", \"expression\", function AST_Await(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"An `await` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the mandatory expression being awaited\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n});\n\nvar AST_Yield = DEFNODE(\"Yield\", \"expression is_star\", function AST_Yield(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.is_star = props.is_star;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `yield` statement\",\n    $propdoc: {\n        expression: \"[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false\",\n        is_star: \"[Boolean] Whether this is a yield or yield* statement\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.expression && function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.expression) push(this.expression);\n    }\n});\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE(\"If\", \"condition alternative\", function AST_If(props) {\n    if (props) {\n        this.condition = props.condition;\n        this.alternative = props.alternative;\n        this.body = props.body;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `if` statement\",\n    $propdoc: {\n        condition: \"[AST_Node] the `if` condition\",\n        alternative: \"[AST_Statement?] the `else` part, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.alternative) {\n            push(this.alternative);\n        }\n        push(this.body);\n        push(this.condition);\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE(\"Switch\", \"expression\", function AST_Switch(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `switch` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `switch` “discriminant”\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n        push(this.expression);\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE(\"SwitchBranch\", null, function AST_SwitchBranch(props) {\n    if (props) {\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for `switch` branches\",\n}, AST_Block);\n\nvar AST_Default = DEFNODE(\"Default\", null, function AST_Default(props) {\n    if (props) {\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `default` switch branch\",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE(\"Case\", \"expression\", function AST_Case(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `case` switch branch\",\n    $propdoc: {\n        expression: \"[AST_Node] the `case` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n        push(this.expression);\n    },\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE(\"Try\", \"body bcatch bfinally\", function AST_Try(props) {\n    if (props) {\n        this.body = props.body;\n        this.bcatch = props.bcatch;\n        this.bfinally = props.bfinally;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `try` statement\",\n    $propdoc: {\n        body: \"[AST_TryBlock] the try block\",\n        bcatch: \"[AST_Catch?] the catch block, or null if not present\",\n        bfinally: \"[AST_Finally?] the finally block, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.bfinally) push(this.bfinally);\n        if (this.bcatch) push(this.bcatch);\n        push(this.body);\n    },\n}, AST_Statement);\n\nvar AST_TryBlock = DEFNODE(\"TryBlock\", null, function AST_TryBlock(props) {\n    if (props) {\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The `try` block of a try statement\"\n}, AST_Block);\n\nvar AST_Catch = DEFNODE(\"Catch\", \"argname\", function AST_Catch(props) {\n    if (props) {\n        this.argname = props.argname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `catch` node; only makes sense as part of a `try` statement\",\n    $propdoc: {\n        argname: \"[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.argname) this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n        if (this.argname) push(this.argname);\n    },\n}, AST_Block);\n\nvar AST_Finally = DEFNODE(\"Finally\", null, function AST_Finally(props) {\n    if (props) {\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `finally` node; only makes sense as part of a `try` statement\"\n}, AST_Block);\n\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE(\"Definitions\", \"definitions\", function AST_Definitions(props) {\n    if (props) {\n        this.definitions = props.definitions;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for `var` or `const` nodes (variable declarations/initializations)\",\n    $propdoc: {\n        definitions: \"[AST_VarDef*] array of variable definitions\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var definitions = this.definitions;\n            for (var i = 0, len = definitions.length; i < len; i++) {\n                definitions[i]._walk(visitor);\n            }\n        });\n    },\n    _children_backwards(push) {\n        let i = this.definitions.length;\n        while (i--) push(this.definitions[i]);\n    },\n}, AST_Statement);\n\nvar AST_Var = DEFNODE(\"Var\", null, function AST_Var(props) {\n    if (props) {\n        this.definitions = props.definitions;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `var` statement\"\n}, AST_Definitions);\n\nvar AST_Let = DEFNODE(\"Let\", null, function AST_Let(props) {\n    if (props) {\n        this.definitions = props.definitions;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `let` statement\"\n}, AST_Definitions);\n\nvar AST_Const = DEFNODE(\"Const\", null, function AST_Const(props) {\n    if (props) {\n        this.definitions = props.definitions;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A `const` statement\"\n}, AST_Definitions);\n\nvar AST_VarDef = DEFNODE(\"VarDef\", \"name value\", function AST_VarDef(props) {\n    if (props) {\n        this.name = props.name;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A variable declaration; only appears in a AST_Definitions node\",\n    $propdoc: {\n        name: \"[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable\",\n        value: \"[AST_Node?] initializer, or null of there's no initializer\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.value) push(this.value);\n        push(this.name);\n    },\n});\n\nvar AST_NameMapping = DEFNODE(\"NameMapping\", \"foreign_name name\", function AST_NameMapping(props) {\n    if (props) {\n        this.foreign_name = props.foreign_name;\n        this.name = props.name;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The part of the export/import statement that declare names from a module.\",\n    $propdoc: {\n        foreign_name: \"[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)\",\n        name: \"[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module.\"\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function() {\n            this.foreign_name._walk(visitor);\n            this.name._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.name);\n        push(this.foreign_name);\n    },\n});\n\nvar AST_Import = DEFNODE(\n    \"Import\",\n    \"imported_name imported_names module_name assert_clause\",\n    function AST_Import(props) {\n        if (props) {\n            this.imported_name = props.imported_name;\n            this.imported_names = props.imported_names;\n            this.module_name = props.module_name;\n            this.assert_clause = props.assert_clause;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"An `import` statement\",\n        $propdoc: {\n            imported_name: \"[AST_SymbolImport] The name of the variable holding the module's default export.\",\n            imported_names: \"[AST_NameMapping*] The names of non-default imported variables\",\n            module_name: \"[AST_String] String literal describing where this module came from\",\n            assert_clause: \"[AST_Object?] The import assertion\"\n        },\n        _walk: function(visitor) {\n            return visitor._visit(this, function() {\n                if (this.imported_name) {\n                    this.imported_name._walk(visitor);\n                }\n                if (this.imported_names) {\n                    this.imported_names.forEach(function(name_import) {\n                        name_import._walk(visitor);\n                    });\n                }\n                this.module_name._walk(visitor);\n            });\n        },\n        _children_backwards(push) {\n            push(this.module_name);\n            if (this.imported_names) {\n                let i = this.imported_names.length;\n                while (i--) push(this.imported_names[i]);\n            }\n            if (this.imported_name) push(this.imported_name);\n        },\n    }\n);\n\nvar AST_ImportMeta = DEFNODE(\"ImportMeta\", null, function AST_ImportMeta(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A reference to import.meta\",\n});\n\nvar AST_Export = DEFNODE(\n    \"Export\",\n    \"exported_definition exported_value is_default exported_names module_name assert_clause\",\n    function AST_Export(props) {\n        if (props) {\n            this.exported_definition = props.exported_definition;\n            this.exported_value = props.exported_value;\n            this.is_default = props.is_default;\n            this.exported_names = props.exported_names;\n            this.module_name = props.module_name;\n            this.assert_clause = props.assert_clause;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"An `export` statement\",\n        $propdoc: {\n            exported_definition: \"[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition\",\n            exported_value: \"[AST_Node?] An exported value\",\n            exported_names: \"[AST_NameMapping*?] List of exported names\",\n            module_name: \"[AST_String?] Name of the file to load exports from\",\n            is_default: \"[Boolean] Whether this is the default exported value of this module\",\n            assert_clause: \"[AST_Object?] The import assertion\"\n        },\n        _walk: function (visitor) {\n            return visitor._visit(this, function () {\n                if (this.exported_definition) {\n                    this.exported_definition._walk(visitor);\n                }\n                if (this.exported_value) {\n                    this.exported_value._walk(visitor);\n                }\n                if (this.exported_names) {\n                    this.exported_names.forEach(function(name_export) {\n                        name_export._walk(visitor);\n                    });\n                }\n                if (this.module_name) {\n                    this.module_name._walk(visitor);\n                }\n            });\n        },\n        _children_backwards(push) {\n            if (this.module_name) push(this.module_name);\n            if (this.exported_names) {\n                let i = this.exported_names.length;\n                while (i--) push(this.exported_names[i]);\n            }\n            if (this.exported_value) push(this.exported_value);\n            if (this.exported_definition) push(this.exported_definition);\n        }\n    },\n    AST_Statement\n);\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE(\n    \"Call\",\n    \"expression args optional _annotations\",\n    function AST_Call(props) {\n        if (props) {\n            this.expression = props.expression;\n            this.args = props.args;\n            this.optional = props.optional;\n            this._annotations = props._annotations;\n            this.start = props.start;\n            this.end = props.end;\n            this.initialize();\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"A function call expression\",\n        $propdoc: {\n            expression: \"[AST_Node] expression to invoke as function\",\n            args: \"[AST_Node*] array of arguments\",\n            optional: \"[boolean] whether this is an optional call (IE ?.() )\",\n            _annotations: \"[number] bitfield containing information about the call\"\n        },\n        initialize() {\n            if (this._annotations == null) this._annotations = 0;\n        },\n        _walk(visitor) {\n            return visitor._visit(this, function() {\n                var args = this.args;\n                for (var i = 0, len = args.length; i < len; i++) {\n                    args[i]._walk(visitor);\n                }\n                this.expression._walk(visitor);  // TODO why do we need to crawl this last?\n            });\n        },\n        _children_backwards(push) {\n            let i = this.args.length;\n            while (i--) push(this.args[i]);\n            push(this.expression);\n        },\n    }\n);\n\nvar AST_New = DEFNODE(\"New\", null, function AST_New(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.args = props.args;\n        this.optional = props.optional;\n        this._annotations = props._annotations;\n        this.start = props.start;\n        this.end = props.end;\n        this.initialize();\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"An object instantiation.  Derives from a function call since it has exactly the same properties\"\n}, AST_Call);\n\nvar AST_Sequence = DEFNODE(\"Sequence\", \"expressions\", function AST_Sequence(props) {\n    if (props) {\n        this.expressions = props.expressions;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A sequence expression (comma-separated expressions)\",\n    $propdoc: {\n        expressions: \"[AST_Node*] array of expressions (at least two)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expressions.forEach(function(node) {\n                node._walk(visitor);\n            });\n        });\n    },\n    _children_backwards(push) {\n        let i = this.expressions.length;\n        while (i--) push(this.expressions[i]);\n    },\n});\n\nvar AST_PropAccess = DEFNODE(\n    \"PropAccess\",\n    \"expression property optional\",\n    function AST_PropAccess(props) {\n        if (props) {\n            this.expression = props.expression;\n            this.property = props.property;\n            this.optional = props.optional;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"Base class for property access expressions, i.e. `a.foo` or `a[\\\"foo\\\"]`\",\n        $propdoc: {\n            expression: \"[AST_Node] the “container” expression\",\n            property: \"[AST_Node|string] the property to access.  For AST_Dot & AST_DotHash this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\",\n\n            optional: \"[boolean] whether this is an optional property access (IE ?.)\"\n        }\n    }\n);\n\nvar AST_Dot = DEFNODE(\"Dot\", \"quote\", function AST_Dot(props) {\n    if (props) {\n        this.quote = props.quote;\n        this.expression = props.expression;\n        this.property = props.property;\n        this.optional = props.optional;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A dotted property access expression\",\n    $propdoc: {\n        quote: \"[string] the original quote character when transformed from AST_Sub\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n}, AST_PropAccess);\n\nvar AST_DotHash = DEFNODE(\"DotHash\", \"\", function AST_DotHash(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.property = props.property;\n        this.optional = props.optional;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A dotted property access to a private property\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE(\"Sub\", null, function AST_Sub(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.property = props.property;\n        this.optional = props.optional;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Index-style property access, i.e. `a[\\\"foo\\\"]`\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.property);\n        push(this.expression);\n    },\n}, AST_PropAccess);\n\nvar AST_Chain = DEFNODE(\"Chain\", \"expression\", function AST_Chain(props) {\n    if (props) {\n        this.expression = props.expression;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A chain expression like a?.b?.(c)?.[d]\",\n    $propdoc: {\n        expression: \"[AST_Call|AST_Dot|AST_DotHash|AST_Sub] chain element.\"\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n});\n\nvar AST_Unary = DEFNODE(\"Unary\", \"operator expression\", function AST_Unary(props) {\n    if (props) {\n        this.operator = props.operator;\n        this.expression = props.expression;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for unary expressions\",\n    $propdoc: {\n        operator: \"[string] the operator\",\n        expression: \"[AST_Node] expression that this unary operator applies to\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.expression);\n    },\n});\n\nvar AST_UnaryPrefix = DEFNODE(\"UnaryPrefix\", null, function AST_UnaryPrefix(props) {\n    if (props) {\n        this.operator = props.operator;\n        this.expression = props.expression;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Unary prefix expression, i.e. `typeof i` or `++i`\"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE(\"UnaryPostfix\", null, function AST_UnaryPostfix(props) {\n    if (props) {\n        this.operator = props.operator;\n        this.expression = props.expression;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Unary postfix expression, i.e. `i++`\"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE(\"Binary\", \"operator left right\", function AST_Binary(props) {\n    if (props) {\n        this.operator = props.operator;\n        this.left = props.left;\n        this.right = props.right;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Binary expression, i.e. `a + b`\",\n    $propdoc: {\n        left: \"[AST_Node] left-hand side expression\",\n        operator: \"[string] the operator\",\n        right: \"[AST_Node] right-hand side expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.right);\n        push(this.left);\n    },\n});\n\nvar AST_Conditional = DEFNODE(\n    \"Conditional\",\n    \"condition consequent alternative\",\n    function AST_Conditional(props) {\n        if (props) {\n            this.condition = props.condition;\n            this.consequent = props.consequent;\n            this.alternative = props.alternative;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"Conditional expression using the ternary operator, i.e. `a ? b : c`\",\n        $propdoc: {\n            condition: \"[AST_Node]\",\n            consequent: \"[AST_Node]\",\n            alternative: \"[AST_Node]\"\n        },\n        _walk: function(visitor) {\n            return visitor._visit(this, function() {\n                this.condition._walk(visitor);\n                this.consequent._walk(visitor);\n                this.alternative._walk(visitor);\n            });\n        },\n        _children_backwards(push) {\n            push(this.alternative);\n            push(this.consequent);\n            push(this.condition);\n        },\n    }\n);\n\nvar AST_Assign = DEFNODE(\"Assign\", \"logical\", function AST_Assign(props) {\n    if (props) {\n        this.logical = props.logical;\n        this.operator = props.operator;\n        this.left = props.left;\n        this.right = props.right;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"An assignment expression — `a = b + 5`\",\n    $propdoc: {\n        logical: \"Whether it's a logical assignment\"\n    }\n}, AST_Binary);\n\nvar AST_DefaultAssign = DEFNODE(\"DefaultAssign\", null, function AST_DefaultAssign(props) {\n    if (props) {\n        this.operator = props.operator;\n        this.left = props.left;\n        this.right = props.right;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A default assignment expression like in `(a = 3) => a`\"\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE(\"Array\", \"elements\", function AST_Array(props) {\n    if (props) {\n        this.elements = props.elements;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"An array literal\",\n    $propdoc: {\n        elements: \"[AST_Node*] array of elements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var elements = this.elements;\n            for (var i = 0, len = elements.length; i < len; i++) {\n                elements[i]._walk(visitor);\n            }\n        });\n    },\n    _children_backwards(push) {\n        let i = this.elements.length;\n        while (i--) push(this.elements[i]);\n    },\n});\n\nvar AST_Object = DEFNODE(\"Object\", \"properties\", function AST_Object(props) {\n    if (props) {\n        this.properties = props.properties;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"An object literal\",\n    $propdoc: {\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var properties = this.properties;\n            for (var i = 0, len = properties.length; i < len; i++) {\n                properties[i]._walk(visitor);\n            }\n        });\n    },\n    _children_backwards(push) {\n        let i = this.properties.length;\n        while (i--) push(this.properties[i]);\n    },\n});\n\nvar AST_ObjectProperty = DEFNODE(\"ObjectProperty\", \"key value\", function AST_ObjectProperty(props) {\n    if (props) {\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for literal object properties\",\n    $propdoc: {\n        key: \"[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.\",\n        value: \"[AST_Node] property value.  For getters and setters this is an AST_Accessor.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.key instanceof AST_Node)\n                this.key._walk(visitor);\n            this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.value);\n        if (this.key instanceof AST_Node) push(this.key);\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE(\"ObjectKeyVal\", \"quote\", function AST_ObjectKeyVal(props) {\n    if (props) {\n        this.quote = props.quote;\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A key: value object property\",\n    $propdoc: {\n        quote: \"[string] the original quote character\"\n    },\n    computed_key() {\n        return this.key instanceof AST_Node;\n    }\n}, AST_ObjectProperty);\n\nvar AST_PrivateSetter = DEFNODE(\"PrivateSetter\", \"static\", function AST_PrivateSetter(props) {\n    if (props) {\n        this.static = props.static;\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $propdoc: {\n        static: \"[boolean] whether this is a static private setter\"\n    },\n    $documentation: \"A private setter property\",\n    computed_key() {\n        return false;\n    }\n}, AST_ObjectProperty);\n\nvar AST_PrivateGetter = DEFNODE(\"PrivateGetter\", \"static\", function AST_PrivateGetter(props) {\n    if (props) {\n        this.static = props.static;\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $propdoc: {\n        static: \"[boolean] whether this is a static private getter\"\n    },\n    $documentation: \"A private getter property\",\n    computed_key() {\n        return false;\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE(\"ObjectSetter\", \"quote static\", function AST_ObjectSetter(props) {\n    if (props) {\n        this.quote = props.quote;\n        this.static = props.static;\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static setter (classes only)\"\n    },\n    $documentation: \"An object setter property\",\n    computed_key() {\n        return !(this.key instanceof AST_SymbolMethod);\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE(\"ObjectGetter\", \"quote static\", function AST_ObjectGetter(props) {\n    if (props) {\n        this.quote = props.quote;\n        this.static = props.static;\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static getter (classes only)\"\n    },\n    $documentation: \"An object getter property\",\n    computed_key() {\n        return !(this.key instanceof AST_SymbolMethod);\n    }\n}, AST_ObjectProperty);\n\nvar AST_ConciseMethod = DEFNODE(\n    \"ConciseMethod\",\n    \"quote static is_generator async\",\n    function AST_ConciseMethod(props) {\n        if (props) {\n            this.quote = props.quote;\n            this.static = props.static;\n            this.is_generator = props.is_generator;\n            this.async = props.async;\n            this.key = props.key;\n            this.value = props.value;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $propdoc: {\n            quote: \"[string|undefined] the original quote character, if any\",\n            static: \"[boolean] is this method static (classes only)\",\n            is_generator: \"[boolean] is this a generator method\",\n            async: \"[boolean] is this method async\",\n        },\n        $documentation: \"An ES6 concise method inside an object or class\",\n        computed_key() {\n            return !(this.key instanceof AST_SymbolMethod);\n        }\n    },\n    AST_ObjectProperty\n);\n\nvar AST_PrivateMethod = DEFNODE(\"PrivateMethod\", \"\", function AST_PrivateMethod(props) {\n    if (props) {\n        this.quote = props.quote;\n        this.static = props.static;\n        this.is_generator = props.is_generator;\n        this.async = props.async;\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A private class method inside a class\",\n}, AST_ConciseMethod);\n\nvar AST_Class = DEFNODE(\"Class\", \"name extends properties\", function AST_Class(props) {\n    if (props) {\n        this.name = props.name;\n        this.extends = props.extends;\n        this.properties = props.properties;\n        this.variables = props.variables;\n        this.uses_with = props.uses_with;\n        this.uses_eval = props.uses_eval;\n        this.parent_scope = props.parent_scope;\n        this.enclosed = props.enclosed;\n        this.cname = props.cname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $propdoc: {\n        name: \"[AST_SymbolClass|AST_SymbolDefClass?] optional class name.\",\n        extends: \"[AST_Node]? optional parent class\",\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    $documentation: \"An ES6 class\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) {\n                this.name._walk(visitor);\n            }\n            if (this.extends) {\n                this.extends._walk(visitor);\n            }\n            this.properties.forEach((prop) => prop._walk(visitor));\n        });\n    },\n    _children_backwards(push) {\n        let i = this.properties.length;\n        while (i--) push(this.properties[i]);\n        if (this.extends) push(this.extends);\n        if (this.name) push(this.name);\n    },\n}, AST_Scope /* TODO a class might have a scope but it's not a scope */);\n\nvar AST_ClassProperty = DEFNODE(\"ClassProperty\", \"static quote\", function AST_ClassProperty(props) {\n    if (props) {\n        this.static = props.static;\n        this.quote = props.quote;\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A class property\",\n    $propdoc: {\n        static: \"[boolean] whether this is a static key\",\n        quote: \"[string] which quote is being used\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.key instanceof AST_Node)\n                this.key._walk(visitor);\n            if (this.value instanceof AST_Node)\n                this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        if (this.value instanceof AST_Node) push(this.value);\n        if (this.key instanceof AST_Node) push(this.key);\n    },\n    computed_key() {\n        return !(this.key instanceof AST_SymbolClassProperty);\n    }\n}, AST_ObjectProperty);\n\nvar AST_ClassPrivateProperty = DEFNODE(\"ClassPrivateProperty\", \"\", function AST_ClassPrivateProperty(props) {\n    if (props) {\n        this.static = props.static;\n        this.quote = props.quote;\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A class property for a private property\",\n}, AST_ClassProperty);\n\nvar AST_PrivateIn = DEFNODE(\"PrivateIn\", \"key value\", function AST_PrivateIn(props) {\n    if (props) {\n        this.key = props.key;\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"An `in` binop when the key is private, eg #x in this\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.key._walk(visitor);\n            this.value._walk(visitor);\n        });\n    },\n    _children_backwards(push) {\n        push(this.value);\n        push(this.key);\n    },\n});\n\nvar AST_DefClass = DEFNODE(\"DefClass\", null, function AST_DefClass(props) {\n    if (props) {\n        this.name = props.name;\n        this.extends = props.extends;\n        this.properties = props.properties;\n        this.variables = props.variables;\n        this.uses_with = props.uses_with;\n        this.uses_eval = props.uses_eval;\n        this.parent_scope = props.parent_scope;\n        this.enclosed = props.enclosed;\n        this.cname = props.cname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A class definition\",\n}, AST_Class);\n\nvar AST_ClassStaticBlock = DEFNODE(\"ClassStaticBlock\", \"body block_scope\", function AST_ClassStaticBlock (props) {\n    this.body = props.body;\n    this.block_scope = props.block_scope;\n    this.start = props.start;\n    this.end = props.end;\n}, {\n    $documentation: \"A block containing statements to be executed in the context of the class\",\n    $propdoc: {\n        body: \"[AST_Statement*] an array of statements\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n        });\n    },\n    _children_backwards(push) {\n        let i = this.body.length;\n        while (i--) push(this.body[i]);\n    },\n    clone: clone_block_scope,\n}, AST_Scope);\n\nvar AST_ClassExpression = DEFNODE(\"ClassExpression\", null, function AST_ClassExpression(props) {\n    if (props) {\n        this.name = props.name;\n        this.extends = props.extends;\n        this.properties = props.properties;\n        this.variables = props.variables;\n        this.uses_with = props.uses_with;\n        this.uses_eval = props.uses_eval;\n        this.parent_scope = props.parent_scope;\n        this.enclosed = props.enclosed;\n        this.cname = props.cname;\n        this.body = props.body;\n        this.block_scope = props.block_scope;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A class expression.\"\n}, AST_Class);\n\nvar AST_Symbol = DEFNODE(\"Symbol\", \"scope name thedef\", function AST_Symbol(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $propdoc: {\n        name: \"[string] name of this symbol\",\n        scope: \"[AST_Scope/S] the current scope (not necessarily the definition scope)\",\n        thedef: \"[SymbolDef/S] the definition of this symbol\"\n    },\n    $documentation: \"Base class for all symbols\"\n});\n\nvar AST_NewTarget = DEFNODE(\"NewTarget\", null, function AST_NewTarget(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A reference to new.target\"\n});\n\nvar AST_SymbolDeclaration = DEFNODE(\"SymbolDeclaration\", \"init\", function AST_SymbolDeclaration(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A declaration symbol (symbol in var/const, function name or argument, symbol in catch)\",\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE(\"SymbolVar\", null, function AST_SymbolVar(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol defining a variable\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolBlockDeclaration = DEFNODE(\n    \"SymbolBlockDeclaration\",\n    null,\n    function AST_SymbolBlockDeclaration(props) {\n        if (props) {\n            this.init = props.init;\n            this.scope = props.scope;\n            this.name = props.name;\n            this.thedef = props.thedef;\n            this.start = props.start;\n            this.end = props.end;\n        }\n\n        this.flags = 0;\n    },\n    {\n        $documentation: \"Base class for block-scoped declaration symbols\"\n    },\n    AST_SymbolDeclaration\n);\n\nvar AST_SymbolConst = DEFNODE(\"SymbolConst\", null, function AST_SymbolConst(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A constant declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolLet = DEFNODE(\"SymbolLet\", null, function AST_SymbolLet(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A block-scoped `let` declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE(\"SymbolFunarg\", null, function AST_SymbolFunarg(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol naming a function argument\",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE(\"SymbolDefun\", null, function AST_SymbolDefun(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol defining a function\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolMethod = DEFNODE(\"SymbolMethod\", null, function AST_SymbolMethod(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol in an object defining a method\",\n}, AST_Symbol);\n\nvar AST_SymbolClassProperty = DEFNODE(\"SymbolClassProperty\", null, function AST_SymbolClassProperty(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol for a class property\",\n}, AST_Symbol);\n\nvar AST_SymbolLambda = DEFNODE(\"SymbolLambda\", null, function AST_SymbolLambda(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol naming a function expression\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolDefClass = DEFNODE(\"SymbolDefClass\", null, function AST_SymbolDefClass(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol naming a class's name in a class declaration. Lexically scoped to its containing scope, and accessible within the class.\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolClass = DEFNODE(\"SymbolClass\", null, function AST_SymbolClass(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol naming a class's name. Lexically scoped to the class.\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE(\"SymbolCatch\", null, function AST_SymbolCatch(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol naming the exception in catch\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImport = DEFNODE(\"SymbolImport\", null, function AST_SymbolImport(props) {\n    if (props) {\n        this.init = props.init;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol referring to an imported name\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImportForeign = DEFNODE(\"SymbolImportForeign\", null, function AST_SymbolImportForeign(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.quote = props.quote;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_Label = DEFNODE(\"Label\", \"references\", function AST_Label(props) {\n    if (props) {\n        this.references = props.references;\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n        this.initialize();\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol naming a label (declaration)\",\n    $propdoc: {\n        references: \"[AST_LoopControl*] a list of nodes referring to this label\"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE(\"SymbolRef\", null, function AST_SymbolRef(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Reference to some symbol (not definition/declaration)\",\n}, AST_Symbol);\n\nvar AST_SymbolExport = DEFNODE(\"SymbolExport\", null, function AST_SymbolExport(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.quote = props.quote;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Symbol referring to a name to export\",\n}, AST_SymbolRef);\n\nvar AST_SymbolExportForeign = DEFNODE(\"SymbolExportForeign\", null, function AST_SymbolExportForeign(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.quote = props.quote;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE(\"LabelRef\", null, function AST_LabelRef(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Reference to a label symbol\",\n}, AST_Symbol);\n\nvar AST_SymbolPrivateProperty = DEFNODE(\"SymbolPrivateProperty\", null, function AST_SymbolPrivateProperty(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A symbol that refers to a private property\",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE(\"This\", null, function AST_This(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The `this` symbol\",\n}, AST_Symbol);\n\nvar AST_Super = DEFNODE(\"Super\", null, function AST_Super(props) {\n    if (props) {\n        this.scope = props.scope;\n        this.name = props.name;\n        this.thedef = props.thedef;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The `super` symbol\",\n}, AST_This);\n\nvar AST_Constant = DEFNODE(\"Constant\", null, function AST_Constant(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for all constants\",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE(\"String\", \"value quote\", function AST_String(props) {\n    if (props) {\n        this.value = props.value;\n        this.quote = props.quote;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A string literal\",\n    $propdoc: {\n        value: \"[string] the contents of this string\",\n        quote: \"[string] the original quote character\"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE(\"Number\", \"value raw\", function AST_Number(props) {\n    if (props) {\n        this.value = props.value;\n        this.raw = props.raw;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A number literal\",\n    $propdoc: {\n        value: \"[number] the numeric value\",\n        raw: \"[string] numeric value as string\"\n    }\n}, AST_Constant);\n\nvar AST_BigInt = DEFNODE(\"BigInt\", \"value\", function AST_BigInt(props) {\n    if (props) {\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A big int literal\",\n    $propdoc: {\n        value: \"[string] big int value\"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE(\"RegExp\", \"value\", function AST_RegExp(props) {\n    if (props) {\n        this.value = props.value;\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A regexp literal\",\n    $propdoc: {\n        value: \"[RegExp] the actual regexp\",\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE(\"Atom\", null, function AST_Atom(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for atoms\",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE(\"Null\", null, function AST_Null(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The `null` atom\",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE(\"NaN\", null, function AST_NaN(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The impossible value\",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE(\"Undefined\", null, function AST_Undefined(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The `undefined` value\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE(\"Hole\", null, function AST_Hole(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"A hole in an array\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE(\"Infinity\", null, function AST_Infinity(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The `Infinity` value\",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE(\"Boolean\", null, function AST_Boolean(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"Base class for booleans\",\n}, AST_Atom);\n\nvar AST_False = DEFNODE(\"False\", null, function AST_False(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The `false` atom\",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE(\"True\", null, function AST_True(props) {\n    if (props) {\n        this.start = props.start;\n        this.end = props.end;\n    }\n\n    this.flags = 0;\n}, {\n    $documentation: \"The `true` atom\",\n    value: true\n}, AST_Boolean);\n\n/* -----[ Walk function ]---- */\n\n/**\n * Walk nodes in depth-first search fashion.\n * Callback can return `walk_abort` symbol to stop iteration.\n * It can also return `true` to stop iteration just for child nodes.\n * Iteration can be stopped and continued by passing the `to_visit` argument,\n * which is given to the callback in the second argument.\n **/\nfunction walk(node, cb, to_visit = [node]) {\n    const push = to_visit.push.bind(to_visit);\n    while (to_visit.length) {\n        const node = to_visit.pop();\n        const ret = cb(node, to_visit);\n\n        if (ret) {\n            if (ret === walk_abort) return true;\n            continue;\n        }\n\n        node._children_backwards(push);\n    }\n    return false;\n}\n\n/**\n * Walks an AST node and its children.\n *\n * {cb} can return `walk_abort` to interrupt the walk.\n *\n * @param node\n * @param cb {(node, info: { parent: (nth) => any }) => (boolean | undefined)}\n *\n * @returns {boolean} whether the walk was aborted\n *\n * @example\n * const found_some_cond = walk_parent(my_ast_node, (node, { parent }) => {\n *   if (some_cond(node, parent())) return walk_abort\n * });\n */\nfunction walk_parent(node, cb, initial_stack) {\n    const to_visit = [node];\n    const push = to_visit.push.bind(to_visit);\n    const stack = initial_stack ? initial_stack.slice() : [];\n    const parent_pop_indices = [];\n\n    let current;\n\n    const info = {\n        parent: (n = 0) => {\n            if (n === -1) {\n                return current;\n            }\n\n            // [ p1 p0 ] [ 1 0 ]\n            if (initial_stack && n >= stack.length) {\n                n -= stack.length;\n                return initial_stack[\n                    initial_stack.length - (n + 1)\n                ];\n            }\n\n            return stack[stack.length - (1 + n)];\n        },\n    };\n\n    while (to_visit.length) {\n        current = to_visit.pop();\n\n        while (\n            parent_pop_indices.length &&\n            to_visit.length == parent_pop_indices[parent_pop_indices.length - 1]\n        ) {\n            stack.pop();\n            parent_pop_indices.pop();\n        }\n\n        const ret = cb(current, info);\n\n        if (ret) {\n            if (ret === walk_abort) return true;\n            continue;\n        }\n\n        const visit_length = to_visit.length;\n\n        current._children_backwards(push);\n\n        // Push only if we're going to traverse the children\n        if (to_visit.length > visit_length) {\n            stack.push(current);\n            parent_pop_indices.push(visit_length - 1);\n        }\n    }\n\n    return false;\n}\n\nconst walk_abort = Symbol(\"abort walk\");\n\n/* -----[ TreeWalker ]----- */\n\nclass TreeWalker {\n    constructor(callback, { walk_defun_first = false } = {}) {\n        this.visit = callback;\n        this.stack = [];\n        this.directives = Object.create(null);\n        this.walk_defun_first = walk_defun_first;\n    }\n\n    _visit(node, descend) {\n        this.push(node);\n        var ret = this.visit(node, descend ? function() {\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.pop();\n        return ret;\n    }\n\n    parent(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    }\n\n    push(node) {\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.create(this.directives);\n        } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n            this.directives[node.value] = node;\n        } else if (node instanceof AST_Class) {\n            this.directives = Object.create(this.directives);\n            if (!this.directives[\"use strict\"]) {\n                this.directives[\"use strict\"] = node;\n            }\n        }\n        this.stack.push(node);\n    }\n\n    pop() {\n        var node = this.stack.pop();\n        if (node instanceof AST_Lambda || node instanceof AST_Class) {\n            this.directives = Object.getPrototypeOf(this.directives);\n        }\n    }\n\n    self() {\n        return this.stack[this.stack.length - 1];\n    }\n\n    find_parent(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    }\n\n    find_scope() {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            const p = stack[i];\n            if (p instanceof AST_Toplevel) return p;\n            if (p instanceof AST_Lambda) return p;\n            if (p.block_scope) return p.block_scope;\n        }\n    }\n\n    has_directive(type) {\n        var dir = this.directives[type];\n        if (dir) return dir;\n        var node = this.stack[this.stack.length - 1];\n        if (node instanceof AST_Scope && node.body) {\n            for (var i = 0; i < node.body.length; ++i) {\n                var st = node.body[i];\n                if (!(st instanceof AST_Directive)) break;\n                if (st.value == type) return st;\n            }\n        }\n    }\n\n    loopcontrol_target(node) {\n        var stack = this.stack;\n        if (node.label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)\n                return x.body;\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_IterationStatement\n                || node instanceof AST_Break && x instanceof AST_Switch)\n                return x;\n        }\n    }\n}\n\n// Tree transformer helpers.\nclass TreeTransformer extends TreeWalker {\n    constructor(before, after) {\n        super();\n        this.before = before;\n        this.after = after;\n    }\n}\n\nconst _PURE     = 0b00000001;\nconst _INLINE   = 0b00000010;\nconst _NOINLINE = 0b00000100;\n\nexport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ClassPrivateProperty,\n    AST_PrivateIn,\n    AST_ClassProperty,\n    AST_ClassStaticBlock,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DotHash,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Jump,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_NaN,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PrivateGetter,\n    AST_PrivateMethod,\n    AST_PrivateSetter,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolClassProperty,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_SymbolPrivateProperty,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_TryBlock,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n\n    // Walkers\n    TreeTransformer,\n    TreeWalker,\n    walk,\n    walk_abort,\n    walk_body,\n    walk_parent,\n\n    // annotations\n    _INLINE,\n    _NOINLINE,\n    _PURE,\n};\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    AST_Array,\n    AST_Await,\n    AST_Binary,\n    AST_PrivateIn,\n    AST_Block,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassStaticBlock,\n    AST_Conditional,\n    AST_Definitions,\n    AST_Destructuring,\n    AST_Do,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_If,\n    AST_Import,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Sub,\n    AST_Switch,\n    AST_TemplateString,\n    AST_Try,\n    AST_Unary,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\nimport {\n    MAP as do_list,\n    noop,\n} from \"./utils/index.js\";\n\nfunction def_transform(node, descend) {\n    node.DEFMETHOD(\"transform\", function(tw, in_list) {\n        let transformed = undefined;\n        tw.push(this);\n        if (tw.before) transformed = tw.before(this, descend, in_list);\n        if (transformed === undefined) {\n            transformed = this;\n            descend(transformed, tw);\n            if (tw.after) {\n                const after_ret = tw.after(transformed, in_list);\n                if (after_ret !== undefined) transformed = after_ret;\n            }\n        }\n        tw.pop();\n        return transformed;\n    });\n}\n\ndef_transform(AST_Node, noop);\n\ndef_transform(AST_LabeledStatement, function(self, tw) {\n    self.label = self.label.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_SimpleStatement, function(self, tw) {\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_Block, function(self, tw) {\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Do, function(self, tw) {\n    self.body = self.body.transform(tw);\n    self.condition = self.condition.transform(tw);\n});\n\ndef_transform(AST_While, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_For, function(self, tw) {\n    if (self.init) self.init = self.init.transform(tw);\n    if (self.condition) self.condition = self.condition.transform(tw);\n    if (self.step) self.step = self.step.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_ForIn, function(self, tw) {\n    self.init = self.init.transform(tw);\n    self.object = self.object.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_With, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = self.body.transform(tw);\n});\n\ndef_transform(AST_Exit, function(self, tw) {\n    if (self.value) self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_LoopControl, function(self, tw) {\n    if (self.label) self.label = self.label.transform(tw);\n});\n\ndef_transform(AST_If, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.body = self.body.transform(tw);\n    if (self.alternative) self.alternative = self.alternative.transform(tw);\n});\n\ndef_transform(AST_Switch, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Case, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Try, function(self, tw) {\n    self.body = self.body.transform(tw);\n    if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n    if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n});\n\ndef_transform(AST_Catch, function(self, tw) {\n    if (self.argname) self.argname = self.argname.transform(tw);\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Definitions, function(self, tw) {\n    self.definitions = do_list(self.definitions, tw);\n});\n\ndef_transform(AST_VarDef, function(self, tw) {\n    self.name = self.name.transform(tw);\n    if (self.value) self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_Destructuring, function(self, tw) {\n    self.names = do_list(self.names, tw);\n});\n\ndef_transform(AST_Lambda, function(self, tw) {\n    if (self.name) self.name = self.name.transform(tw);\n    self.argnames = do_list(self.argnames, tw, /* allow_splicing */ false);\n    if (self.body instanceof AST_Node) {\n        self.body = self.body.transform(tw);\n    } else {\n        self.body = do_list(self.body, tw);\n    }\n});\n\ndef_transform(AST_Call, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.args = do_list(self.args, tw, /* allow_splicing */ false);\n});\n\ndef_transform(AST_Sequence, function(self, tw) {\n    const result = do_list(self.expressions, tw);\n    self.expressions = result.length\n        ? result\n        : [new AST_Number({ value: 0 })];\n});\n\ndef_transform(AST_PropAccess, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Sub, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.property = self.property.transform(tw);\n});\n\ndef_transform(AST_Chain, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Yield, function(self, tw) {\n    if (self.expression) self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Await, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Unary, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_Binary, function(self, tw) {\n    self.left = self.left.transform(tw);\n    self.right = self.right.transform(tw);\n});\n\ndef_transform(AST_PrivateIn, function(self, tw) {\n    self.key = self.key.transform(tw);\n    self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_Conditional, function(self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.consequent = self.consequent.transform(tw);\n    self.alternative = self.alternative.transform(tw);\n});\n\ndef_transform(AST_Array, function(self, tw) {\n    self.elements = do_list(self.elements, tw);\n});\n\ndef_transform(AST_Object, function(self, tw) {\n    self.properties = do_list(self.properties, tw);\n});\n\ndef_transform(AST_ObjectProperty, function(self, tw) {\n    if (self.key instanceof AST_Node) {\n        self.key = self.key.transform(tw);\n    }\n    if (self.value) self.value = self.value.transform(tw);\n});\n\ndef_transform(AST_Class, function(self, tw) {\n    if (self.name) self.name = self.name.transform(tw);\n    if (self.extends) self.extends = self.extends.transform(tw);\n    self.properties = do_list(self.properties, tw);\n});\n\ndef_transform(AST_ClassStaticBlock, function(self, tw) {\n    self.body = do_list(self.body, tw);\n});\n\ndef_transform(AST_Expansion, function(self, tw) {\n    self.expression = self.expression.transform(tw);\n});\n\ndef_transform(AST_NameMapping, function(self, tw) {\n    self.foreign_name = self.foreign_name.transform(tw);\n    self.name = self.name.transform(tw);\n});\n\ndef_transform(AST_Import, function(self, tw) {\n    if (self.imported_name) self.imported_name = self.imported_name.transform(tw);\n    if (self.imported_names) do_list(self.imported_names, tw);\n    self.module_name = self.module_name.transform(tw);\n});\n\ndef_transform(AST_Export, function(self, tw) {\n    if (self.exported_definition) self.exported_definition = self.exported_definition.transform(tw);\n    if (self.exported_value) self.exported_value = self.exported_value.transform(tw);\n    if (self.exported_names) do_list(self.exported_names, tw);\n    if (self.module_name) self.module_name = self.module_name.transform(tw);\n});\n\ndef_transform(AST_TemplateString, function(self, tw) {\n    self.segments = do_list(self.segments, tw);\n});\n\ndef_transform(AST_PrefixedTemplateString, function(self, tw) {\n    self.prefix = self.prefix.transform(tw);\n    self.template_string = self.template_string.transform(tw);\n});\n\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport { make_node } from \"./utils/index.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassStaticBlock,\n    AST_ClassExpression,\n    AST_ClassProperty,\n    AST_ClassPrivateProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DotHash,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PrivateGetter,\n    AST_PrivateMethod,\n    AST_PrivateSetter,\n    AST_PrivateIn,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolClassProperty,\n    AST_SymbolPrivateProperty,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_TryBlock,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\nimport { is_basic_identifier_string } from \"./parse.js\";\n\n(function() {\n\n    var normalize_directives = function(body) {\n        var in_directive = true;\n\n        for (var i = 0; i < body.length; i++) {\n            if (in_directive && body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {\n                body[i] = new AST_Directive({\n                    start: body[i].start,\n                    end: body[i].end,\n                    value: body[i].body.value\n                });\n            } else if (in_directive && !(body[i] instanceof AST_Statement && body[i].body instanceof AST_String)) {\n                in_directive = false;\n            }\n        }\n\n        return body;\n    };\n\n    const assert_clause_from_moz = (assertions) => {\n        if (assertions && assertions.length > 0) {\n            return new AST_Object({\n                start: my_start_token(assertions),\n                end: my_end_token(assertions),\n                properties: assertions.map((assertion_kv) =>\n                    new AST_ObjectKeyVal({\n                        start: my_start_token(assertion_kv),\n                        end: my_end_token(assertion_kv),\n                        key: assertion_kv.key.name || assertion_kv.key.value,\n                        value: from_moz(assertion_kv.value)\n                    })\n                )\n            });\n        }\n        return null;\n    };\n\n    var MOZ_TO_ME = {\n        Program: function(M) {\n            return new AST_Toplevel({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: normalize_directives(M.body.map(from_moz))\n            });\n        },\n\n        ArrayPattern: function(M) {\n            return new AST_Destructuring({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                names: M.elements.map(function(elm) {\n                    if (elm === null) {\n                        return new AST_Hole();\n                    }\n                    return from_moz(elm);\n                }),\n                is_array: true\n            });\n        },\n\n        ObjectPattern: function(M) {\n            return new AST_Destructuring({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                names: M.properties.map(from_moz),\n                is_array: false\n            });\n        },\n\n        AssignmentPattern: function(M) {\n            return new AST_DefaultAssign({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                left: from_moz(M.left),\n                operator: \"=\",\n                right: from_moz(M.right)\n            });\n        },\n\n        SpreadElement: function(M) {\n            return new AST_Expansion({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n\n        RestElement: function(M) {\n            return new AST_Expansion({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n\n        TemplateElement: function(M) {\n            return new AST_TemplateSegment({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                value: M.value.cooked,\n                raw: M.value.raw\n            });\n        },\n\n        TemplateLiteral: function(M) {\n            var segments = [];\n            for (var i = 0; i < M.quasis.length; i++) {\n                segments.push(from_moz(M.quasis[i]));\n                if (M.expressions[i]) {\n                    segments.push(from_moz(M.expressions[i]));\n                }\n            }\n            return new AST_TemplateString({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                segments: segments\n            });\n        },\n\n        TaggedTemplateExpression: function(M) {\n            return new AST_PrefixedTemplateString({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                template_string: from_moz(M.quasi),\n                prefix: from_moz(M.tag)\n            });\n        },\n\n        FunctionDeclaration: function(M) {\n            return new AST_Defun({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                is_generator: M.generator,\n                async: M.async,\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n\n        FunctionExpression: function(M) {\n            return new AST_Function({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                is_generator: M.generator,\n                async: M.async,\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n\n        ArrowFunctionExpression: function(M) {\n            const body = M.body.type === \"BlockStatement\"\n                ? from_moz(M.body).body\n                : [make_node(AST_Return, {}, { value: from_moz(M.body) })];\n            return new AST_Arrow({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                argnames: M.params.map(from_moz),\n                body,\n                async: M.async,\n            });\n        },\n\n        ExpressionStatement: function(M) {\n            return new AST_SimpleStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: from_moz(M.expression)\n            });\n        },\n\n        TryStatement: function(M) {\n            var handlers = M.handlers || [M.handler];\n            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {\n                throw new Error(\"Multiple catch clauses are not supported.\");\n            }\n            return new AST_Try({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                body     : new AST_TryBlock(from_moz(M.block)),\n                bcatch   : from_moz(handlers[0]),\n                bfinally : M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null\n            });\n        },\n\n        Property: function(M) {\n            var key = M.key;\n            var args = {\n                start    : my_start_token(key || M.value),\n                end      : my_end_token(M.value),\n                key      : key.type == \"Identifier\" ? key.name : key.value,\n                value    : from_moz(M.value)\n            };\n            if (M.computed) {\n                args.key = from_moz(M.key);\n            }\n            if (M.method) {\n                args.is_generator = M.value.generator;\n                args.async = M.value.async;\n                if (!M.computed) {\n                    args.key = new AST_SymbolMethod({ name: args.key });\n                } else {\n                    args.key = from_moz(M.key);\n                }\n                return new AST_ConciseMethod(args);\n            }\n            if (M.kind == \"init\") {\n                if (key.type != \"Identifier\" && key.type != \"Literal\") {\n                    args.key = from_moz(key);\n                }\n                return new AST_ObjectKeyVal(args);\n            }\n            if (typeof args.key === \"string\" || typeof args.key === \"number\") {\n                args.key = new AST_SymbolMethod({\n                    name: args.key\n                });\n            }\n            args.value = new AST_Accessor(args.value);\n            if (M.kind == \"get\") return new AST_ObjectGetter(args);\n            if (M.kind == \"set\") return new AST_ObjectSetter(args);\n            if (M.kind == \"method\") {\n                args.async = M.value.async;\n                args.is_generator = M.value.generator;\n                args.quote = M.computed ? \"\\\"\" : null;\n                return new AST_ConciseMethod(args);\n            }\n        },\n\n        MethodDefinition: function(M) {\n            var args = {\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                key      : M.computed ? from_moz(M.key) : new AST_SymbolMethod({ name: M.key.name || M.key.value }),\n                value    : from_moz(M.value),\n                static   : M.static,\n            };\n            if (M.kind == \"get\") {\n                return new AST_ObjectGetter(args);\n            }\n            if (M.kind == \"set\") {\n                return new AST_ObjectSetter(args);\n            }\n            args.is_generator = M.value.generator;\n            args.async = M.value.async;\n            return new AST_ConciseMethod(args);\n        },\n\n        FieldDefinition: function(M) {\n            let key;\n            if (M.computed) {\n                key = from_moz(M.key);\n            } else {\n                if (M.key.type !== \"Identifier\") throw new Error(\"Non-Identifier key in FieldDefinition\");\n                key = from_moz(M.key);\n            }\n            return new AST_ClassProperty({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                key,\n                value    : from_moz(M.value),\n                static   : M.static,\n            });\n        },\n\n        PropertyDefinition: function(M) {\n            let key;\n            if (M.computed) {\n                key = from_moz(M.key);\n            } else {\n                if (M.key.type !== \"Identifier\" && M.key.type !== \"PrivateIdentifier\") {\n                    throw new Error(\"Non-Identifier key in PropertyDefinition\");\n                }\n                key = from_moz(M.key);\n            }\n\n            return new AST_ClassProperty({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                key,\n                value    : from_moz(M.value),\n                static   : M.static,\n            });\n        },\n\n        StaticBlock: function(M) {\n            return new AST_ClassStaticBlock({\n                start : my_start_token(M),\n                end   : my_end_token(M),\n                body  : M.body.map(from_moz),\n            });\n        },\n\n        ArrayExpression: function(M) {\n            return new AST_Array({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                elements : M.elements.map(function(elem) {\n                    return elem === null ? new AST_Hole() : from_moz(elem);\n                })\n            });\n        },\n\n        ObjectExpression: function(M) {\n            return new AST_Object({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                properties : M.properties.map(function(prop) {\n                    if (prop.type === \"SpreadElement\") {\n                        return from_moz(prop);\n                    }\n                    prop.type = \"Property\";\n                    return from_moz(prop);\n                })\n            });\n        },\n\n        SequenceExpression: function(M) {\n            return new AST_Sequence({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expressions: M.expressions.map(from_moz)\n            });\n        },\n\n        MemberExpression: function(M) {\n            return new (M.computed ? AST_Sub : AST_Dot)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                property   : M.computed ? from_moz(M.property) : M.property.name,\n                expression : from_moz(M.object),\n                optional   : M.optional || false\n            });\n        },\n\n        ChainExpression: function(M) {\n            return new AST_Chain({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expression : from_moz(M.expression)\n            });\n        },\n\n        SwitchCase: function(M) {\n            return new (M.test ? AST_Case : AST_Default)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expression : from_moz(M.test),\n                body       : M.consequent.map(from_moz)\n            });\n        },\n\n        VariableDeclaration: function(M) {\n            return new (M.kind === \"const\" ? AST_Const :\n                        M.kind === \"let\" ? AST_Let : AST_Var)({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                definitions : M.declarations.map(from_moz)\n            });\n        },\n\n        ImportDeclaration: function(M) {\n            var imported_name = null;\n            var imported_names = null;\n            M.specifiers.forEach(function (specifier) {\n                if (specifier.type === \"ImportSpecifier\" || specifier.type === \"ImportNamespaceSpecifier\") {\n                    if (!imported_names) { imported_names = []; }\n                    imported_names.push(from_moz(specifier));\n                } else if (specifier.type === \"ImportDefaultSpecifier\") {\n                    imported_name = from_moz(specifier);\n                }\n            });\n            return new AST_Import({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                imported_name: imported_name,\n                imported_names : imported_names,\n                module_name : from_moz(M.source),\n                assert_clause: assert_clause_from_moz(M.assertions)\n            });\n        },\n\n        ImportSpecifier: function(M) {\n            return new AST_NameMapping({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                foreign_name: from_moz(M.imported),\n                name: from_moz(M.local)\n            });\n        },\n\n        ImportDefaultSpecifier: function(M) {\n            return from_moz(M.local);\n        },\n\n        ImportNamespaceSpecifier: function(M) {\n            return new AST_NameMapping({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                foreign_name: new AST_SymbolImportForeign({ name: \"*\" }),\n                name: from_moz(M.local)\n            });\n        },\n\n        ExportAllDeclaration: function(M) {\n            var foreign_name = M.exported == null ? \n                new AST_SymbolExportForeign({ name: \"*\" }) :\n                from_moz(M.exported);\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_names: [\n                    new AST_NameMapping({\n                        name: new AST_SymbolExportForeign({ name: \"*\" }),\n                        foreign_name: foreign_name\n                    })\n                ],\n                module_name: from_moz(M.source),\n                assert_clause: assert_clause_from_moz(M.assertions)\n            });\n        },\n\n        ExportNamedDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_definition: from_moz(M.declaration),\n                exported_names: M.specifiers && M.specifiers.length ? M.specifiers.map(function (specifier) {\n                    return from_moz(specifier);\n                }) : null,\n                module_name: from_moz(M.source),\n                assert_clause: assert_clause_from_moz(M.assertions)\n            });\n        },\n\n        ExportDefaultDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_value: from_moz(M.declaration),\n                is_default: true\n            });\n        },\n\n        ExportSpecifier: function(M) {\n            return new AST_NameMapping({\n                foreign_name: from_moz(M.exported),\n                name: from_moz(M.local)\n            });\n        },\n\n        Literal: function(M) {\n            var val = M.value, args = {\n                start  : my_start_token(M),\n                end    : my_end_token(M)\n            };\n            var rx = M.regex;\n            if (rx && rx.pattern) {\n                // RegExpLiteral as per ESTree AST spec\n                args.value = {\n                    source: rx.pattern,\n                    flags: rx.flags\n                };\n                return new AST_RegExp(args);\n            } else if (rx) {\n                // support legacy RegExp\n                const rx_source = M.raw || val;\n                const match = rx_source.match(/^\\/(.*)\\/(\\w*)$/);\n                if (!match) throw new Error(\"Invalid regex source \" + rx_source);\n                const [_, source, flags] = match;\n                args.value = { source, flags };\n                return new AST_RegExp(args);\n            }\n            if (val === null) return new AST_Null(args);\n            switch (typeof val) {\n              case \"string\":\n                args.quote = \"\\\"\";\n                var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n                if (p.type == \"ImportSpecifier\") {\n                    args.name = val;\n                    return new AST_SymbolImportForeign(args);\n                } else if (p.type == \"ExportSpecifier\") {\n                    args.name = val;\n                    if (M == p.exported) {\n                        return new AST_SymbolExportForeign(args);\n                    } else {\n                        return new AST_SymbolExport(args);\n                    }\n                } else if (p.type == \"ExportAllDeclaration\" && M == p.exported) {\n                    args.name = val;\n                    return new AST_SymbolExportForeign(args);\n                }\n                args.value = val;\n                return new AST_String(args);\n              case \"number\":\n                args.value = val;\n                args.raw = M.raw || val.toString();\n                return new AST_Number(args);\n              case \"boolean\":\n                return new (val ? AST_True : AST_False)(args);\n            }\n        },\n\n        MetaProperty: function(M) {\n            if (M.meta.name === \"new\" && M.property.name === \"target\") {\n                return new AST_NewTarget({\n                    start: my_start_token(M),\n                    end: my_end_token(M)\n                });\n            } else if (M.meta.name === \"import\" && M.property.name === \"meta\") {\n                return new AST_ImportMeta({\n                    start: my_start_token(M),\n                    end: my_end_token(M)\n                });\n            }\n        },\n\n        Identifier: function(M) {\n            var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n            return new (  p.type == \"LabeledStatement\" ? AST_Label\n                        : p.type == \"VariableDeclarator\" && p.id === M ? (p.kind == \"const\" ? AST_SymbolConst : p.kind == \"let\" ? AST_SymbolLet : AST_SymbolVar)\n                        : /Import.*Specifier/.test(p.type) ? (p.local === M ? AST_SymbolImport : AST_SymbolImportForeign)\n                        : p.type == \"ExportSpecifier\" ? (p.local === M ? AST_SymbolExport : AST_SymbolExportForeign)\n                        : p.type == \"FunctionExpression\" ? (p.id === M ? AST_SymbolLambda : AST_SymbolFunarg)\n                        : p.type == \"FunctionDeclaration\" ? (p.id === M ? AST_SymbolDefun : AST_SymbolFunarg)\n                        : p.type == \"ArrowFunctionExpression\" ? (p.params.includes(M)) ? AST_SymbolFunarg : AST_SymbolRef\n                        : p.type == \"ClassExpression\" ? (p.id === M ? AST_SymbolClass : AST_SymbolRef)\n                        : p.type == \"Property\" ? (p.key === M && p.computed || p.value === M ? AST_SymbolRef : AST_SymbolMethod)\n                        : p.type == \"PropertyDefinition\" || p.type === \"FieldDefinition\" ? (p.key === M && p.computed || p.value === M ? AST_SymbolRef : AST_SymbolClassProperty)\n                        : p.type == \"ClassDeclaration\" ? (p.id === M ? AST_SymbolDefClass : AST_SymbolRef)\n                        : p.type == \"MethodDefinition\" ? (p.computed ? AST_SymbolRef : AST_SymbolMethod)\n                        : p.type == \"CatchClause\" ? AST_SymbolCatch\n                        : p.type == \"BreakStatement\" || p.type == \"ContinueStatement\" ? AST_LabelRef\n                        : AST_SymbolRef)({\n                            start : my_start_token(M),\n                            end   : my_end_token(M),\n                            name  : M.name\n                        });\n        },\n\n        BigIntLiteral(M) {\n            return new AST_BigInt({\n                start : my_start_token(M),\n                end   : my_end_token(M),\n                value : M.value\n            });\n        },\n\n        EmptyStatement: function(M) {\n            return new AST_EmptyStatement({\n                start: my_start_token(M),\n                end: my_end_token(M)\n            });\n        },\n\n        BlockStatement: function(M) {\n            return new AST_BlockStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: M.body.map(from_moz)\n            });\n        },\n\n        IfStatement: function(M) {\n            return new AST_If({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                condition: from_moz(M.test),\n                body: from_moz(M.consequent),\n                alternative: from_moz(M.alternate)\n            });\n        },\n\n        LabeledStatement: function(M) {\n            return new AST_LabeledStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                label: from_moz(M.label),\n                body: from_moz(M.body)\n            });\n        },\n\n        BreakStatement: function(M) {\n            return new AST_Break({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                label: from_moz(M.label)\n            });\n        },\n\n        ContinueStatement: function(M) {\n            return new AST_Continue({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                label: from_moz(M.label)\n            });\n        },\n\n        WithStatement: function(M) {\n            return new AST_With({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.object),\n                body: from_moz(M.body)\n            });\n        },\n\n        SwitchStatement: function(M) {\n            return new AST_Switch({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.discriminant),\n                body: M.cases.map(from_moz)\n            });\n        },\n\n        ReturnStatement: function(M) {\n            return new AST_Return({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                value: from_moz(M.argument)\n            });\n        },\n\n        ThrowStatement: function(M) {\n            return new AST_Throw({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                value: from_moz(M.argument)\n            });\n        },\n\n        WhileStatement: function(M) {\n            return new AST_While({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                condition: from_moz(M.test),\n                body: from_moz(M.body)\n            });\n        },\n\n        DoWhileStatement: function(M) {\n            return new AST_Do({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                condition: from_moz(M.test),\n                body: from_moz(M.body)\n            });\n        },\n\n        ForStatement: function(M) {\n            return new AST_For({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                init: from_moz(M.init),\n                condition: from_moz(M.test),\n                step: from_moz(M.update),\n                body: from_moz(M.body)\n            });\n        },\n\n        ForInStatement: function(M) {\n            return new AST_ForIn({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                init: from_moz(M.left),\n                object: from_moz(M.right),\n                body: from_moz(M.body)\n            });\n        },\n\n        ForOfStatement: function(M) {\n            return new AST_ForOf({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                init: from_moz(M.left),\n                object: from_moz(M.right),\n                body: from_moz(M.body),\n                await: M.await\n            });\n        },\n\n        AwaitExpression: function(M) {\n            return new AST_Await({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n\n        YieldExpression: function(M) {\n            return new AST_Yield({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument),\n                is_star: M.delegate\n            });\n        },\n\n        DebuggerStatement: function(M) {\n            return new AST_Debugger({\n                start: my_start_token(M),\n                end: my_end_token(M)\n            });\n        },\n\n        VariableDeclarator: function(M) {\n            return new AST_VarDef({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                value: from_moz(M.init)\n            });\n        },\n\n        CatchClause: function(M) {\n            return new AST_Catch({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                argname: from_moz(M.param),\n                body: from_moz(M.body).body\n            });\n        },\n\n        ThisExpression: function(M) {\n            return new AST_This({\n                start: my_start_token(M),\n                end: my_end_token(M)\n            });\n        },\n\n        Super: function(M) {\n            return new AST_Super({\n                start: my_start_token(M),\n                end: my_end_token(M)\n            });\n        },\n\n        BinaryExpression: function(M) {\n            if (M.left.type === \"PrivateIdentifier\") {\n                return new AST_PrivateIn({\n                    start: my_start_token(M),\n                    end: my_end_token(M),\n                    key: new AST_SymbolPrivateProperty({\n                        start: my_start_token(M.left),\n                        end: my_end_token(M.left),\n                        name: M.left.name\n                    }),\n                    value: from_moz(M.right),\n                });\n            }\n            return new AST_Binary({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                operator: M.operator,\n                left: from_moz(M.left),\n                right: from_moz(M.right)\n            });\n        },\n\n        LogicalExpression: function(M) {\n            return new AST_Binary({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                operator: M.operator,\n                left: from_moz(M.left),\n                right: from_moz(M.right)\n            });\n        },\n\n        AssignmentExpression: function(M) {\n            return new AST_Assign({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                operator: M.operator,\n                left: from_moz(M.left),\n                right: from_moz(M.right)\n            });\n        },\n\n        ConditionalExpression: function(M) {\n            return new AST_Conditional({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                condition: from_moz(M.test),\n                consequent: from_moz(M.consequent),\n                alternative: from_moz(M.alternate)\n            });\n        },\n\n        NewExpression: function(M) {\n            return new AST_New({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.callee),\n                args: M.arguments.map(from_moz)\n            });\n        },\n\n        CallExpression: function(M) {\n            return new AST_Call({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.callee),\n                optional: M.optional,\n                args: M.arguments.map(from_moz)\n            });\n        }\n    };\n\n    MOZ_TO_ME.UpdateExpression =\n    MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {\n        var prefix = \"prefix\" in M ? M.prefix\n            : M.type == \"UnaryExpression\" ? true : false;\n        return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({\n            start      : my_start_token(M),\n            end        : my_end_token(M),\n            operator   : M.operator,\n            expression : from_moz(M.argument)\n        });\n    };\n\n    MOZ_TO_ME.ClassDeclaration =\n    MOZ_TO_ME.ClassExpression = function From_Moz_Class(M) {\n        return new (M.type === \"ClassDeclaration\" ? AST_DefClass : AST_ClassExpression)({\n            start    : my_start_token(M),\n            end      : my_end_token(M),\n            name     : from_moz(M.id),\n            extends  : from_moz(M.superClass),\n            properties: M.body.body.map(from_moz)\n        });\n    };\n\n    def_to_moz(AST_EmptyStatement, function To_Moz_EmptyStatement() {\n        return {\n            type: \"EmptyStatement\"\n        };\n    });\n    def_to_moz(AST_BlockStatement, function To_Moz_BlockStatement(M) {\n        return {\n            type: \"BlockStatement\",\n            body: M.body.map(to_moz)\n        };\n    });\n    def_to_moz(AST_If, function To_Moz_IfStatement(M) {\n        return {\n            type: \"IfStatement\",\n            test: to_moz(M.condition),\n            consequent: to_moz(M.body),\n            alternate: to_moz(M.alternative)\n        };\n    });\n    def_to_moz(AST_LabeledStatement, function To_Moz_LabeledStatement(M) {\n        return {\n            type: \"LabeledStatement\",\n            label: to_moz(M.label),\n            body: to_moz(M.body)\n        };\n    });\n    def_to_moz(AST_Break, function To_Moz_BreakStatement(M) {\n        return {\n            type: \"BreakStatement\",\n            label: to_moz(M.label)\n        };\n    });\n    def_to_moz(AST_Continue, function To_Moz_ContinueStatement(M) {\n        return {\n            type: \"ContinueStatement\",\n            label: to_moz(M.label)\n        };\n    });\n    def_to_moz(AST_With, function To_Moz_WithStatement(M) {\n        return {\n            type: \"WithStatement\",\n            object: to_moz(M.expression),\n            body: to_moz(M.body)\n        };\n    });\n    def_to_moz(AST_Switch, function To_Moz_SwitchStatement(M) {\n        return {\n            type: \"SwitchStatement\",\n            discriminant: to_moz(M.expression),\n            cases: M.body.map(to_moz)\n        };\n    });\n    def_to_moz(AST_Return, function To_Moz_ReturnStatement(M) {\n        return {\n            type: \"ReturnStatement\",\n            argument: to_moz(M.value)\n        };\n    });\n    def_to_moz(AST_Throw, function To_Moz_ThrowStatement(M) {\n        return {\n            type: \"ThrowStatement\",\n            argument: to_moz(M.value)\n        };\n    });\n    def_to_moz(AST_While, function To_Moz_WhileStatement(M) {\n        return {\n            type: \"WhileStatement\",\n            test: to_moz(M.condition),\n            body: to_moz(M.body)\n        };\n    });\n    def_to_moz(AST_Do, function To_Moz_DoWhileStatement(M) {\n        return {\n            type: \"DoWhileStatement\",\n            test: to_moz(M.condition),\n            body: to_moz(M.body)\n        };\n    });\n    def_to_moz(AST_For, function To_Moz_ForStatement(M) {\n        return {\n            type: \"ForStatement\",\n            init: to_moz(M.init),\n            test: to_moz(M.condition),\n            update: to_moz(M.step),\n            body: to_moz(M.body)\n        };\n    });\n    def_to_moz(AST_ForIn, function To_Moz_ForInStatement(M) {\n        return {\n            type: \"ForInStatement\",\n            left: to_moz(M.init),\n            right: to_moz(M.object),\n            body: to_moz(M.body)\n        };\n    });\n    def_to_moz(AST_ForOf, function To_Moz_ForOfStatement(M) {\n        return {\n            type: \"ForOfStatement\",\n            left: to_moz(M.init),\n            right: to_moz(M.object),\n            body: to_moz(M.body),\n            await: M.await\n        };\n    });\n    def_to_moz(AST_Await, function To_Moz_AwaitExpression(M) {\n        return {\n            type: \"AwaitExpression\",\n            argument: to_moz(M.expression)\n        };\n    });\n    def_to_moz(AST_Yield, function To_Moz_YieldExpression(M) {\n        return {\n            type: \"YieldExpression\",\n            argument: to_moz(M.expression),\n            delegate: M.is_star\n        };\n    });\n    def_to_moz(AST_Debugger, function To_Moz_DebuggerStatement() {\n        return {\n            type: \"DebuggerStatement\"\n        };\n    });\n    def_to_moz(AST_VarDef, function To_Moz_VariableDeclarator(M) {\n        return {\n            type: \"VariableDeclarator\",\n            id: to_moz(M.name),\n            init: to_moz(M.value)\n        };\n    });\n    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {\n        return {\n            type: \"CatchClause\",\n            param: to_moz(M.argname),\n            body: to_moz_block(M)\n        };\n    });\n\n    def_to_moz(AST_This, function To_Moz_ThisExpression() {\n        return {\n            type: \"ThisExpression\"\n        };\n    });\n    def_to_moz(AST_Super, function To_Moz_Super() {\n        return {\n            type: \"Super\"\n        };\n    });\n    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {\n        return {\n            type: \"BinaryExpression\",\n            operator: M.operator,\n            left: to_moz(M.left),\n            right: to_moz(M.right)\n        };\n    });\n    def_to_moz(AST_Binary, function To_Moz_LogicalExpression(M) {\n        return {\n            type: \"LogicalExpression\",\n            operator: M.operator,\n            left: to_moz(M.left),\n            right: to_moz(M.right)\n        };\n    });\n    def_to_moz(AST_Assign, function To_Moz_AssignmentExpression(M) {\n        return {\n            type: \"AssignmentExpression\",\n            operator: M.operator,\n            left: to_moz(M.left),\n            right: to_moz(M.right)\n        };\n    });\n    def_to_moz(AST_Conditional, function To_Moz_ConditionalExpression(M) {\n        return {\n            type: \"ConditionalExpression\",\n            test: to_moz(M.condition),\n            consequent: to_moz(M.consequent),\n            alternate: to_moz(M.alternative)\n        };\n    });\n    def_to_moz(AST_New, function To_Moz_NewExpression(M) {\n        return {\n            type: \"NewExpression\",\n            callee: to_moz(M.expression),\n            arguments: M.args.map(to_moz)\n        };\n    });\n    def_to_moz(AST_Call, function To_Moz_CallExpression(M) {\n        return {\n            type: \"CallExpression\",\n            callee: to_moz(M.expression),\n            optional: M.optional,\n            arguments: M.args.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Toplevel, function To_Moz_Program(M) {\n        return to_moz_scope(\"Program\", M);\n    });\n\n    def_to_moz(AST_Expansion, function To_Moz_Spread(M) {\n        return {\n            type: to_moz_in_destructuring() ? \"RestElement\" : \"SpreadElement\",\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_PrefixedTemplateString, function To_Moz_TaggedTemplateExpression(M) {\n        return {\n            type: \"TaggedTemplateExpression\",\n            tag: to_moz(M.prefix),\n            quasi: to_moz(M.template_string)\n        };\n    });\n\n    def_to_moz(AST_TemplateString, function To_Moz_TemplateLiteral(M) {\n        var quasis = [];\n        var expressions = [];\n        for (var i = 0; i < M.segments.length; i++) {\n            if (i % 2 !== 0) {\n                expressions.push(to_moz(M.segments[i]));\n            } else {\n                quasis.push({\n                    type: \"TemplateElement\",\n                    value: {\n                        raw: M.segments[i].raw,\n                        cooked: M.segments[i].value\n                    },\n                    tail: i === M.segments.length - 1\n                });\n            }\n        }\n        return {\n            type: \"TemplateLiteral\",\n            quasis: quasis,\n            expressions: expressions\n        };\n    });\n\n    def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {\n        return {\n            type: \"FunctionDeclaration\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            generator: M.is_generator,\n            async: M.async,\n            body: to_moz_scope(\"BlockStatement\", M)\n        };\n    });\n\n    def_to_moz(AST_Function, function To_Moz_FunctionExpression(M, parent) {\n        var is_generator = parent.is_generator !== undefined ?\n            parent.is_generator : M.is_generator;\n        return {\n            type: \"FunctionExpression\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            generator: is_generator,\n            async: M.async,\n            body: to_moz_scope(\"BlockStatement\", M)\n        };\n    });\n\n    def_to_moz(AST_Arrow, function To_Moz_ArrowFunctionExpression(M) {\n        var body = {\n            type: \"BlockStatement\",\n            body: M.body.map(to_moz)\n        };\n        return {\n            type: \"ArrowFunctionExpression\",\n            params: M.argnames.map(to_moz),\n            async: M.async,\n            body: body\n        };\n    });\n\n    def_to_moz(AST_Destructuring, function To_Moz_ObjectPattern(M) {\n        if (M.is_array) {\n            return {\n                type: \"ArrayPattern\",\n                elements: M.names.map(to_moz)\n            };\n        }\n        return {\n            type: \"ObjectPattern\",\n            properties: M.names.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Directive, function To_Moz_Directive(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: {\n                type: \"Literal\",\n                value: M.value,\n                raw: M.print_to_string()\n            },\n            directive: M.value\n        };\n    });\n\n    def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: to_moz(M.body)\n        };\n    });\n\n    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {\n        return {\n            type: \"SwitchCase\",\n            test: to_moz(M.expression),\n            consequent: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Try, function To_Moz_TryStatement(M) {\n        return {\n            type: \"TryStatement\",\n            block: to_moz_block(M.body),\n            handler: to_moz(M.bcatch),\n            guardedHandlers: [],\n            finalizer: to_moz(M.bfinally)\n        };\n    });\n\n    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {\n        return {\n            type: \"CatchClause\",\n            param: to_moz(M.argname),\n            guard: null,\n            body: to_moz_block(M)\n        };\n    });\n\n    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {\n        return {\n            type: \"VariableDeclaration\",\n            kind:\n                M instanceof AST_Const ? \"const\" :\n                M instanceof AST_Let ? \"let\" : \"var\",\n            declarations: M.definitions.map(to_moz)\n        };\n    });\n\n    const assert_clause_to_moz = assert_clause => {\n        const assertions = [];\n        if (assert_clause) {\n            for (const { key, value } of assert_clause.properties) {\n                const key_moz = is_basic_identifier_string(key)\n                    ? { type: \"Identifier\", name: key }\n                    : { type: \"Literal\", value: key, raw: JSON.stringify(key) };\n                assertions.push({\n                    type: \"ImportAttribute\",\n                    key: key_moz,\n                    value: to_moz(value)\n                });\n            }\n        }\n        return assertions;\n    };\n\n    def_to_moz(AST_Export, function To_Moz_ExportDeclaration(M) {\n        if (M.exported_names) {\n            var first_exported = M.exported_names[0];\n            var first_exported_name = first_exported.name;\n            if (first_exported_name.name === \"*\" && !first_exported_name.quote) {\n                var foreign_name = first_exported.foreign_name;\n                var exported = foreign_name.name === \"*\" && !foreign_name.quote\n                    ? null\n                    : to_moz(foreign_name);\n                return {\n                    type: \"ExportAllDeclaration\",\n                    source: to_moz(M.module_name),\n                    exported: exported,\n                    assertions: assert_clause_to_moz(M.assert_clause)\n                };\n            }\n            return {\n                type: \"ExportNamedDeclaration\",\n                specifiers: M.exported_names.map(function (name_mapping) {\n                    return {\n                        type: \"ExportSpecifier\",\n                        exported: to_moz(name_mapping.foreign_name),\n                        local: to_moz(name_mapping.name)\n                    };\n                }),\n                declaration: to_moz(M.exported_definition),\n                source: to_moz(M.module_name),\n                assertions: assert_clause_to_moz(M.assert_clause)\n            };\n        }\n        return {\n            type: M.is_default ? \"ExportDefaultDeclaration\" : \"ExportNamedDeclaration\",\n            declaration: to_moz(M.exported_value || M.exported_definition)\n        };\n    });\n\n    def_to_moz(AST_Import, function To_Moz_ImportDeclaration(M) {\n        var specifiers = [];\n        if (M.imported_name) {\n            specifiers.push({\n                type: \"ImportDefaultSpecifier\",\n                local: to_moz(M.imported_name)\n            });\n        }\n        if (M.imported_names) {\n            var first_imported_foreign_name = M.imported_names[0].foreign_name;\n            if (first_imported_foreign_name.name === \"*\" && !first_imported_foreign_name.quote) {\n                specifiers.push({\n                    type: \"ImportNamespaceSpecifier\",\n                    local: to_moz(M.imported_names[0].name)\n                });\n            } else {\n                M.imported_names.forEach(function(name_mapping) {\n                    specifiers.push({\n                        type: \"ImportSpecifier\",\n                        local: to_moz(name_mapping.name),\n                        imported: to_moz(name_mapping.foreign_name)\n                    });\n                });\n            }\n        }\n        return {\n            type: \"ImportDeclaration\",\n            specifiers: specifiers,\n            source: to_moz(M.module_name),\n            assertions: assert_clause_to_moz(M.assert_clause)\n        };\n    });\n\n    def_to_moz(AST_ImportMeta, function To_Moz_MetaProperty() {\n        return {\n            type: \"MetaProperty\",\n            meta: {\n                type: \"Identifier\",\n                name: \"import\"\n            },\n            property: {\n                type: \"Identifier\",\n                name: \"meta\"\n            }\n        };\n    });\n\n    def_to_moz(AST_Sequence, function To_Moz_SequenceExpression(M) {\n        return {\n            type: \"SequenceExpression\",\n            expressions: M.expressions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_DotHash, function To_Moz_PrivateMemberExpression(M) {\n        return {\n            type: \"MemberExpression\",\n            object: to_moz(M.expression),\n            computed: false,\n            property: {\n                type: \"PrivateIdentifier\",\n                name: M.property\n            },\n            optional: M.optional\n        };\n    });\n\n    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {\n        var isComputed = M instanceof AST_Sub;\n        return {\n            type: \"MemberExpression\",\n            object: to_moz(M.expression),\n            computed: isComputed,\n            property: isComputed ? to_moz(M.property) : {type: \"Identifier\", name: M.property},\n            optional: M.optional\n        };\n    });\n\n    def_to_moz(AST_Chain, function To_Moz_ChainExpression(M) {\n        return {\n            type: \"ChainExpression\",\n            expression: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_Unary, function To_Moz_Unary(M) {\n        return {\n            type: M.operator == \"++\" || M.operator == \"--\" ? \"UpdateExpression\" : \"UnaryExpression\",\n            operator: M.operator,\n            prefix: M instanceof AST_UnaryPrefix,\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {\n        if (M.operator == \"=\" && to_moz_in_destructuring()) {\n            return {\n                type: \"AssignmentPattern\",\n                left: to_moz(M.left),\n                right: to_moz(M.right)\n            };\n        }\n\n        const type = M.operator == \"&&\" || M.operator == \"||\" || M.operator === \"??\"\n            ? \"LogicalExpression\"\n            : \"BinaryExpression\";\n\n        return {\n            type,\n            left: to_moz(M.left),\n            operator: M.operator,\n            right: to_moz(M.right)\n        };\n    });\n\n    def_to_moz(AST_PrivateIn, function To_Moz_BinaryExpression_PrivateIn(M) {\n        return {\n            type: \"BinaryExpression\",\n            left: { type: \"PrivateIdentifier\", name: M.key.name },\n            operator: \"in\",\n            right: to_moz(M.value),\n        };\n    });\n\n    def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {\n        return {\n            type: \"ArrayExpression\",\n            elements: M.elements.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {\n        return {\n            type: \"ObjectExpression\",\n            properties: M.properties.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M, parent) {\n        var key = M.key instanceof AST_Node ? to_moz(M.key) : {\n            type: \"Identifier\",\n            value: M.key\n        };\n        if (typeof M.key === \"number\") {\n            key = {\n                type: \"Literal\",\n                value: Number(M.key)\n            };\n        }\n        if (typeof M.key === \"string\") {\n            key = {\n                type: \"Identifier\",\n                name: M.key\n            };\n        }\n        var kind;\n        var string_or_num = typeof M.key === \"string\" || typeof M.key === \"number\";\n        var computed = string_or_num ? false : !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef;\n        if (M instanceof AST_ObjectKeyVal) {\n            kind = \"init\";\n            computed = !string_or_num;\n        } else\n        if (M instanceof AST_ObjectGetter) {\n            kind = \"get\";\n        } else\n        if (M instanceof AST_ObjectSetter) {\n            kind = \"set\";\n        }\n        if (M instanceof AST_PrivateGetter || M instanceof AST_PrivateSetter) {\n            const kind = M instanceof AST_PrivateGetter ? \"get\" : \"set\";\n            return {\n                type: \"MethodDefinition\",\n                computed: false,\n                kind: kind,\n                static: M.static,\n                key: {\n                    type: \"PrivateIdentifier\",\n                    name: M.key.name\n                },\n                value: to_moz(M.value)\n            };\n        }\n        if (M instanceof AST_ClassPrivateProperty) {\n            return {\n                type: \"PropertyDefinition\",\n                key: {\n                    type: \"PrivateIdentifier\",\n                    name: M.key.name\n                },\n                value: to_moz(M.value),\n                computed: false,\n                static: M.static\n            };\n        }\n        if (M instanceof AST_ClassProperty) {\n            return {\n                type: \"PropertyDefinition\",\n                key,\n                value: to_moz(M.value),\n                computed,\n                static: M.static\n            };\n        }\n        if (parent instanceof AST_Class) {\n            return {\n                type: \"MethodDefinition\",\n                computed: computed,\n                kind: kind,\n                static: M.static,\n                key: to_moz(M.key),\n                value: to_moz(M.value)\n            };\n        }\n        return {\n            type: \"Property\",\n            computed: computed,\n            kind: kind,\n            key: key,\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_ConciseMethod, function To_Moz_MethodDefinition(M, parent) {\n        if (parent instanceof AST_Object) {\n            return {\n                type: \"Property\",\n                computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,\n                kind: \"init\",\n                method: true,\n                shorthand: false,\n                key: to_moz(M.key),\n                value: to_moz(M.value)\n            };\n        }\n\n        const key = M instanceof AST_PrivateMethod\n            ? {\n                type: \"PrivateIdentifier\",\n                name: M.key.name\n            }\n            : to_moz(M.key);\n\n        return {\n            type: \"MethodDefinition\",\n            kind: M.key === \"constructor\" ? \"constructor\" : \"method\",\n            key,\n            value: to_moz(M.value),\n            computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,\n            static: M.static,\n        };\n    });\n\n    def_to_moz(AST_Class, function To_Moz_Class(M) {\n        var type = M instanceof AST_ClassExpression ? \"ClassExpression\" : \"ClassDeclaration\";\n        return {\n            type: type,\n            superClass: to_moz(M.extends),\n            id: M.name ? to_moz(M.name) : null,\n            body: {\n                type: \"ClassBody\",\n                body: M.properties.map(to_moz)\n            }\n        };\n    });\n\n    def_to_moz(AST_ClassStaticBlock, function To_Moz_StaticBlock(M) {\n        return {\n            type: \"StaticBlock\",\n            body: M.body.map(to_moz),\n        };\n    });\n\n    def_to_moz(AST_NewTarget, function To_Moz_MetaProperty() {\n        return {\n            type: \"MetaProperty\",\n            meta: {\n                type: \"Identifier\",\n                name: \"new\"\n            },\n            property: {\n                type: \"Identifier\",\n                name: \"target\"\n            }\n        };\n    });\n\n    def_to_moz(AST_Symbol, function To_Moz_Identifier(M, parent) {\n        if (\n            (M instanceof AST_SymbolMethod && parent.quote) ||\n            ((\n                M instanceof AST_SymbolImportForeign ||\n                M instanceof AST_SymbolExportForeign ||\n                M instanceof AST_SymbolExport\n                ) && M.quote)\n         ) {\n            return {\n                type: \"Literal\",\n                value: M.name\n            };\n        }\n        var def = M.definition();\n        return {\n            type: \"Identifier\",\n            name: def ? def.mangled_name || def.name : M.name\n        };\n    });\n\n    def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {\n        const pattern = M.value.source;\n        const flags = M.value.flags;\n        return {\n            type: \"Literal\",\n            value: null,\n            raw: M.print_to_string(),\n            regex: { pattern, flags }\n        };\n    });\n\n    def_to_moz(AST_Constant, function To_Moz_Literal(M) {\n        var value = M.value;\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: M.raw || M.print_to_string()\n        };\n    });\n\n    def_to_moz(AST_Atom, function To_Moz_Atom(M) {\n        return {\n            type: \"Identifier\",\n            name: String(M.value)\n        };\n    });\n\n    def_to_moz(AST_BigInt, M => ({\n        type: \"BigIntLiteral\",\n        value: M.value\n    }));\n\n    AST_Boolean.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Null.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Hole.DEFMETHOD(\"to_mozilla_ast\", function To_Moz_ArrayHole() { return null; });\n\n    AST_Block.DEFMETHOD(\"to_mozilla_ast\", AST_BlockStatement.prototype.to_mozilla_ast);\n    AST_Lambda.DEFMETHOD(\"to_mozilla_ast\", AST_Function.prototype.to_mozilla_ast);\n\n    /* -----[ tools ]----- */\n\n    function my_start_token(moznode) {\n        var loc = moznode.loc, start = loc && loc.start;\n        var range = moznode.range;\n        return new AST_Token(\n            \"\",\n            \"\",\n            start && start.line || 0,\n            start && start.column || 0,\n            range ? range [0] : moznode.start,\n            false,\n            [],\n            [],\n            loc && loc.source,\n        );\n    }\n\n    function my_end_token(moznode) {\n        var loc = moznode.loc, end = loc && loc.end;\n        var range = moznode.range;\n        return new AST_Token(\n            \"\",\n            \"\",\n            end && end.line || 0,\n            end && end.column || 0,\n            range ? range [0] : moznode.end,\n            false,\n            [],\n            [],\n            loc && loc.source,\n        );\n    }\n\n    var FROM_MOZ_STACK = null;\n\n    function from_moz(node) {\n        FROM_MOZ_STACK.push(node);\n        var ret = node != null ? MOZ_TO_ME[node.type](node) : null;\n        FROM_MOZ_STACK.pop();\n        return ret;\n    }\n\n    AST_Node.from_mozilla_ast = function(node) {\n        var save_stack = FROM_MOZ_STACK;\n        FROM_MOZ_STACK = [];\n        var ast = from_moz(node);\n        FROM_MOZ_STACK = save_stack;\n        return ast;\n    };\n\n    function set_moz_loc(mynode, moznode) {\n        var start = mynode.start;\n        var end = mynode.end;\n        if (!(start && end)) {\n            return moznode;\n        }\n        if (start.pos != null && end.endpos != null) {\n            moznode.range = [start.pos, end.endpos];\n        }\n        if (start.line) {\n            moznode.loc = {\n                start: {line: start.line, column: start.col},\n                end: end.endline ? {line: end.endline, column: end.endcol} : null\n            };\n            if (start.file) {\n                moznode.loc.source = start.file;\n            }\n        }\n        return moznode;\n    }\n\n    function def_to_moz(mytype, handler) {\n        mytype.DEFMETHOD(\"to_mozilla_ast\", function(parent) {\n            return set_moz_loc(this, handler(this, parent));\n        });\n    }\n\n    var TO_MOZ_STACK = null;\n\n    function to_moz(node) {\n        if (TO_MOZ_STACK === null) { TO_MOZ_STACK = []; }\n        TO_MOZ_STACK.push(node);\n        var ast = node != null ? node.to_mozilla_ast(TO_MOZ_STACK[TO_MOZ_STACK.length - 2]) : null;\n        TO_MOZ_STACK.pop();\n        if (TO_MOZ_STACK.length === 0) { TO_MOZ_STACK = null; }\n        return ast;\n    }\n\n    function to_moz_in_destructuring() {\n        var i = TO_MOZ_STACK.length;\n        while (i--) {\n            if (TO_MOZ_STACK[i] instanceof AST_Destructuring) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function to_moz_block(node) {\n        return {\n            type: \"BlockStatement\",\n            body: node.body.map(to_moz)\n        };\n    }\n\n    function to_moz_scope(type, node) {\n        var body = node.body.map(to_moz);\n        if (node.body[0] instanceof AST_SimpleStatement && node.body[0].body instanceof AST_String) {\n            body.unshift(to_moz(new AST_EmptyStatement(node.body[0])));\n        }\n        return {\n            type: type,\n            body: body\n        };\n    }\n})();\n", "import {\n    AST_Binary,\n    AST_Conditional,\n    AST_Chain,\n    AST_Dot,\n    AST_Object,\n    AST_Sequence,\n    AST_Statement,\n    AST_Sub,\n    AST_UnaryPostfix,\n    AST_PrefixedTemplateString\n} from \"../ast.js\";\n\n// return true if the node at the top of the stack (that means the\n// innermost node in the current output) is lexically the first in\n// a statement.\nfunction first_in_statement(stack) {\n    let node = stack.parent(-1);\n    for (let i = 0, p; p = stack.parent(i); i++) {\n        if (p instanceof AST_Statement && p.body === node)\n            return true;\n        if ((p instanceof AST_Sequence && p.expressions[0] === node) ||\n            (p.TYPE === \"Call\" && p.expression === node) ||\n            (p instanceof AST_PrefixedTemplateString && p.prefix === node) ||\n            (p instanceof AST_Dot && p.expression === node) ||\n            (p instanceof AST_Sub && p.expression === node) ||\n            (p instanceof AST_Chain && p.expression === node) ||\n            (p instanceof AST_Conditional && p.condition === node) ||\n            (p instanceof AST_Binary && p.left === node) ||\n            (p instanceof AST_UnaryPostfix && p.expression === node)\n        ) {\n            node = p;\n        } else {\n            return false;\n        }\n    }\n}\n\n// Returns whether the leftmost item in the expression is an object\nfunction left_is_object(node) {\n    if (node instanceof AST_Object) return true;\n    if (node instanceof AST_Sequence) return left_is_object(node.expressions[0]);\n    if (node.TYPE === \"Call\") return left_is_object(node.expression);\n    if (node instanceof AST_PrefixedTemplateString) return left_is_object(node.prefix);\n    if (node instanceof AST_Dot || node instanceof AST_Sub) return left_is_object(node.expression);\n    if (node instanceof AST_Chain) return left_is_object(node.expression);\n    if (node instanceof AST_Conditional) return left_is_object(node.condition);\n    if (node instanceof AST_Binary) return left_is_object(node.left);\n    if (node instanceof AST_UnaryPostfix) return left_is_object(node.expression);\n    return false;\n}\n\nexport { first_in_statement, left_is_object };\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    defaults,\n    makePredicate,\n    noop,\n    regexp_source_fix,\n    sort_regexp_flags,\n    return_false,\n    return_true,\n} from \"./utils/index.js\";\nimport { first_in_statement, left_is_object } from \"./utils/first_in_statement.js\";\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ClassPrivateProperty,\n    AST_ClassProperty,\n    AST_ClassStaticBlock,\n    AST_ConciseMethod,\n    AST_PrivateGetter,\n    AST_PrivateMethod,\n    AST_SymbolPrivateProperty,\n    AST_PrivateSetter,\n    AST_PrivateIn,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DotHash,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolClassProperty,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Toplevel,\n    AST_Try,\n    AST_TryBlock,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeWalker,\n    walk,\n    walk_abort\n} from \"./ast.js\";\nimport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_basic_identifier_string,\n    is_identifier_string,\n    PRECEDENCE,\n    ALL_RESERVED_WORDS,\n} from \"./parse.js\";\n\nconst EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\nconst CODE_LINE_BREAK = 10;\nconst CODE_SPACE = 32;\n\nconst r_annotation = /[@#]__(PURE|INLINE|NOINLINE)__/g;\n\nfunction is_some_comments(comment) {\n    // multiline comment\n    return (\n        (comment.type === \"comment2\" || comment.type === \"comment1\")\n        && /@preserve|@copyright|@lic|@cc_on|^\\**!/i.test(comment.value)\n    );\n}\n\nclass Rope {\n    constructor() {\n        this.committed = \"\";\n        this.current = \"\";\n    }\n\n    append(str) {\n        this.current += str;\n    }\n\n    insertAt(char, index) {\n        const { committed, current } = this;\n        if (index < committed.length) {\n            this.committed = committed.slice(0, index) + char + committed.slice(index);\n        } else if (index === committed.length) {\n            this.committed += char;\n        } else {\n            index -= committed.length;\n            this.committed += current.slice(0, index) + char;\n            this.current = current.slice(index);\n        }\n    }\n\n    charAt(index) {\n        const { committed } = this;\n        if (index < committed.length) return committed[index];\n        return this.current[index - committed.length];\n    }\n\n    curLength() {\n        return this.current.length;\n    }\n\n    length() {\n        return this.committed.length + this.current.length;\n    }\n\n    toString() {\n        return this.committed + this.current;\n    }\n}\n\nfunction OutputStream(options) {\n\n    var readonly = !options;\n    options = defaults(options, {\n        ascii_only           : false,\n        beautify             : false,\n        braces               : false,\n        comments             : \"some\",\n        ecma                 : 5,\n        ie8                  : false,\n        indent_level         : 4,\n        indent_start         : 0,\n        inline_script        : true,\n        keep_numbers         : false,\n        keep_quoted_props    : false,\n        max_line_len         : false,\n        preamble             : null,\n        preserve_annotations : false,\n        quote_keys           : false,\n        quote_style          : 0,\n        safari10             : false,\n        semicolons           : true,\n        shebang              : true,\n        shorthand            : undefined,\n        source_map           : null,\n        webkit               : false,\n        width                : 80,\n        wrap_iife            : false,\n        wrap_func_args       : true,\n\n        _destroy_ast         : false\n    }, true);\n\n    if (options.shorthand === undefined)\n        options.shorthand = options.ecma > 5;\n\n    // Convert comment option to RegExp if necessary and set up comments filter\n    var comment_filter = return_false; // Default case, throw all comments away\n    if (options.comments) {\n        let comments = options.comments;\n        if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n            var regex_pos = options.comments.lastIndexOf(\"/\");\n            comments = new RegExp(\n                options.comments.substr(1, regex_pos - 1),\n                options.comments.substr(regex_pos + 1)\n            );\n        }\n        if (comments instanceof RegExp) {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments.test(comment.value);\n            };\n        } else if (typeof comments === \"function\") {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments(this, comment);\n            };\n        } else if (comments === \"some\") {\n            comment_filter = is_some_comments;\n        } else { // NOTE includes \"all\" option\n            comment_filter = return_true;\n        }\n    }\n\n    var indentation = 0;\n    var current_col = 0;\n    var current_line = 1;\n    var current_pos = 0;\n    var OUTPUT = new Rope();\n    let printed_comments = new Set();\n\n    var to_utf8 = options.ascii_only ? function(str, identifier = false, regexp = false) {\n        if (options.ecma >= 2015 && !options.safari10 && !regexp) {\n            str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function(ch) {\n                var code = get_full_char_code(ch, 0).toString(16);\n                return \"\\\\u{\" + code + \"}\";\n            });\n        }\n        return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n            var code = ch.charCodeAt(0).toString(16);\n            if (code.length <= 2 && !identifier) {\n                while (code.length < 2) code = \"0\" + code;\n                return \"\\\\x\" + code;\n            } else {\n                while (code.length < 4) code = \"0\" + code;\n                return \"\\\\u\" + code;\n            }\n        });\n    } : function(str) {\n        return str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]|([\\ud800-\\udbff]|[\\udc00-\\udfff])/g, function(match, lone) {\n            if (lone) {\n                return \"\\\\u\" + lone.charCodeAt(0).toString(16);\n            }\n            return match;\n        });\n    };\n\n    function make_string(str, quote) {\n        var dq = 0, sq = 0;\n        str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,\n          function(s, i) {\n            switch (s) {\n              case '\"': ++dq; return '\"';\n              case \"'\": ++sq; return \"'\";\n              case \"\\\\\": return \"\\\\\\\\\";\n              case \"\\n\": return \"\\\\n\";\n              case \"\\r\": return \"\\\\r\";\n              case \"\\t\": return \"\\\\t\";\n              case \"\\b\": return \"\\\\b\";\n              case \"\\f\": return \"\\\\f\";\n              case \"\\x0B\": return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n              case \"\\u2028\": return \"\\\\u2028\";\n              case \"\\u2029\": return \"\\\\u2029\";\n              case \"\\ufeff\": return \"\\\\ufeff\";\n              case \"\\0\":\n                  return /[0-9]/.test(get_full_char(str, i+1)) ? \"\\\\x00\" : \"\\\\0\";\n            }\n            return s;\n        });\n        function quote_single() {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n        function quote_double() {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n        function quote_template() {\n            return \"`\" + str.replace(/`/g, \"\\\\`\") + \"`\";\n        }\n        str = to_utf8(str);\n        if (quote === \"`\") return quote_template();\n        switch (options.quote_style) {\n          case 1:\n            return quote_single();\n          case 2:\n            return quote_double();\n          case 3:\n            return quote == \"'\" ? quote_single() : quote_double();\n          default:\n            return dq > sq ? quote_single() : quote_double();\n        }\n    }\n\n    function encode_string(str, quote) {\n        var ret = make_string(str, quote);\n        if (options.inline_script) {\n            ret = ret.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n            ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n            ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n        }\n        return ret;\n    }\n\n    function make_name(name) {\n        name = name.toString();\n        name = to_utf8(name, true);\n        return name;\n    }\n\n    function make_indent(back) {\n        return \" \".repeat(options.indent_start + indentation - back * options.indent_level);\n    }\n\n    /* -----[ beautification/minification ]----- */\n\n    var has_parens = false;\n    var might_need_space = false;\n    var might_need_semicolon = false;\n    var might_add_newline = 0;\n    var need_newline_indented = false;\n    var need_space = false;\n    var newline_insert = -1;\n    var last = \"\";\n    var mapping_token, mapping_name, mappings = options.source_map && [];\n\n    var do_add_mapping = mappings ? function() {\n        mappings.forEach(function(mapping) {\n            try {\n                let { name, token } = mapping;\n                if (token.type == \"name\" || token.type === \"privatename\") {\n                    name = token.value;\n                } else if (name instanceof AST_Symbol) {\n                    name = token.type === \"string\" ? token.value : name.name;\n                }\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    is_basic_identifier_string(name) ? name : undefined\n                );\n            } catch(ex) {\n                // Ignore bad mapping\n            }\n        });\n        mappings = [];\n    } : noop;\n\n    var ensure_line_len = options.max_line_len ? function() {\n        if (current_col > options.max_line_len) {\n            if (might_add_newline) {\n                OUTPUT.insertAt(\"\\n\", might_add_newline);\n                const curLength = OUTPUT.curLength();\n                if (mappings) {\n                    var delta = curLength - current_col;\n                    mappings.forEach(function(mapping) {\n                        mapping.line++;\n                        mapping.col += delta;\n                    });\n                }\n                current_line++;\n                current_pos++;\n                current_col = curLength;\n            }\n        }\n        if (might_add_newline) {\n            might_add_newline = 0;\n            do_add_mapping();\n        }\n    } : noop;\n\n    var requireSemicolonChars = makePredicate(\"( [ + * / - , . `\");\n\n    function print(str) {\n        str = String(str);\n        var ch = get_full_char(str, 0);\n        if (need_newline_indented && ch) {\n            need_newline_indented = false;\n            if (ch !== \"\\n\") {\n                print(\"\\n\");\n                indent();\n            }\n        }\n        if (need_space && ch) {\n            need_space = false;\n            if (!/[\\s;})]/.test(ch)) {\n                space();\n            }\n        }\n        newline_insert = -1;\n        var prev = last.charAt(last.length - 1);\n        if (might_need_semicolon) {\n            might_need_semicolon = false;\n\n            if (prev === \":\" && ch === \"}\" || (!ch || !\";}\".includes(ch)) && prev !== \";\") {\n                if (options.semicolons || requireSemicolonChars.has(ch)) {\n                    OUTPUT.append(\";\");\n                    current_col++;\n                    current_pos++;\n                } else {\n                    ensure_line_len();\n                    if (current_col > 0) {\n                        OUTPUT.append(\"\\n\");\n                        current_pos++;\n                        current_line++;\n                        current_col = 0;\n                    }\n\n                    if (/^\\s+$/.test(str)) {\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        might_need_semicolon = true;\n                    }\n                }\n\n                if (!options.beautify)\n                    might_need_space = false;\n            }\n        }\n\n        if (might_need_space) {\n            if ((is_identifier_char(prev)\n                    && (is_identifier_char(ch) || ch == \"\\\\\"))\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last)\n            ) {\n                OUTPUT.append(\" \");\n                current_col++;\n                current_pos++;\n            }\n            might_need_space = false;\n        }\n\n        if (mapping_token) {\n            mappings.push({\n                token: mapping_token,\n                name: mapping_name,\n                line: current_line,\n                col: current_col\n            });\n            mapping_token = false;\n            if (!might_add_newline) do_add_mapping();\n        }\n\n        OUTPUT.append(str);\n        has_parens = str[str.length - 1] == \"(\";\n        current_pos += str.length;\n        var a = str.split(/\\r?\\n/), n = a.length - 1;\n        current_line += n;\n        current_col += a[0].length;\n        if (n > 0) {\n            ensure_line_len();\n            current_col = a[n].length;\n        }\n        last = str;\n    }\n\n    var star = function() {\n        print(\"*\");\n    };\n\n    var space = options.beautify ? function() {\n        print(\" \");\n    } : function() {\n        might_need_space = true;\n    };\n\n    var indent = options.beautify ? function(half) {\n        if (options.beautify) {\n            print(make_indent(half ? 0.5 : 0));\n        }\n    } : noop;\n\n    var with_indent = options.beautify ? function(col, cont) {\n        if (col === true) col = next_indent();\n        var save_indentation = indentation;\n        indentation = col;\n        var ret = cont();\n        indentation = save_indentation;\n        return ret;\n    } : function(col, cont) { return cont(); };\n\n    var newline = options.beautify ? function() {\n        if (newline_insert < 0) return print(\"\\n\");\n        if (OUTPUT.charAt(newline_insert) != \"\\n\") {\n            OUTPUT.insertAt(\"\\n\", newline_insert);\n            current_pos++;\n            current_line++;\n        }\n        newline_insert++;\n    } : options.max_line_len ? function() {\n        ensure_line_len();\n        might_add_newline = OUTPUT.length();\n    } : noop;\n\n    var semicolon = options.beautify ? function() {\n        print(\";\");\n    } : function() {\n        might_need_semicolon = true;\n    };\n\n    function force_semicolon() {\n        might_need_semicolon = false;\n        print(\";\");\n    }\n\n    function next_indent() {\n        return indentation + options.indent_level;\n    }\n\n    function with_block(cont) {\n        var ret;\n        print(\"{\");\n        newline();\n        with_indent(next_indent(), function() {\n            ret = cont();\n        });\n        indent();\n        print(\"}\");\n        return ret;\n    }\n\n    function with_parens(cont) {\n        print(\"(\");\n        //XXX: still nice to have that for argument lists\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\")\");\n        return ret;\n    }\n\n    function with_square(cont) {\n        print(\"[\");\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\"]\");\n        return ret;\n    }\n\n    function comma() {\n        print(\",\");\n        space();\n    }\n\n    function colon() {\n        print(\":\");\n        space();\n    }\n\n    var add_mapping = mappings ? function(token, name) {\n        mapping_token = token;\n        mapping_name = name;\n    } : noop;\n\n    function get() {\n        if (might_add_newline) {\n            ensure_line_len();\n        }\n        return OUTPUT.toString();\n    }\n\n    function has_nlb() {\n        const output = OUTPUT.toString();\n        let n = output.length - 1;\n        while (n >= 0) {\n            const code = output.charCodeAt(n);\n            if (code === CODE_LINE_BREAK) {\n                return true;\n            }\n\n            if (code !== CODE_SPACE) {\n                return false;\n            }\n            n--;\n        }\n        return true;\n    }\n\n    function filter_comment(comment) {\n        if (!options.preserve_annotations) {\n            comment = comment.replace(r_annotation, \" \");\n        }\n        if (/^\\s*$/.test(comment)) {\n            return \"\";\n        }\n        return comment.replace(/(<\\s*\\/\\s*)(script)/i, \"<\\\\/$2\");\n    }\n\n    function prepend_comments(node) {\n        var self = this;\n        var start = node.start;\n        if (!start) return;\n        var printed_comments = self.printed_comments;\n\n        // There cannot be a newline between return and its value.\n        const return_with_value = node instanceof AST_Exit && node.value;\n\n        if (\n            start.comments_before\n            && printed_comments.has(start.comments_before)\n        ) {\n            if (return_with_value) {\n                start.comments_before = [];\n            } else {\n                return;\n            }\n        }\n\n        var comments = start.comments_before;\n        if (!comments) {\n            comments = start.comments_before = [];\n        }\n        printed_comments.add(comments);\n\n        if (return_with_value) {\n            var tw = new TreeWalker(function(node) {\n                var parent = tw.parent();\n                if (parent instanceof AST_Exit\n                    || parent instanceof AST_Binary && parent.left === node\n                    || parent.TYPE == \"Call\" && parent.expression === node\n                    || parent instanceof AST_Conditional && parent.condition === node\n                    || parent instanceof AST_Dot && parent.expression === node\n                    || parent instanceof AST_Sequence && parent.expressions[0] === node\n                    || parent instanceof AST_Sub && parent.expression === node\n                    || parent instanceof AST_UnaryPostfix) {\n                    if (!node.start) return;\n                    var text = node.start.comments_before;\n                    if (text && !printed_comments.has(text)) {\n                        printed_comments.add(text);\n                        comments = comments.concat(text);\n                    }\n                } else {\n                    return true;\n                }\n            });\n            tw.push(node);\n            node.value.walk(tw);\n        }\n\n        if (current_pos == 0) {\n            if (comments.length > 0 && options.shebang && comments[0].type === \"comment5\"\n                && !printed_comments.has(comments[0])) {\n                print(\"#!\" + comments.shift().value + \"\\n\");\n                indent();\n            }\n            var preamble = options.preamble;\n            if (preamble) {\n                print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n            }\n        }\n\n        comments = comments.filter(comment_filter, node).filter(c => !printed_comments.has(c));\n        if (comments.length == 0) return;\n        var last_nlb = has_nlb();\n        comments.forEach(function(c, i) {\n            printed_comments.add(c);\n            if (!last_nlb) {\n                if (c.nlb) {\n                    print(\"\\n\");\n                    indent();\n                    last_nlb = true;\n                } else if (i > 0) {\n                    space();\n                }\n            }\n\n            if (/comment[134]/.test(c.type)) {\n                var value = filter_comment(c.value);\n                if (value) {\n                    print(\"//\" + value + \"\\n\");\n                    indent();\n                }\n                last_nlb = true;\n            } else if (c.type == \"comment2\") {\n                var value = filter_comment(c.value);\n                if (value) {\n                    print(\"/*\" + value + \"*/\");\n                }\n                last_nlb = false;\n            }\n        });\n        if (!last_nlb) {\n            if (start.nlb) {\n                print(\"\\n\");\n                indent();\n            } else {\n                space();\n            }\n        }\n    }\n\n    function append_comments(node, tail) {\n        var self = this;\n        var token = node.end;\n        if (!token) return;\n        var printed_comments = self.printed_comments;\n        var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n        if (!comments || printed_comments.has(comments)) return;\n        if (!(node instanceof AST_Statement || comments.every((c) =>\n            !/comment[134]/.test(c.type)\n        ))) return;\n        printed_comments.add(comments);\n        var insert = OUTPUT.length();\n        comments.filter(comment_filter, node).forEach(function(c, i) {\n            if (printed_comments.has(c)) return;\n            printed_comments.add(c);\n            need_space = false;\n            if (need_newline_indented) {\n                print(\"\\n\");\n                indent();\n                need_newline_indented = false;\n            } else if (c.nlb && (i > 0 || !has_nlb())) {\n                print(\"\\n\");\n                indent();\n            } else if (i > 0 || !tail) {\n                space();\n            }\n            if (/comment[134]/.test(c.type)) {\n                const value = filter_comment(c.value);\n                if (value) {\n                    print(\"//\" + value);\n                }\n                need_newline_indented = true;\n            } else if (c.type == \"comment2\") {\n                const value = filter_comment(c.value);\n                if (value) {\n                    print(\"/*\" + value + \"*/\");\n                }\n                need_space = true;\n            }\n        });\n        if (OUTPUT.length() > insert) newline_insert = insert;\n    }\n\n    /**\n     * When output.option(\"_destroy_ast\") is enabled, destroy the function.\n     * Call this after printing it.\n     */\n    const gc_scope =\n      options[\"_destroy_ast\"]\n        ? function gc_scope(scope) {\n            scope.body.length = 0;\n            scope.argnames.length = 0;\n        }\n        : noop;\n\n    var stack = [];\n    return {\n        get             : get,\n        toString        : get,\n        indent          : indent,\n        in_directive    : false,\n        use_asm         : null,\n        active_scope    : null,\n        indentation     : function() { return indentation; },\n        current_width   : function() { return current_col - indentation; },\n        should_break    : function() { return options.width && this.current_width() >= options.width; },\n        has_parens      : function() { return has_parens; },\n        newline         : newline,\n        print           : print,\n        star            : star,\n        space           : space,\n        comma           : comma,\n        colon           : colon,\n        last            : function() { return last; },\n        semicolon       : semicolon,\n        force_semicolon : force_semicolon,\n        to_utf8         : to_utf8,\n        print_name      : function(name) { print(make_name(name)); },\n        print_string    : function(str, quote, escape_directive) {\n            var encoded = encode_string(str, quote);\n            if (escape_directive === true && !encoded.includes(\"\\\\\")) {\n                // Insert semicolons to break directive prologue\n                if (!EXPECT_DIRECTIVE.test(OUTPUT.toString())) {\n                    force_semicolon();\n                }\n                force_semicolon();\n            }\n            print(encoded);\n        },\n        print_template_string_chars: function(str) {\n            var encoded = encode_string(str, \"`\").replace(/\\${/g, \"\\\\${\");\n            return print(encoded.substr(1, encoded.length - 2));\n        },\n        encode_string   : encode_string,\n        next_indent     : next_indent,\n        with_indent     : with_indent,\n        with_block      : with_block,\n        with_parens     : with_parens,\n        with_square     : with_square,\n        add_mapping     : add_mapping,\n        option          : function(opt) { return options[opt]; },\n        gc_scope,\n        printed_comments: printed_comments,\n        prepend_comments: readonly ? noop : prepend_comments,\n        append_comments : readonly || comment_filter === return_false ? noop : append_comments,\n        line            : function() { return current_line; },\n        col             : function() { return current_col; },\n        pos             : function() { return current_pos; },\n        push_node       : function(node) { stack.push(node); },\n        pop_node        : function() { return stack.pop(); },\n        parent          : function(n) {\n            return stack[stack.length - 2 - (n || 0)];\n        }\n    };\n\n}\n\n/* -----[ code generators ]----- */\n\n(function() {\n\n    /* -----[ utils ]----- */\n\n    function DEFPRINT(nodetype, generator) {\n        nodetype.DEFMETHOD(\"_codegen\", generator);\n    }\n\n    AST_Node.DEFMETHOD(\"print\", function(output, force_parens) {\n        var self = this, generator = self._codegen;\n        if (self instanceof AST_Scope) {\n            output.active_scope = self;\n        } else if (!output.use_asm && self instanceof AST_Directive && self.value == \"use asm\") {\n            output.use_asm = output.active_scope;\n        }\n        function doit() {\n            output.prepend_comments(self);\n            self.add_source_map(output);\n            generator(self, output);\n            output.append_comments(self);\n        }\n        output.push_node(self);\n        if (force_parens || self.needs_parens(output)) {\n            output.with_parens(doit);\n        } else {\n            doit();\n        }\n        output.pop_node();\n        if (self === output.use_asm) {\n            output.use_asm = null;\n        }\n    });\n    AST_Node.DEFMETHOD(\"_print\", AST_Node.prototype.print);\n\n    AST_Node.DEFMETHOD(\"print_to_string\", function(options) {\n        var output = OutputStream(options);\n        this.print(output);\n        return output.get();\n    });\n\n    /* -----[ PARENTHESES ]----- */\n\n    function PARENS(nodetype, func) {\n        if (Array.isArray(nodetype)) {\n            nodetype.forEach(function(nodetype) {\n                PARENS(nodetype, func);\n            });\n        } else {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n    }\n\n    PARENS(AST_Node, return_false);\n\n    // a function expression needs parens around it when it's provably\n    // the first token to appear in a statement.\n    PARENS(AST_Function, function(output) {\n        if (!output.has_parens() && first_in_statement(output)) {\n            return true;\n        }\n\n        if (output.option(\"webkit\")) {\n            var p = output.parent();\n            if (p instanceof AST_PropAccess && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_iife\")) {\n            var p = output.parent();\n            if (p instanceof AST_Call && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_func_args\")) {\n            var p = output.parent();\n            if (p instanceof AST_Call && p.args.includes(this)) {\n                return true;\n            }\n        }\n\n        return false;\n    });\n\n    PARENS(AST_Arrow, function(output) {\n        var p = output.parent();\n\n        if (\n            output.option(\"wrap_func_args\")\n            && p instanceof AST_Call\n            && p.args.includes(this)\n        ) {\n            return true;\n        }\n        return p instanceof AST_PropAccess && p.expression === this;\n    });\n\n    // same goes for an object literal (as in AST_Function), because\n    // otherwise {...} would be interpreted as a block of code.\n    PARENS(AST_Object, function(output) {\n        return !output.has_parens() && first_in_statement(output);\n    });\n\n    PARENS(AST_ClassExpression, first_in_statement);\n\n    PARENS(AST_Unary, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || p instanceof AST_Binary\n                && p.operator === \"**\"\n                && this instanceof AST_UnaryPrefix\n                && p.left === this\n                && this.operator !== \"++\"\n                && this.operator !== \"--\";\n    });\n\n    PARENS(AST_Await, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || p instanceof AST_Binary && p.operator === \"**\" && p.left === this\n            || output.option(\"safari10\") && p instanceof AST_UnaryPrefix;\n    });\n\n    PARENS(AST_Sequence, function(output) {\n        var p = output.parent();\n        return p instanceof AST_Call                          // (foo, bar)() or foo(1, (2, 3), 4)\n            || p instanceof AST_Unary                         // !(foo, bar, baz)\n            || p instanceof AST_Binary                        // 1 + (2, 3) + 4 ==> 8\n            || p instanceof AST_VarDef                        // var a = (1, 2), b = a + a; ==> b == 4\n            || p instanceof AST_PropAccess                    // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n            || p instanceof AST_Array                         // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n            || p instanceof AST_ObjectProperty                // { foo: (1, 2) }.foo ==> 2\n            || p instanceof AST_Conditional                   /* (false, true) ? (a = 10, b = 20) : (c = 30)\n                                                               * ==> 20 (side effect, set a := 10 and b := 20) */\n            || p instanceof AST_Arrow                         // x => (x, x)\n            || p instanceof AST_DefaultAssign                 // x => (x = (0, function(){}))\n            || p instanceof AST_Expansion                     // [...(a, b)]\n            || p instanceof AST_ForOf && this === p.object    // for (e of (foo, bar)) {}\n            || p instanceof AST_Yield                         // yield (foo, bar)\n            || p instanceof AST_Export                        // export default (foo, bar)\n        ;\n    });\n\n    PARENS(AST_Binary, function(output) {\n        var p = output.parent();\n        // (foo && bar)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // typeof (foo && bar)\n        if (p instanceof AST_Unary)\n            return true;\n        // (foo && bar)[\"prop\"], (foo && bar).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // this deals with precedence: 3 * (2 + 1)\n        if (p instanceof AST_Binary) {\n            const po = p.operator;\n            const so = this.operator;\n\n            if (so === \"??\" && (po === \"||\" || po === \"&&\")) {\n                return true;\n            }\n\n            if (po === \"??\" && (so === \"||\" || so === \"&&\")) {\n                return true;\n            }\n\n            const pp = PRECEDENCE[po];\n            const sp = PRECEDENCE[so];\n            if (pp > sp\n                || (pp == sp\n                    && (this === p.right || po == \"**\"))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_Yield, function(output) {\n        var p = output.parent();\n        // (yield 1) + (yield 2)\n        // a = yield 3\n        if (p instanceof AST_Binary && p.operator !== \"=\")\n            return true;\n        // (yield 1)()\n        // new (yield 1)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (yield 1) ? yield 2 : yield 3\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // -(yield 4)\n        if (p instanceof AST_Unary)\n            return true;\n        // (yield x).foo\n        // (yield x)['foo']\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n    });\n\n    PARENS(AST_PropAccess, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_New && p.expression === this) {\n            // i.e. new (foo.bar().baz)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            return walk(this, node => {\n                if (node instanceof AST_Scope) return true;\n                if (node instanceof AST_Call) {\n                    return walk_abort;  // makes walk() return true.\n                }\n            });\n        }\n    });\n\n    PARENS(AST_Call, function(output) {\n        var p = output.parent(), p1;\n        if (p instanceof AST_New && p.expression === this\n            || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function)\n            return true;\n\n        // workaround for Safari bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=123506\n        return this.expression instanceof AST_Function\n            && p instanceof AST_PropAccess\n            && p.expression === this\n            && (p1 = output.parent(1)) instanceof AST_Assign\n            && p1.left === p;\n    });\n\n    PARENS(AST_New, function(output) {\n        var p = output.parent();\n        if (this.args.length === 0\n            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n                || p instanceof AST_Call && p.expression === this\n                || p instanceof AST_PrefixedTemplateString && p.prefix === this)) // (new foo)(bar)\n            return true;\n    });\n\n    PARENS(AST_Number, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value < 0 || /^0/.test(make_num(value))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_BigInt, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value.startsWith(\"-\")) {\n                return true;\n            }\n        }\n    });\n\n    PARENS([ AST_Assign, AST_Conditional ], function(output) {\n        var p = output.parent();\n        // !(a = false) → true\n        if (p instanceof AST_Unary)\n            return true;\n        // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n        if (p instanceof AST_Binary && !(p instanceof AST_Assign))\n            return true;\n        // (a = func)() —or— new (a = Object)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (a = foo) ? bar : baz\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // (a = foo)[\"prop\"] —or— (a = foo).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // ({a, b} = {a: 1, b: 2}), a destructuring assignment\n        if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false)\n            return true;\n    });\n\n    /* -----[ PRINTERS ]----- */\n\n    DEFPRINT(AST_Directive, function(self, output) {\n        output.print_string(self.value, self.quote);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_Expansion, function (self, output) {\n        output.print(\"...\");\n        self.expression.print(output);\n    });\n\n    DEFPRINT(AST_Destructuring, function (self, output) {\n        output.print(self.is_array ? \"[\" : \"{\");\n        var len = self.names.length;\n        self.names.forEach(function (name, i) {\n            if (i > 0) output.comma();\n            name.print(output);\n            // If the final element is a hole, we need to make sure it\n            // doesn't look like a trailing comma, by inserting an actual\n            // trailing comma.\n            if (i == len - 1 && name instanceof AST_Hole) output.comma();\n        });\n        output.print(self.is_array ? \"]\" : \"}\");\n    });\n\n    DEFPRINT(AST_Debugger, function(self, output) {\n        output.print(\"debugger\");\n        output.semicolon();\n    });\n\n    /* -----[ statements ]----- */\n\n    function display_body(body, is_toplevel, output, allow_directives) {\n        var last = body.length - 1;\n        output.in_directive = allow_directives;\n        body.forEach(function(stmt, i) {\n            if (output.in_directive === true && !(stmt instanceof AST_Directive ||\n                stmt instanceof AST_EmptyStatement ||\n                (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)\n            )) {\n                output.in_directive = false;\n            }\n            if (!(stmt instanceof AST_EmptyStatement)) {\n                output.indent();\n                stmt.print(output);\n                if (!(i == last && is_toplevel)) {\n                    output.newline();\n                    if (is_toplevel) output.newline();\n                }\n            }\n            if (output.in_directive === true &&\n                stmt instanceof AST_SimpleStatement &&\n                stmt.body instanceof AST_String\n            ) {\n                output.in_directive = false;\n            }\n        });\n        output.in_directive = false;\n    }\n\n    AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function(output) {\n        print_maybe_braced_body(this.body, output);\n    });\n\n    DEFPRINT(AST_Statement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Toplevel, function(self, output) {\n        display_body(self.body, true, output, true);\n        output.print(\"\");\n    });\n    DEFPRINT(AST_LabeledStatement, function(self, output) {\n        self.label.print(output);\n        output.colon();\n        self.body.print(output);\n    });\n    DEFPRINT(AST_SimpleStatement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    function print_braced_empty(self, output) {\n        output.print(\"{\");\n        output.with_indent(output.next_indent(), function() {\n            output.append_comments(self, true);\n        });\n        output.add_mapping(self.end);\n        output.print(\"}\");\n    }\n    function print_braced(self, output, allow_directives) {\n        if (self.body.length > 0) {\n            output.with_block(function() {\n                display_body(self.body, false, output, allow_directives);\n                output.add_mapping(self.end);\n            });\n        } else print_braced_empty(self, output);\n    }\n    DEFPRINT(AST_BlockStatement, function(self, output) {\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_EmptyStatement, function(self, output) {\n        output.semicolon();\n    });\n    DEFPRINT(AST_Do, function(self, output) {\n        output.print(\"do\");\n        output.space();\n        make_block(self.body, output);\n        output.space();\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.semicolon();\n    });\n    DEFPRINT(AST_While, function(self, output) {\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_For, function(self, output) {\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function() {\n            if (self.init) {\n                if (self.init instanceof AST_Definitions) {\n                    self.init.print(output);\n                } else {\n                    parenthesize_for_noin(self.init, output, true);\n                }\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.condition) {\n                self.condition.print(output);\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.step) {\n                self.step.print(output);\n            }\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_ForIn, function(self, output) {\n        output.print(\"for\");\n        if (self.await) {\n            output.space();\n            output.print(\"await\");\n        }\n        output.space();\n        output.with_parens(function() {\n            self.init.print(output);\n            output.space();\n            output.print(self instanceof AST_ForOf ? \"of\" : \"in\");\n            output.space();\n            self.object.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_With, function(self, output) {\n        output.print(\"with\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n\n    /* -----[ functions ]----- */\n    AST_Lambda.DEFMETHOD(\"_do_print\", function(output, nokeyword) {\n        var self = this;\n        if (!nokeyword) {\n            if (self.async) {\n                output.print(\"async\");\n                output.space();\n            }\n            output.print(\"function\");\n            if (self.is_generator) {\n                output.star();\n            }\n            if (self.name) {\n                output.space();\n            }\n        }\n        if (self.name instanceof AST_Symbol) {\n            self.name.print(output);\n        } else if (nokeyword && self.name instanceof AST_Node) {\n            output.with_square(function() {\n                self.name.print(output); // Computed method name\n            });\n        }\n        output.with_parens(function() {\n            self.argnames.forEach(function(arg, i) {\n                if (i) output.comma();\n                arg.print(output);\n            });\n        });\n        output.space();\n        print_braced(self, output, true);\n    });\n    DEFPRINT(AST_Lambda, function(self, output) {\n        self._do_print(output);\n        output.gc_scope(self);\n    });\n\n    DEFPRINT(AST_PrefixedTemplateString, function(self, output) {\n        var tag = self.prefix;\n        var parenthesize_tag = tag instanceof AST_Lambda\n            || tag instanceof AST_Binary\n            || tag instanceof AST_Conditional\n            || tag instanceof AST_Sequence\n            || tag instanceof AST_Unary\n            || tag instanceof AST_Dot && tag.expression instanceof AST_Object;\n        if (parenthesize_tag) output.print(\"(\");\n        self.prefix.print(output);\n        if (parenthesize_tag) output.print(\")\");\n        self.template_string.print(output);\n    });\n    DEFPRINT(AST_TemplateString, function(self, output) {\n        var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;\n\n        output.print(\"`\");\n        for (var i = 0; i < self.segments.length; i++) {\n            if (!(self.segments[i] instanceof AST_TemplateSegment)) {\n                output.print(\"${\");\n                self.segments[i].print(output);\n                output.print(\"}\");\n            } else if (is_tagged) {\n                output.print(self.segments[i].raw);\n            } else {\n                output.print_template_string_chars(self.segments[i].value);\n            }\n        }\n        output.print(\"`\");\n    });\n    DEFPRINT(AST_TemplateSegment, function(self, output) {\n        output.print_template_string_chars(self.value);\n    });\n\n    AST_Arrow.DEFMETHOD(\"_do_print\", function(output) {\n        var self = this;\n        var parent = output.parent();\n        var needs_parens = (parent instanceof AST_Binary && !(parent instanceof AST_Assign)) ||\n            parent instanceof AST_Unary ||\n            (parent instanceof AST_Call && self === parent.expression);\n        if (needs_parens) { output.print(\"(\"); }\n        if (self.async) {\n            output.print(\"async\");\n            output.space();\n        }\n        if (self.argnames.length === 1 && self.argnames[0] instanceof AST_Symbol) {\n            self.argnames[0].print(output);\n        } else {\n            output.with_parens(function() {\n                self.argnames.forEach(function(arg, i) {\n                    if (i) output.comma();\n                    arg.print(output);\n                });\n            });\n        }\n        output.space();\n        output.print(\"=>\");\n        output.space();\n        const first_statement = self.body[0];\n        if (\n            self.body.length === 1\n            && first_statement instanceof AST_Return\n        ) {\n            const returned = first_statement.value;\n            if (!returned) {\n                output.print(\"{}\");\n            } else if (left_is_object(returned)) {\n                output.print(\"(\");\n                returned.print(output);\n                output.print(\")\");\n            } else {\n                returned.print(output);\n            }\n        } else {\n            print_braced(self, output);\n        }\n        if (needs_parens) { output.print(\")\"); }\n        output.gc_scope(self);\n    });\n\n    /* -----[ exits ]----- */\n    AST_Exit.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.value) {\n            output.space();\n            const comments = this.value.start.comments_before;\n            if (comments && comments.length && !output.printed_comments.has(comments)) {\n                output.print(\"(\");\n                this.value.print(output);\n                output.print(\")\");\n            } else {\n                this.value.print(output);\n            }\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Return, function(self, output) {\n        self._do_print(output, \"return\");\n    });\n    DEFPRINT(AST_Throw, function(self, output) {\n        self._do_print(output, \"throw\");\n    });\n\n    /* -----[ yield ]----- */\n\n    DEFPRINT(AST_Yield, function(self, output) {\n        var star = self.is_star ? \"*\" : \"\";\n        output.print(\"yield\" + star);\n        if (self.expression) {\n            output.space();\n            self.expression.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Await, function(self, output) {\n        output.print(\"await\");\n        output.space();\n        var e = self.expression;\n        var parens = !(\n               e instanceof AST_Call\n            || e instanceof AST_SymbolRef\n            || e instanceof AST_PropAccess\n            || e instanceof AST_Unary\n            || e instanceof AST_Constant\n            || e instanceof AST_Await\n            || e instanceof AST_Object\n        );\n        if (parens) output.print(\"(\");\n        self.expression.print(output);\n        if (parens) output.print(\")\");\n    });\n\n    /* -----[ loop control ]----- */\n    AST_LoopControl.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.label) {\n            output.space();\n            this.label.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Break, function(self, output) {\n        self._do_print(output, \"break\");\n    });\n    DEFPRINT(AST_Continue, function(self, output) {\n        self._do_print(output, \"continue\");\n    });\n\n    /* -----[ if ]----- */\n    function make_then(self, output) {\n        var b = self.body;\n        if (output.option(\"braces\")\n            || output.option(\"ie8\") && b instanceof AST_Do)\n            return make_block(b, output);\n        // The squeezer replaces \"block\"-s that contain only a single\n        // statement with the statement itself; technically, the AST\n        // is correct, but this can create problems when we output an\n        // IF having an ELSE clause where the THEN clause ends in an\n        // IF *without* an ELSE block (then the outer ELSE would refer\n        // to the inner IF).  This function checks for this case and\n        // adds the block braces if needed.\n        if (!b) return output.force_semicolon();\n        while (true) {\n            if (b instanceof AST_If) {\n                if (!b.alternative) {\n                    make_block(self.body, output);\n                    return;\n                }\n                b = b.alternative;\n            } else if (b instanceof AST_StatementWithBody) {\n                b = b.body;\n            } else break;\n        }\n        print_maybe_braced_body(self.body, output);\n    }\n    DEFPRINT(AST_If, function(self, output) {\n        output.print(\"if\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        if (self.alternative) {\n            make_then(self, output);\n            output.space();\n            output.print(\"else\");\n            output.space();\n            if (self.alternative instanceof AST_If)\n                self.alternative.print(output);\n            else\n                print_maybe_braced_body(self.alternative, output);\n        } else {\n            self._do_print_body(output);\n        }\n    });\n\n    /* -----[ switch ]----- */\n    DEFPRINT(AST_Switch, function(self, output) {\n        output.print(\"switch\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        var last = self.body.length - 1;\n        if (last < 0) print_braced_empty(self, output);\n        else output.with_block(function() {\n            self.body.forEach(function(branch, i) {\n                output.indent(true);\n                branch.print(output);\n                if (i < last && branch.body.length > 0)\n                    output.newline();\n            });\n        });\n    });\n    AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function(output) {\n        output.newline();\n        this.body.forEach(function(stmt) {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    });\n    DEFPRINT(AST_Default, function(self, output) {\n        output.print(\"default:\");\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_Case, function(self, output) {\n        output.print(\"case\");\n        output.space();\n        self.expression.print(output);\n        output.print(\":\");\n        self._do_print_body(output);\n    });\n\n    /* -----[ exceptions ]----- */\n    DEFPRINT(AST_Try, function(self, output) {\n        output.print(\"try\");\n        output.space();\n        self.body.print(output);\n        if (self.bcatch) {\n            output.space();\n            self.bcatch.print(output);\n        }\n        if (self.bfinally) {\n            output.space();\n            self.bfinally.print(output);\n        }\n    });\n    DEFPRINT(AST_TryBlock, function(self, output) {\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_Catch, function(self, output) {\n        output.print(\"catch\");\n        if (self.argname) {\n            output.space();\n            output.with_parens(function() {\n                self.argname.print(output);\n            });\n        }\n        output.space();\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_Finally, function(self, output) {\n        output.print(\"finally\");\n        output.space();\n        print_braced(self, output);\n    });\n\n    /* -----[ var/const ]----- */\n    AST_Definitions.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        output.space();\n        this.definitions.forEach(function(def, i) {\n            if (i) output.comma();\n            def.print(output);\n        });\n        var p = output.parent();\n        var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n        var output_semicolon = !in_for || p && p.init !== this;\n        if (output_semicolon)\n            output.semicolon();\n    });\n    DEFPRINT(AST_Let, function(self, output) {\n        self._do_print(output, \"let\");\n    });\n    DEFPRINT(AST_Var, function(self, output) {\n        self._do_print(output, \"var\");\n    });\n    DEFPRINT(AST_Const, function(self, output) {\n        self._do_print(output, \"const\");\n    });\n    DEFPRINT(AST_Import, function(self, output) {\n        output.print(\"import\");\n        output.space();\n        if (self.imported_name) {\n            self.imported_name.print(output);\n        }\n        if (self.imported_name && self.imported_names) {\n            output.print(\",\");\n            output.space();\n        }\n        if (self.imported_names) {\n            if (self.imported_names.length === 1 &&\n                self.imported_names[0].foreign_name.name === \"*\" &&\n                !self.imported_names[0].foreign_name.quote) {\n                self.imported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.imported_names.forEach(function (name_import, i) {\n                    output.space();\n                    name_import.print(output);\n                    if (i < self.imported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        }\n        if (self.imported_name || self.imported_names) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n        }\n        self.module_name.print(output);\n        if (self.assert_clause) {\n            output.print(\"assert\");\n            self.assert_clause.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_ImportMeta, function(self, output) {\n        output.print(\"import.meta\");\n    });\n\n    DEFPRINT(AST_NameMapping, function(self, output) {\n        var is_import = output.parent() instanceof AST_Import;\n        var definition = self.name.definition();\n        var foreign_name = self.foreign_name;\n        var names_are_different =\n            (definition && definition.mangled_name || self.name.name) !==\n            foreign_name.name;\n        if (!names_are_different &&\n            foreign_name.name === \"*\" &&\n            foreign_name.quote != self.name.quote) {\n                // export * as \"*\"\n            names_are_different = true;\n        }\n        var foreign_name_is_name = foreign_name.quote == null;\n        if (names_are_different) {\n            if (is_import) {\n                if (foreign_name_is_name) {\n                    output.print(foreign_name.name);\n                } else {\n                    output.print_string(foreign_name.name, foreign_name.quote);\n                }\n            } else {\n                if (self.name.quote == null) {\n                    self.name.print(output);\n                } else {\n                    output.print_string(self.name.name, self.name.quote);\n                }\n                \n            }\n            output.space();\n            output.print(\"as\");\n            output.space();\n            if (is_import) {\n                self.name.print(output);\n            } else {\n                if (foreign_name_is_name) {\n                    output.print(foreign_name.name);\n                } else {\n                    output.print_string(foreign_name.name, foreign_name.quote);\n                }\n            }\n        } else {\n            if (self.name.quote == null) {\n                self.name.print(output);\n            } else {\n                output.print_string(self.name.name, self.name.quote);\n            }\n        }\n    });\n\n    DEFPRINT(AST_Export, function(self, output) {\n        output.print(\"export\");\n        output.space();\n        if (self.is_default) {\n            output.print(\"default\");\n            output.space();\n        }\n        if (self.exported_names) {\n            if (self.exported_names.length === 1 &&\n                self.exported_names[0].name.name === \"*\" &&\n                !self.exported_names[0].name.quote) {\n                    self.exported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.exported_names.forEach(function(name_export, i) {\n                    output.space();\n                    name_export.print(output);\n                    if (i < self.exported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        } else if (self.exported_value) {\n            self.exported_value.print(output);\n        } else if (self.exported_definition) {\n            self.exported_definition.print(output);\n            if (self.exported_definition instanceof AST_Definitions) return;\n        }\n        if (self.module_name) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n            self.module_name.print(output);\n        }\n        if (self.assert_clause) {\n            output.print(\"assert\");\n            self.assert_clause.print(output);\n        }\n        if (self.exported_value\n                && !(self.exported_value instanceof AST_Defun ||\n                    self.exported_value instanceof AST_Function ||\n                    self.exported_value instanceof AST_Class)\n            || self.module_name\n            || self.exported_names\n        ) {\n            output.semicolon();\n        }\n    });\n\n    function parenthesize_for_noin(node, output, noin) {\n        var parens = false;\n        // need to take some precautions here:\n        //    https://github.com/mishoo/UglifyJS2/issues/60\n        if (noin) {\n            parens = walk(node, node => {\n                // Don't go into scopes -- except arrow functions:\n                // https://github.com/terser/terser/issues/1019#issuecomment-877642607\n                if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {\n                    return true;\n                }\n                if (\n                    node instanceof AST_Binary && node.operator == \"in\"\n                    || node instanceof AST_PrivateIn\n                ) {\n                    return walk_abort;  // makes walk() return true\n                }\n            });\n        }\n        node.print(output, parens);\n    }\n\n    DEFPRINT(AST_VarDef, function(self, output) {\n        self.name.print(output);\n        if (self.value) {\n            output.space();\n            output.print(\"=\");\n            output.space();\n            var p = output.parent(1);\n            var noin = p instanceof AST_For || p instanceof AST_ForIn;\n            parenthesize_for_noin(self.value, output, noin);\n        }\n    });\n\n    /* -----[ other expressions ]----- */\n    DEFPRINT(AST_Call, function(self, output) {\n        self.expression.print(output);\n        if (self instanceof AST_New && self.args.length === 0)\n            return;\n        if (self.expression instanceof AST_Call || self.expression instanceof AST_Lambda) {\n            output.add_mapping(self.start);\n        }\n        if (self.optional) output.print(\"?.\");\n        output.with_parens(function() {\n            self.args.forEach(function(expr, i) {\n                if (i) output.comma();\n                expr.print(output);\n            });\n        });\n    });\n    DEFPRINT(AST_New, function(self, output) {\n        output.print(\"new\");\n        output.space();\n        AST_Call.prototype._codegen(self, output);\n    });\n\n    AST_Sequence.DEFMETHOD(\"_do_print\", function(output) {\n        this.expressions.forEach(function(node, index) {\n            if (index > 0) {\n                output.comma();\n                if (output.should_break()) {\n                    output.newline();\n                    output.indent();\n                }\n            }\n            node.print(output);\n        });\n    });\n    DEFPRINT(AST_Sequence, function(self, output) {\n        self._do_print(output);\n        // var p = output.parent();\n        // if (p instanceof AST_Statement) {\n        //     output.with_indent(output.next_indent(), function(){\n        //         self._do_print(output);\n        //     });\n        // } else {\n        //     self._do_print(output);\n        // }\n    });\n    DEFPRINT(AST_Dot, function(self, output) {\n        var expr = self.expression;\n        expr.print(output);\n        var prop = self.property;\n        var print_computed = ALL_RESERVED_WORDS.has(prop)\n            ? output.option(\"ie8\")\n            : !is_identifier_string(\n                prop,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            );\n\n        if (self.optional) output.print(\"?.\");\n\n        if (print_computed) {\n            output.print(\"[\");\n            output.add_mapping(self.end);\n            output.print_string(prop);\n            output.print(\"]\");\n        } else {\n            if (expr instanceof AST_Number && expr.getValue() >= 0) {\n                if (!/[xa-f.)]/i.test(output.last())) {\n                    output.print(\".\");\n                }\n            }\n            if (!self.optional) output.print(\".\");\n            // the name after dot would be mapped about here.\n            output.add_mapping(self.end);\n            output.print_name(prop);\n        }\n    });\n    DEFPRINT(AST_DotHash, function(self, output) {\n        var expr = self.expression;\n        expr.print(output);\n        var prop = self.property;\n\n        if (self.optional) output.print(\"?\");\n        output.print(\".#\");\n        output.add_mapping(self.end);\n        output.print_name(prop);\n    });\n    DEFPRINT(AST_Sub, function(self, output) {\n        self.expression.print(output);\n        if (self.optional) output.print(\"?.\");\n        output.print(\"[\");\n        self.property.print(output);\n        output.print(\"]\");\n    });\n    DEFPRINT(AST_Chain, function(self, output) {\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPrefix, function(self, output) {\n        var op = self.operator;\n        output.print(op);\n        if (/^[a-z]/i.test(op)\n            || (/[+-]$/.test(op)\n                && self.expression instanceof AST_UnaryPrefix\n                && /^[+-]/.test(self.expression.operator))) {\n            output.space();\n        }\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPostfix, function(self, output) {\n        self.expression.print(output);\n        output.print(self.operator);\n    });\n    DEFPRINT(AST_Binary, function(self, output) {\n        var op = self.operator;\n        self.left.print(output);\n        if (op[0] == \">\" /* \">>\" \">>>\" \">\" \">=\" */\n            && self.left instanceof AST_UnaryPostfix\n            && self.left.operator == \"--\") {\n            // space is mandatory to avoid outputting -->\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        output.print(op);\n        if ((op == \"<\" || op == \"<<\")\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"!\"\n            && self.right.expression instanceof AST_UnaryPrefix\n            && self.right.expression.operator == \"--\") {\n            // space is mandatory to avoid outputting <!--\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        self.right.print(output);\n    });\n    DEFPRINT(AST_Conditional, function(self, output) {\n        self.condition.print(output);\n        output.space();\n        output.print(\"?\");\n        output.space();\n        self.consequent.print(output);\n        output.space();\n        output.colon();\n        self.alternative.print(output);\n    });\n\n    /* -----[ literals ]----- */\n    DEFPRINT(AST_Array, function(self, output) {\n        output.with_square(function() {\n            var a = self.elements, len = a.length;\n            if (len > 0) output.space();\n            a.forEach(function(exp, i) {\n                if (i) output.comma();\n                exp.print(output);\n                // If the final element is a hole, we need to make sure it\n                // doesn't look like a trailing comma, by inserting an actual\n                // trailing comma.\n                if (i === len - 1 && exp instanceof AST_Hole)\n                  output.comma();\n            });\n            if (len > 0) output.space();\n        });\n    });\n    DEFPRINT(AST_Object, function(self, output) {\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.print(\",\");\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else print_braced_empty(self, output);\n    });\n    DEFPRINT(AST_Class, function(self, output) {\n        output.print(\"class\");\n        output.space();\n        if (self.name) {\n            self.name.print(output);\n            output.space();\n        }\n        if (self.extends) {\n            var parens = (\n                   !(self.extends instanceof AST_SymbolRef)\n                && !(self.extends instanceof AST_PropAccess)\n                && !(self.extends instanceof AST_ClassExpression)\n                && !(self.extends instanceof AST_Function)\n            );\n            output.print(\"extends\");\n            if (parens) {\n                output.print(\"(\");\n            } else {\n                output.space();\n            }\n            self.extends.print(output);\n            if (parens) {\n                output.print(\")\");\n            } else {\n                output.space();\n            }\n        }\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else output.print(\"{}\");\n    });\n    DEFPRINT(AST_NewTarget, function(self, output) {\n        output.print(\"new.target\");\n    });\n\n    function print_property_name(key, quote, output) {\n        if (output.option(\"quote_keys\")) {\n            return output.print_string(key);\n        }\n        if (\"\" + +key == key && key >= 0) {\n            if (output.option(\"keep_numbers\")) {\n                return output.print(key);\n            }\n            return output.print(make_num(key));\n        }\n        var print_string = ALL_RESERVED_WORDS.has(key)\n            ? output.option(\"ie8\")\n            : (\n                output.option(\"ecma\") < 2015 || output.option(\"safari10\")\n                    ? !is_basic_identifier_string(key)\n                    : !is_identifier_string(key, true)\n            );\n        if (print_string || (quote && output.option(\"keep_quoted_props\"))) {\n            return output.print_string(key, quote);\n        }\n        return output.print_name(key);\n    }\n\n    DEFPRINT(AST_ObjectKeyVal, function(self, output) {\n        function get_name(self) {\n            var def = self.definition();\n            return def ? def.mangled_name || def.name : self.name;\n        }\n\n        var allowShortHand = output.option(\"shorthand\");\n        if (allowShortHand &&\n            self.value instanceof AST_Symbol &&\n            is_identifier_string(\n                self.key,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            ) &&\n            get_name(self.value) === self.key &&\n            !ALL_RESERVED_WORDS.has(self.key)\n        ) {\n            print_property_name(self.key, self.quote, output);\n\n        } else if (allowShortHand &&\n            self.value instanceof AST_DefaultAssign &&\n            self.value.left instanceof AST_Symbol &&\n            is_identifier_string(\n                self.key,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            ) &&\n            get_name(self.value.left) === self.key\n        ) {\n            print_property_name(self.key, self.quote, output);\n            output.space();\n            output.print(\"=\");\n            output.space();\n            self.value.right.print(output);\n        } else {\n            if (!(self.key instanceof AST_Node)) {\n                print_property_name(self.key, self.quote, output);\n            } else {\n                output.with_square(function() {\n                    self.key.print(output);\n                });\n            }\n            output.colon();\n            self.value.print(output);\n        }\n    });\n    DEFPRINT(AST_ClassPrivateProperty, (self, output) => {\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n\n        output.print(\"#\");\n        \n        print_property_name(self.key.name, self.quote, output);\n\n        if (self.value) {\n            output.print(\"=\");\n            self.value.print(output);\n        }\n\n        output.semicolon();\n    });\n    DEFPRINT(AST_ClassProperty, (self, output) => {\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n\n        if (self.key instanceof AST_SymbolClassProperty) {\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.print(\"[\");\n            self.key.print(output);\n            output.print(\"]\");\n        }\n\n        if (self.value) {\n            output.print(\"=\");\n            self.value.print(output);\n        }\n\n        output.semicolon();\n    });\n    AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function(type, is_private, output) {\n        var self = this;\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n        if (type) {\n            output.print(type);\n            output.space();\n        }\n        if (self.key instanceof AST_SymbolMethod) {\n            if (is_private) output.print(\"#\");\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.with_square(function() {\n                self.key.print(output);\n            });\n        }\n        self.value._do_print(output, true);\n    });\n    DEFPRINT(AST_ObjectSetter, function(self, output) {\n        self._print_getter_setter(\"set\", false, output);\n    });\n    DEFPRINT(AST_ObjectGetter, function(self, output) {\n        self._print_getter_setter(\"get\", false, output);\n    });\n    DEFPRINT(AST_PrivateSetter, function(self, output) {\n        self._print_getter_setter(\"set\", true, output);\n    });\n    DEFPRINT(AST_PrivateGetter, function(self, output) {\n        self._print_getter_setter(\"get\", true, output);\n    });\n    DEFPRINT(AST_PrivateMethod, function(self, output) {\n        var type;\n        if (self.is_generator && self.async) {\n            type = \"async*\";\n        } else if (self.is_generator) {\n            type = \"*\";\n        } else if (self.async) {\n            type = \"async\";\n        }\n        self._print_getter_setter(type, true, output);\n    });\n    DEFPRINT(AST_PrivateIn, function(self, output) {\n        self.key.print(output);\n        output.space();\n        output.print(\"in\");\n        output.space();\n        self.value.print(output);\n    });\n    DEFPRINT(AST_SymbolPrivateProperty, function(self, output) {\n        output.print(\"#\" + self.name);\n    });\n    DEFPRINT(AST_ConciseMethod, function(self, output) {\n        var type;\n        if (self.is_generator && self.async) {\n            type = \"async*\";\n        } else if (self.is_generator) {\n            type = \"*\";\n        } else if (self.async) {\n            type = \"async\";\n        }\n        self._print_getter_setter(type, false, output);\n    });\n    DEFPRINT(AST_ClassStaticBlock, function (self, output) {\n        output.print(\"static\");\n        output.space();\n        print_braced(self, output);\n    });\n    AST_Symbol.DEFMETHOD(\"_do_print\", function(output) {\n        var def = this.definition();\n        output.print_name(def ? def.mangled_name || def.name : this.name);\n    });\n    DEFPRINT(AST_Symbol, function (self, output) {\n        self._do_print(output);\n    });\n    DEFPRINT(AST_Hole, noop);\n    DEFPRINT(AST_This, function(self, output) {\n        output.print(\"this\");\n    });\n    DEFPRINT(AST_Super, function(self, output) {\n        output.print(\"super\");\n    });\n    DEFPRINT(AST_Constant, function(self, output) {\n        output.print(self.getValue());\n    });\n    DEFPRINT(AST_String, function(self, output) {\n        output.print_string(self.getValue(), self.quote, output.in_directive);\n    });\n    DEFPRINT(AST_Number, function(self, output) {\n        if ((output.option(\"keep_numbers\") || output.use_asm) && self.raw) {\n            output.print(self.raw);\n        } else {\n            output.print(make_num(self.getValue()));\n        }\n    });\n    DEFPRINT(AST_BigInt, function(self, output) {\n        output.print(self.getValue() + \"n\");\n    });\n\n    const r_slash_script = /(<\\s*\\/\\s*script)/i;\n    const slash_script_replace = (_, $1) => $1.replace(\"/\", \"\\\\/\");\n    DEFPRINT(AST_RegExp, function(self, output) {\n        let { source, flags } = self.getValue();\n        source = regexp_source_fix(source);\n        flags = flags ? sort_regexp_flags(flags) : \"\";\n        source = source.replace(r_slash_script, slash_script_replace);\n\n        output.print(output.to_utf8(`/${source}/${flags}`, false, true));\n\n        const parent = output.parent();\n        if (\n            parent instanceof AST_Binary\n            && /^\\w/.test(parent.operator)\n            && parent.left === self\n        ) {\n            output.print(\" \");\n        }\n    });\n\n    /** if, for, while, may or may not have braces surrounding its body */\n    function print_maybe_braced_body(stat, output) {\n        if (output.option(\"braces\")) {\n            make_block(stat, output);\n        } else {\n            if (!stat || stat instanceof AST_EmptyStatement)\n                output.force_semicolon();\n            else if (stat instanceof AST_Let || stat instanceof AST_Const || stat instanceof AST_Class)\n                make_block(stat, output);\n            else\n                stat.print(output);\n        }\n    }\n\n    function best_of(a) {\n        var best = a[0], len = best.length;\n        for (var i = 1; i < a.length; ++i) {\n            if (a[i].length < len) {\n                best = a[i];\n                len = best.length;\n            }\n        }\n        return best;\n    }\n\n    function make_num(num) {\n        var str = num.toString(10).replace(/^0\\./, \".\").replace(\"e+\", \"e\");\n        var candidates = [ str ];\n        if (Math.floor(num) === num) {\n            if (num < 0) {\n                candidates.push(\"-0x\" + (-num).toString(16).toLowerCase());\n            } else {\n                candidates.push(\"0x\" + num.toString(16).toLowerCase());\n            }\n        }\n        var match, len, digits;\n        if (match = /^\\.0+/.exec(str)) {\n            len = match[0].length;\n            digits = str.slice(len);\n            candidates.push(digits + \"e-\" + (digits.length + len - 1));\n        } else if (match = /0+$/.exec(str)) {\n            len = match[0].length;\n            candidates.push(str.slice(0, -len) + \"e\" + len);\n        } else if (match = /^(\\d)\\.(\\d+)e(-?\\d+)$/.exec(str)) {\n            candidates.push(match[1] + match[2] + \"e\" + (match[3] - match[2].length));\n        }\n        return best_of(candidates);\n    }\n\n    function make_block(stmt, output) {\n        if (!stmt || stmt instanceof AST_EmptyStatement)\n            output.print(\"{}\");\n        else if (stmt instanceof AST_BlockStatement)\n            stmt.print(output);\n        else output.with_block(function() {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    }\n\n    /* -----[ source map generators ]----- */\n\n    function DEFMAP(nodetype, generator) {\n        nodetype.forEach(function(nodetype) {\n            nodetype.DEFMETHOD(\"add_source_map\", generator);\n        });\n    }\n\n    DEFMAP([\n        // We could easily add info for ALL nodes, but it seems to me that\n        // would be quite wasteful, hence this noop in the base class.\n        AST_Node,\n        // since the label symbol will mark it\n        AST_LabeledStatement,\n        AST_Toplevel,\n    ], noop);\n\n    // XXX: I'm not exactly sure if we need it for all of these nodes,\n    // or if we should add even more.\n    DEFMAP([\n        AST_Array,\n        AST_BlockStatement,\n        AST_Catch,\n        AST_Class,\n        AST_Constant,\n        AST_Debugger,\n        AST_Definitions,\n        AST_Directive,\n        AST_Finally,\n        AST_Jump,\n        AST_Lambda,\n        AST_New,\n        AST_Object,\n        AST_StatementWithBody,\n        AST_Symbol,\n        AST_Switch,\n        AST_SwitchBranch,\n        AST_TemplateString,\n        AST_TemplateSegment,\n        AST_Try,\n    ], function(output) {\n        output.add_mapping(this.start);\n    });\n\n    DEFMAP([\n        AST_ObjectGetter,\n        AST_ObjectSetter,\n        AST_PrivateGetter,\n        AST_PrivateSetter,\n    ], function(output) {\n        output.add_mapping(this.key.end, this.key.name);\n    });\n\n    DEFMAP([ AST_ObjectProperty ], function(output) {\n        output.add_mapping(this.start, this.key);\n    });\n})();\n\nexport {\n    OutputStream,\n};\n", "import {\n    AST_Array,\n    AST_Atom,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_Call,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Debugger,\n    AST_Definitions,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DotHash,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_NewTarget,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_String,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Toplevel,\n    AST_Try,\n    AST_Unary,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield\n} from \"./ast.js\";\n\nconst shallow_cmp = (node1, node2) => {\n    return (\n        node1 === null && node2 === null\n        || node1.TYPE === node2.TYPE && node1.shallow_cmp(node2)\n    );\n};\n\nexport const equivalent_to = (tree1, tree2) => {\n    if (!shallow_cmp(tree1, tree2)) return false;\n    const walk_1_state = [tree1];\n    const walk_2_state = [tree2];\n\n    const walk_1_push = walk_1_state.push.bind(walk_1_state);\n    const walk_2_push = walk_2_state.push.bind(walk_2_state);\n\n    while (walk_1_state.length && walk_2_state.length) {\n        const node_1 = walk_1_state.pop();\n        const node_2 = walk_2_state.pop();\n\n        if (!shallow_cmp(node_1, node_2)) return false;\n\n        node_1._children_backwards(walk_1_push);\n        node_2._children_backwards(walk_2_push);\n\n        if (walk_1_state.length !== walk_2_state.length) {\n            // Different number of children\n            return false;\n        }\n    }\n\n    return walk_1_state.length == 0 && walk_2_state.length == 0;\n};\n\nconst pass_through = () => true;\n\nAST_Node.prototype.shallow_cmp = function () {\n    throw new Error(\"did not find a shallow_cmp function for \" + this.constructor.name);\n};\n\nAST_Debugger.prototype.shallow_cmp = pass_through;\n\nAST_Directive.prototype.shallow_cmp = function(other) {\n    return this.value === other.value;\n};\n\nAST_SimpleStatement.prototype.shallow_cmp = pass_through;\n\nAST_Block.prototype.shallow_cmp = pass_through;\n\nAST_EmptyStatement.prototype.shallow_cmp = pass_through;\n\nAST_LabeledStatement.prototype.shallow_cmp = function(other) {\n    return this.label.name === other.label.name;\n};\n\nAST_Do.prototype.shallow_cmp = pass_through;\n\nAST_While.prototype.shallow_cmp = pass_through;\n\nAST_For.prototype.shallow_cmp = function(other) {\n    return (this.init == null ? other.init == null : this.init === other.init) && (this.condition == null ? other.condition == null : this.condition === other.condition) && (this.step == null ? other.step == null : this.step === other.step);\n};\n\nAST_ForIn.prototype.shallow_cmp = pass_through;\n\nAST_ForOf.prototype.shallow_cmp = pass_through;\n\nAST_With.prototype.shallow_cmp = pass_through;\n\nAST_Toplevel.prototype.shallow_cmp = pass_through;\n\nAST_Expansion.prototype.shallow_cmp = pass_through;\n\nAST_Lambda.prototype.shallow_cmp = function(other) {\n    return this.is_generator === other.is_generator && this.async === other.async;\n};\n\nAST_Destructuring.prototype.shallow_cmp = function(other) {\n    return this.is_array === other.is_array;\n};\n\nAST_PrefixedTemplateString.prototype.shallow_cmp = pass_through;\n\nAST_TemplateString.prototype.shallow_cmp = pass_through;\n\nAST_TemplateSegment.prototype.shallow_cmp = function(other) {\n    return this.value === other.value;\n};\n\nAST_Jump.prototype.shallow_cmp = pass_through;\n\nAST_LoopControl.prototype.shallow_cmp = pass_through;\n\nAST_Await.prototype.shallow_cmp = pass_through;\n\nAST_Yield.prototype.shallow_cmp = function(other) {\n    return this.is_star === other.is_star;\n};\n\nAST_If.prototype.shallow_cmp = function(other) {\n    return this.alternative == null ? other.alternative == null : this.alternative === other.alternative;\n};\n\nAST_Switch.prototype.shallow_cmp = pass_through;\n\nAST_SwitchBranch.prototype.shallow_cmp = pass_through;\n\nAST_Try.prototype.shallow_cmp = function(other) {\n    return (this.body === other.body) && (this.bcatch == null ? other.bcatch == null : this.bcatch === other.bcatch) && (this.bfinally == null ? other.bfinally == null : this.bfinally === other.bfinally);\n};\n\nAST_Catch.prototype.shallow_cmp = function(other) {\n    return this.argname == null ? other.argname == null : this.argname === other.argname;\n};\n\nAST_Finally.prototype.shallow_cmp = pass_through;\n\nAST_Definitions.prototype.shallow_cmp = pass_through;\n\nAST_VarDef.prototype.shallow_cmp = function(other) {\n    return this.value == null ? other.value == null : this.value === other.value;\n};\n\nAST_NameMapping.prototype.shallow_cmp = pass_through;\n\nAST_Import.prototype.shallow_cmp = function(other) {\n    return (this.imported_name == null ? other.imported_name == null : this.imported_name === other.imported_name) && (this.imported_names == null ? other.imported_names == null : this.imported_names === other.imported_names);\n};\n\nAST_ImportMeta.prototype.shallow_cmp = pass_through;\n\nAST_Export.prototype.shallow_cmp = function(other) {\n    return (this.exported_definition == null ? other.exported_definition == null : this.exported_definition === other.exported_definition) && (this.exported_value == null ? other.exported_value == null : this.exported_value === other.exported_value) && (this.exported_names == null ? other.exported_names == null : this.exported_names === other.exported_names) && this.module_name === other.module_name && this.is_default === other.is_default;\n};\n\nAST_Call.prototype.shallow_cmp = pass_through;\n\nAST_Sequence.prototype.shallow_cmp = pass_through;\n\nAST_PropAccess.prototype.shallow_cmp = pass_through;\n\nAST_Chain.prototype.shallow_cmp = pass_through;\n\nAST_Dot.prototype.shallow_cmp = function(other) {\n    return this.property === other.property;\n};\n\nAST_DotHash.prototype.shallow_cmp = function(other) {\n    return this.property === other.property;\n};\n\nAST_Unary.prototype.shallow_cmp = function(other) {\n    return this.operator === other.operator;\n};\n\nAST_Binary.prototype.shallow_cmp = function(other) {\n    return this.operator === other.operator;\n};\n\nAST_Conditional.prototype.shallow_cmp = pass_through;\n\nAST_Array.prototype.shallow_cmp = pass_through;\n\nAST_Object.prototype.shallow_cmp = pass_through;\n\nAST_ObjectProperty.prototype.shallow_cmp = pass_through;\n\nAST_ObjectKeyVal.prototype.shallow_cmp = function(other) {\n    return this.key === other.key;\n};\n\nAST_ObjectSetter.prototype.shallow_cmp = function(other) {\n    return this.static === other.static;\n};\n\nAST_ObjectGetter.prototype.shallow_cmp = function(other) {\n    return this.static === other.static;\n};\n\nAST_ConciseMethod.prototype.shallow_cmp = function(other) {\n    return this.static === other.static && this.is_generator === other.is_generator && this.async === other.async;\n};\n\nAST_Class.prototype.shallow_cmp = function(other) {\n    return (this.name == null ? other.name == null : this.name === other.name) && (this.extends == null ? other.extends == null : this.extends === other.extends);\n};\n\nAST_ClassProperty.prototype.shallow_cmp = function(other) {\n    return this.static === other.static;\n};\n\nAST_Symbol.prototype.shallow_cmp = function(other) {\n    return this.name === other.name;\n};\n\nAST_NewTarget.prototype.shallow_cmp = pass_through;\n\nAST_This.prototype.shallow_cmp = pass_through;\n\nAST_Super.prototype.shallow_cmp = pass_through;\n\nAST_String.prototype.shallow_cmp = function(other) {\n    return this.value === other.value;\n};\n\nAST_Number.prototype.shallow_cmp = function(other) {\n    return this.value === other.value;\n};\n\nAST_BigInt.prototype.shallow_cmp = function(other) {\n    return this.value === other.value;\n};\n\nAST_RegExp.prototype.shallow_cmp = function (other) {\n    return (\n        this.value.flags === other.value.flags\n        && this.value.source === other.value.source\n    );\n};\n\nAST_Atom.prototype.shallow_cmp = pass_through;\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    defaults,\n    keep_name,\n    mergeSort,\n    push_uniq,\n    make_node,\n    return_false,\n    return_this,\n    return_true,\n    string_template,\n} from \"./utils/index.js\";\nimport {\n    AST_Arrow,\n    AST_Block,\n    AST_Call,\n    AST_Class,\n    AST_Conditional,\n    AST_DefClass,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Dot,\n    AST_DotHash,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Scope,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_Toplevel,\n    AST_VarDef,\n    AST_With,\n    TreeWalker,\n    walk,\n    walk_abort\n} from \"./ast.js\";\nimport {\n    ALL_RESERVED_WORDS,\n    js_error,\n} from \"./parse.js\";\n\nconst MASK_EXPORT_DONT_MANGLE = 1 << 0;\nconst MASK_EXPORT_WANT_MANGLE = 1 << 1;\n\nlet function_defs = null;\nlet unmangleable_names = null;\n/**\n * When defined, there is a function declaration somewhere that's inside of a block.\n * See https://tc39.es/ecma262/multipage/additional-ecmascript-features-for-web-browsers.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics\n*/\nlet scopes_with_block_defuns = null;\n\nclass SymbolDef {\n    constructor(scope, orig, init) {\n        this.name = orig.name;\n        this.orig = [ orig ];\n        this.init = init;\n        this.eliminated = 0;\n        this.assignments = 0;\n        this.scope = scope;\n        this.replaced = 0;\n        this.global = false;\n        this.export = 0;\n        this.mangled_name = null;\n        this.undeclared = false;\n        this.id = SymbolDef.next_id++;\n        this.chained = false;\n        this.direct_access = false;\n        this.escaped = 0;\n        this.recursive_refs = 0;\n        this.references = [];\n        this.should_replace = undefined;\n        this.single_use = false;\n        this.fixed = false;\n        Object.seal(this);\n    }\n    fixed_value() {\n        if (!this.fixed || this.fixed instanceof AST_Node) return this.fixed;\n        return this.fixed();\n    }\n    unmangleable(options) {\n        if (!options) options = {};\n\n        if (\n            function_defs &&\n            function_defs.has(this.id) &&\n            keep_name(options.keep_fnames, this.orig[0].name)\n        ) return true;\n\n        return this.global && !options.toplevel\n            || (this.export & MASK_EXPORT_DONT_MANGLE)\n            || this.undeclared\n            || !options.eval && this.scope.pinned()\n            || (this.orig[0] instanceof AST_SymbolLambda\n                  || this.orig[0] instanceof AST_SymbolDefun) && keep_name(options.keep_fnames, this.orig[0].name)\n            || this.orig[0] instanceof AST_SymbolMethod\n            || (this.orig[0] instanceof AST_SymbolClass\n                  || this.orig[0] instanceof AST_SymbolDefClass) && keep_name(options.keep_classnames, this.orig[0].name);\n    }\n    mangle(options) {\n        const cache = options.cache && options.cache.props;\n        if (this.global && cache && cache.has(this.name)) {\n            this.mangled_name = cache.get(this.name);\n        } else if (!this.mangled_name && !this.unmangleable(options)) {\n            var s = this.scope;\n            var sym = this.orig[0];\n            if (options.ie8 && sym instanceof AST_SymbolLambda)\n                s = s.parent_scope;\n            const redefinition = redefined_catch_def(this);\n            this.mangled_name = redefinition\n                ? redefinition.mangled_name || redefinition.name\n                : s.next_mangled(options, this);\n            if (this.global && cache) {\n                cache.set(this.name, this.mangled_name);\n            }\n        }\n    }\n}\n\nSymbolDef.next_id = 1;\n\nfunction redefined_catch_def(def) {\n    if (def.orig[0] instanceof AST_SymbolCatch\n        && def.scope.is_block_scope()\n    ) {\n        return def.scope.get_defun_scope().variables.get(def.name);\n    }\n}\n\nAST_Scope.DEFMETHOD(\"figure_out_scope\", function(options, { parent_scope = null, toplevel = this } = {}) {\n    options = defaults(options, {\n        cache: null,\n        ie8: false,\n        safari10: false,\n    });\n\n    if (!(toplevel instanceof AST_Toplevel)) {\n        throw new Error(\"Invalid toplevel scope\");\n    }\n\n    // pass 1: setup scope chaining and handle definitions\n    var scope = this.parent_scope = parent_scope;\n    var labels = new Map();\n    var defun = null;\n    var in_destructuring = null;\n    var for_scopes = [];\n    var tw = new TreeWalker((node, descend) => {\n        if (node.is_block_scope()) {\n            const save_scope = scope;\n            node.block_scope = scope = new AST_Scope(node);\n            scope._block_scope = true;\n            scope.init_scope_vars(save_scope);\n            scope.uses_with = save_scope.uses_with;\n            scope.uses_eval = save_scope.uses_eval;\n\n            if (options.safari10) {\n                if (node instanceof AST_For || node instanceof AST_ForIn || node instanceof AST_ForOf) {\n                    for_scopes.push(scope);\n                }\n            }\n\n            if (node instanceof AST_Switch) {\n                // XXX: HACK! Ensure the switch expression gets the correct scope (the parent scope) and the body gets the contained scope\n                // AST_Switch has a scope within the body, but it itself \"is a block scope\"\n                // This means the switched expression has to belong to the outer scope\n                // while the body inside belongs to the switch itself.\n                // This is pretty nasty and warrants an AST change\n                const the_block_scope = scope;\n                scope = save_scope;\n                node.expression.walk(tw);\n                scope = the_block_scope;\n                for (let i = 0; i < node.body.length; i++) {\n                    node.body[i].walk(tw);\n                }\n            } else {\n                descend();\n            }\n            scope = save_scope;\n            return true;\n        }\n        if (node instanceof AST_Destructuring) {\n            const save_destructuring = in_destructuring;\n            in_destructuring = node;\n            descend();\n            in_destructuring = save_destructuring;\n            return true;\n        }\n        if (node instanceof AST_Scope) {\n            node.init_scope_vars(scope);\n            var save_scope = scope;\n            var save_defun = defun;\n            var save_labels = labels;\n            defun = scope = node;\n            labels = new Map();\n            descend();\n            scope = save_scope;\n            defun = save_defun;\n            labels = save_labels;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_LabeledStatement) {\n            var l = node.label;\n            if (labels.has(l.name)) {\n                throw new Error(string_template(\"Label {name} defined twice\", l));\n            }\n            labels.set(l.name, l);\n            descend();\n            labels.delete(l.name);\n            return true;        // no descend again\n        }\n        if (node instanceof AST_With) {\n            for (var s = scope; s; s = s.parent_scope)\n                s.uses_with = true;\n            return;\n        }\n        if (node instanceof AST_Symbol) {\n            node.scope = scope;\n        }\n        if (node instanceof AST_Label) {\n            node.thedef = node;\n            node.references = [];\n        }\n        if (node instanceof AST_SymbolLambda) {\n            defun.def_function(node, node.name == \"arguments\" ? undefined : defun);\n        } else if (node instanceof AST_SymbolDefun) {\n            // Careful here, the scope where this should be defined is\n            // the parent scope.  The reason is that we enter a new\n            // scope when we encounter the AST_Defun node (which is\n            // instanceof AST_Scope) but we get to the symbol a bit\n            // later.\n            const closest_scope = defun.parent_scope;\n\n            // In strict mode, function definitions are block-scoped\n            node.scope = tw.directives[\"use strict\"]\n                ? closest_scope\n                : closest_scope.get_defun_scope();\n\n            mark_export(node.scope.def_function(node, defun), 1);\n        } else if (node instanceof AST_SymbolClass) {\n            mark_export(defun.def_variable(node, defun), 1);\n        } else if (node instanceof AST_SymbolImport) {\n            scope.def_variable(node);\n        } else if (node instanceof AST_SymbolDefClass) {\n            // This deals with the name of the class being available\n            // inside the class.\n            mark_export((node.scope = defun.parent_scope).def_function(node, defun), 1);\n        } else if (\n            node instanceof AST_SymbolVar\n            || node instanceof AST_SymbolLet\n            || node instanceof AST_SymbolConst\n            || node instanceof AST_SymbolCatch\n        ) {\n            var def;\n            if (node instanceof AST_SymbolBlockDeclaration) {\n                def = scope.def_variable(node, null);\n            } else {\n                def = defun.def_variable(node, node.TYPE == \"SymbolVar\" ? null : undefined);\n            }\n            if (!def.orig.every((sym) => {\n                if (sym === node) return true;\n                if (node instanceof AST_SymbolBlockDeclaration) {\n                    return sym instanceof AST_SymbolLambda;\n                }\n                return !(sym instanceof AST_SymbolLet || sym instanceof AST_SymbolConst);\n            })) {\n                js_error(\n                    `\"${node.name}\" is redeclared`,\n                    node.start.file,\n                    node.start.line,\n                    node.start.col,\n                    node.start.pos\n                );\n            }\n            if (!(node instanceof AST_SymbolFunarg)) mark_export(def, 2);\n            if (defun !== scope) {\n                node.mark_enclosed();\n                var def = scope.find_variable(node);\n                if (node.thedef !== def) {\n                    node.thedef = def;\n                    node.reference();\n                }\n            }\n        } else if (node instanceof AST_LabelRef) {\n            var sym = labels.get(node.name);\n            if (!sym) throw new Error(string_template(\"Undefined label {name} [{line},{col}]\", {\n                name: node.name,\n                line: node.start.line,\n                col: node.start.col\n            }));\n            node.thedef = sym;\n        }\n        if (!(scope instanceof AST_Toplevel) && (node instanceof AST_Export || node instanceof AST_Import)) {\n            js_error(\n                `\"${node.TYPE}\" statement may only appear at the top level`,\n                node.start.file,\n                node.start.line,\n                node.start.col,\n                node.start.pos\n            );\n        }\n    });\n    this.walk(tw);\n\n    function mark_export(def, level) {\n        if (in_destructuring) {\n            var i = 0;\n            do {\n                level++;\n            } while (tw.parent(i++) !== in_destructuring);\n        }\n        var node = tw.parent(level);\n        if (def.export = node instanceof AST_Export ? MASK_EXPORT_DONT_MANGLE : 0) {\n            var exported = node.exported_definition;\n            if ((exported instanceof AST_Defun || exported instanceof AST_DefClass) && node.is_default) {\n                def.export = MASK_EXPORT_WANT_MANGLE;\n            }\n        }\n    }\n\n    // pass 2: find back references and eval\n    const is_toplevel = this instanceof AST_Toplevel;\n    if (is_toplevel) {\n        this.globals = new Map();\n    }\n\n    var tw = new TreeWalker(node => {\n        if (node instanceof AST_LoopControl && node.label) {\n            node.label.thedef.references.push(node);\n            return true;\n        }\n        if (node instanceof AST_SymbolRef) {\n            var name = node.name;\n            if (name == \"eval\" && tw.parent() instanceof AST_Call) {\n                for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {\n                    s.uses_eval = true;\n                }\n            }\n            var sym;\n            if (tw.parent() instanceof AST_NameMapping && tw.parent(1).module_name\n                || !(sym = node.scope.find_variable(name))) {\n\n                sym = toplevel.def_global(node);\n                if (node instanceof AST_SymbolExport) sym.export = MASK_EXPORT_DONT_MANGLE;\n            } else if (sym.scope instanceof AST_Lambda && name == \"arguments\") {\n                sym.scope.get_defun_scope().uses_arguments = true;\n            }\n            node.thedef = sym;\n            node.reference();\n            if (node.scope.is_block_scope()\n                && !(sym.orig[0] instanceof AST_SymbolBlockDeclaration)) {\n                node.scope = node.scope.get_defun_scope();\n            }\n            return true;\n        }\n        // ensure mangling works if catch reuses a scope variable\n        var def;\n        if (node instanceof AST_SymbolCatch && (def = redefined_catch_def(node.definition()))) {\n            var s = node.scope;\n            while (s) {\n                push_uniq(s.enclosed, def);\n                if (s === def.scope) break;\n                s = s.parent_scope;\n            }\n        }\n    });\n    this.walk(tw);\n\n    // pass 3: work around IE8 and Safari catch scope bugs\n    if (options.ie8 || options.safari10) {\n        walk(this, node => {\n            if (node instanceof AST_SymbolCatch) {\n                var name = node.name;\n                var refs = node.thedef.references;\n                var scope = node.scope.get_defun_scope();\n                var def = scope.find_variable(name)\n                    || toplevel.globals.get(name)\n                    || scope.def_variable(node);\n                refs.forEach(function(ref) {\n                    ref.thedef = def;\n                    ref.reference();\n                });\n                node.thedef = def;\n                node.reference();\n                return true;\n            }\n        });\n    }\n\n    // pass 4: add symbol definitions to loop scopes\n    // Safari/Webkit bug workaround - loop init let variable shadowing argument.\n    // https://github.com/mishoo/UglifyJS2/issues/1753\n    // https://bugs.webkit.org/show_bug.cgi?id=171041\n    if (options.safari10) {\n        for (const scope of for_scopes) {\n            scope.parent_scope.variables.forEach(function(def) {\n                push_uniq(scope.enclosed, def);\n            });\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"def_global\", function(node) {\n    var globals = this.globals, name = node.name;\n    if (globals.has(name)) {\n        return globals.get(name);\n    } else {\n        var g = new SymbolDef(this, node);\n        g.undeclared = true;\n        g.global = true;\n        globals.set(name, g);\n        return g;\n    }\n});\n\nAST_Scope.DEFMETHOD(\"init_scope_vars\", function(parent_scope) {\n    this.variables = new Map();         // map name to AST_SymbolVar (variables defined in this scope; includes functions)\n    this.uses_with = false;             // will be set to true if this or some nested scope uses the `with` statement\n    this.uses_eval = false;             // will be set to true if this or nested scope uses the global `eval`\n    this.parent_scope = parent_scope;   // the parent scope\n    this.enclosed = [];                 // a list of variables from this or outer scope(s) that are referenced from this or inner scopes\n    this.cname = -1;                    // the current index for mangling functions/variables\n});\n\nAST_Scope.DEFMETHOD(\"conflicting_def\", function (name) {\n    return (\n        this.enclosed.find(def => def.name === name)\n        || this.variables.has(name)\n        || (this.parent_scope && this.parent_scope.conflicting_def(name))\n    );\n});\n\nAST_Scope.DEFMETHOD(\"conflicting_def_shallow\", function (name) {\n    return (\n        this.enclosed.find(def => def.name === name)\n        || this.variables.has(name)\n    );\n});\n\nAST_Scope.DEFMETHOD(\"add_child_scope\", function (scope) {\n    // `scope` is going to be moved into `this` right now.\n    // Update the required scopes' information\n\n    if (scope.parent_scope === this) return;\n\n    scope.parent_scope = this;\n\n    // Propagate to this.uses_arguments from arrow functions\n    if ((scope instanceof AST_Arrow) && !this.uses_arguments) {\n        this.uses_arguments = walk(scope, node => {\n            if (\n                node instanceof AST_SymbolRef\n                && node.scope instanceof AST_Lambda\n                && node.name === \"arguments\"\n            ) {\n                return walk_abort;\n            }\n\n            if (node instanceof AST_Lambda && !(node instanceof AST_Arrow)) {\n                return true;\n            }\n        });\n    }\n\n    this.uses_with = this.uses_with || scope.uses_with;\n    this.uses_eval = this.uses_eval || scope.uses_eval;\n\n    const scope_ancestry = (() => {\n        const ancestry = [];\n        let cur = this;\n        do {\n            ancestry.push(cur);\n        } while ((cur = cur.parent_scope));\n        ancestry.reverse();\n        return ancestry;\n    })();\n\n    const new_scope_enclosed_set = new Set(scope.enclosed);\n    const to_enclose = [];\n    for (const scope_topdown of scope_ancestry) {\n        to_enclose.forEach(e => push_uniq(scope_topdown.enclosed, e));\n        for (const def of scope_topdown.variables.values()) {\n            if (new_scope_enclosed_set.has(def)) {\n                push_uniq(to_enclose, def);\n                push_uniq(scope_topdown.enclosed, def);\n            }\n        }\n    }\n});\n\nfunction find_scopes_visible_from(scopes) {\n    const found_scopes = new Set();\n\n    for (const scope of new Set(scopes)) {\n        (function bubble_up(scope) {\n            if (scope == null || found_scopes.has(scope)) return;\n\n            found_scopes.add(scope);\n\n            bubble_up(scope.parent_scope);\n        })(scope);\n    }\n\n    return [...found_scopes];\n}\n\n// Creates a symbol during compression\nAST_Scope.DEFMETHOD(\"create_symbol\", function(SymClass, {\n    source,\n    tentative_name,\n    scope,\n    conflict_scopes = [scope],\n    init = null\n} = {}) {\n    let symbol_name;\n\n    conflict_scopes = find_scopes_visible_from(conflict_scopes);\n\n    if (tentative_name) {\n        // Implement hygiene (no new names are conflicting with existing names)\n        tentative_name =\n            symbol_name =\n            tentative_name.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/ig, \"_\");\n\n        let i = 0;\n        while (conflict_scopes.find(s => s.conflicting_def_shallow(symbol_name))) {\n            symbol_name = tentative_name + \"$\" + i++;\n        }\n    }\n\n    if (!symbol_name) {\n        throw new Error(\"No symbol name could be generated in create_symbol()\");\n    }\n\n    const symbol = make_node(SymClass, source, {\n        name: symbol_name,\n        scope\n    });\n\n    this.def_variable(symbol, init || null);\n\n    symbol.mark_enclosed();\n\n    return symbol;\n});\n\n\nAST_Node.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Class.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Lambda.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Toplevel.DEFMETHOD(\"is_block_scope\", return_false);\nAST_SwitchBranch.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Block.DEFMETHOD(\"is_block_scope\", return_true);\nAST_Scope.DEFMETHOD(\"is_block_scope\", function () {\n    return this._block_scope || false;\n});\nAST_IterationStatement.DEFMETHOD(\"is_block_scope\", return_true);\n\nAST_Lambda.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n    this.def_variable(new AST_SymbolFunarg({\n        name: \"arguments\",\n        start: this.start,\n        end: this.end\n    }));\n});\n\nAST_Arrow.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n});\n\nAST_Symbol.DEFMETHOD(\"mark_enclosed\", function() {\n    var def = this.definition();\n    var s = this.scope;\n    while (s) {\n        push_uniq(s.enclosed, def);\n        if (s === def.scope) break;\n        s = s.parent_scope;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"reference\", function() {\n    this.definition().references.push(this);\n    this.mark_enclosed();\n});\n\nAST_Scope.DEFMETHOD(\"find_variable\", function(name) {\n    if (name instanceof AST_Symbol) name = name.name;\n    return this.variables.get(name)\n        || (this.parent_scope && this.parent_scope.find_variable(name));\n});\n\nAST_Scope.DEFMETHOD(\"def_function\", function(symbol, init) {\n    var def = this.def_variable(symbol, init);\n    if (!def.init || def.init instanceof AST_Defun) def.init = init;\n    return def;\n});\n\nAST_Scope.DEFMETHOD(\"def_variable\", function(symbol, init) {\n    var def = this.variables.get(symbol.name);\n    if (def) {\n        def.orig.push(symbol);\n        if (def.init && (def.scope !== symbol.scope || def.init instanceof AST_Function)) {\n            def.init = init;\n        }\n    } else {\n        def = new SymbolDef(this, symbol, init);\n        this.variables.set(symbol.name, def);\n        def.global = !this.parent_scope;\n    }\n    return symbol.thedef = def;\n});\n\nfunction next_mangled(scope, options) {\n    let defun_scope;\n    if (\n        scopes_with_block_defuns\n        && (defun_scope = scope.get_defun_scope())\n        && scopes_with_block_defuns.has(defun_scope)\n    ) {\n        scope = defun_scope;\n    }\n\n    var ext = scope.enclosed;\n    var nth_identifier = options.nth_identifier;\n    out: while (true) {\n        var m = nth_identifier.get(++scope.cname);\n        if (ALL_RESERVED_WORDS.has(m)) continue; // skip over \"do\"\n\n        // https://github.com/mishoo/UglifyJS2/issues/242 -- do not\n        // shadow a name reserved from mangling.\n        if (options.reserved.has(m)) continue;\n\n        // Functions with short names might collide with base54 output\n        // and therefore cause collisions when keep_fnames is true.\n        if (unmangleable_names && unmangleable_names.has(m)) continue out;\n\n        // we must ensure that the mangled name does not shadow a name\n        // from some parent scope that is referenced in this or in\n        // inner scopes.\n        for (let i = ext.length; --i >= 0;) {\n            const def = ext[i];\n            const name = def.mangled_name || (def.unmangleable(options) && def.name);\n            if (m == name) continue out;\n        }\n        return m;\n    }\n}\n\nAST_Scope.DEFMETHOD(\"next_mangled\", function(options) {\n    return next_mangled(this, options);\n});\n\nAST_Toplevel.DEFMETHOD(\"next_mangled\", function(options) {\n    let name;\n    const mangled_names = this.mangled_names;\n    do {\n        name = next_mangled(this, options);\n    } while (mangled_names.has(name));\n    return name;\n});\n\nAST_Function.DEFMETHOD(\"next_mangled\", function(options, def) {\n    // #179, #326\n    // in Safari strict mode, something like (function x(x){...}) is a syntax error;\n    // a function expression's argument cannot shadow the function expression's name\n\n    var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();\n\n    // the function's mangled_name is null when keep_fnames is true\n    var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;\n\n    while (true) {\n        var name = next_mangled(this, options);\n        if (!tricky_name || tricky_name != name)\n            return name;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"unmangleable\", function(options) {\n    var def = this.definition();\n    return !def || def.unmangleable(options);\n});\n\n// labels are always mangleable\nAST_Label.DEFMETHOD(\"unmangleable\", return_false);\n\nAST_Symbol.DEFMETHOD(\"unreferenced\", function() {\n    return !this.definition().references.length && !this.scope.pinned();\n});\n\nAST_Symbol.DEFMETHOD(\"definition\", function() {\n    return this.thedef;\n});\n\nAST_Symbol.DEFMETHOD(\"global\", function() {\n    return this.thedef.global;\n});\n\n/**\n * Format the mangler options (if any) into their appropriate types\n */\nexport function format_mangler_options(options) {\n    options = defaults(options, {\n        eval        : false,\n        nth_identifier : base54,\n        ie8         : false,\n        keep_classnames: false,\n        keep_fnames : false,\n        module      : false,\n        reserved    : [],\n        toplevel    : false,\n    });\n    if (options.module) options.toplevel = true;\n    if (!Array.isArray(options.reserved)\n        && !(options.reserved instanceof Set)\n    ) {\n        options.reserved = [];\n    }\n    options.reserved = new Set(options.reserved);\n    // Never mangle arguments\n    options.reserved.add(\"arguments\");\n    return options;\n}\n\nAST_Toplevel.DEFMETHOD(\"mangle_names\", function(options) {\n    options = format_mangler_options(options);\n    var nth_identifier = options.nth_identifier;\n\n    // We only need to mangle declaration nodes.  Special logic wired\n    // into the code generator will display the mangled name if it's\n    // present (and for AST_SymbolRef-s it'll use the mangled name of\n    // the AST_SymbolDeclaration that it points to).\n    var lname = -1;\n    var to_mangle = [];\n\n    if (options.keep_fnames) {\n        function_defs = new Set();\n    }\n\n    const mangled_names = this.mangled_names = new Set();\n    unmangleable_names = new Set();\n\n    if (options.cache) {\n        this.globals.forEach(collect);\n        if (options.cache.props) {\n            options.cache.props.forEach(function(mangled_name) {\n                mangled_names.add(mangled_name);\n            });\n        }\n    }\n\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_LabeledStatement) {\n            // lname is incremented when we get to the AST_Label\n            var save_nesting = lname;\n            descend();\n            lname = save_nesting;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (\n            node instanceof AST_Defun\n            && !(tw.parent() instanceof AST_Scope)\n        ) {\n            scopes_with_block_defuns = scopes_with_block_defuns || new Set();\n            scopes_with_block_defuns.add(node.parent_scope.get_defun_scope());\n        }\n        if (node instanceof AST_Scope) {\n            node.variables.forEach(collect);\n            return;\n        }\n        if (node.is_block_scope()) {\n            node.block_scope.variables.forEach(collect);\n            return;\n        }\n        if (\n            function_defs\n            && node instanceof AST_VarDef\n            && node.value instanceof AST_Lambda\n            && !node.value.name\n            && keep_name(options.keep_fnames, node.name.name)\n        ) {\n            function_defs.add(node.name.definition().id);\n            return;\n        }\n        if (node instanceof AST_Label) {\n            let name;\n            do {\n                name = nth_identifier.get(++lname);\n            } while (ALL_RESERVED_WORDS.has(name));\n            node.mangled_name = name;\n            return true;\n        }\n        if (!(options.ie8 || options.safari10) && node instanceof AST_SymbolCatch) {\n            to_mangle.push(node.definition());\n            return;\n        }\n    });\n\n    this.walk(tw);\n\n    if (options.keep_fnames || options.keep_classnames) {\n        // Collect a set of short names which are unmangleable,\n        // for use in avoiding collisions in next_mangled.\n        to_mangle.forEach(def => {\n            if (def.name.length < 6 && def.unmangleable(options)) {\n                unmangleable_names.add(def.name);\n            }\n        });\n    }\n\n    to_mangle.forEach(def => { def.mangle(options); });\n\n    function_defs = null;\n    unmangleable_names = null;\n    scopes_with_block_defuns = null;\n\n    function collect(symbol) {\n        if (symbol.export & MASK_EXPORT_DONT_MANGLE) {\n            unmangleable_names.add(symbol.name);\n        } else if (!options.reserved.has(symbol.name)) {\n            to_mangle.push(symbol);\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"find_colliding_names\", function(options) {\n    const cache = options.cache && options.cache.props;\n    const avoid = new Set();\n    options.reserved.forEach(to_avoid);\n    this.globals.forEach(add_def);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(add_def);\n        if (node instanceof AST_SymbolCatch) add_def(node.definition());\n    }));\n    return avoid;\n\n    function to_avoid(name) {\n        avoid.add(name);\n    }\n\n    function add_def(def) {\n        var name = def.name;\n        if (def.global && cache && cache.has(name)) name = cache.get(name);\n        else if (!def.unmangleable(options)) return;\n        to_avoid(name);\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"expand_names\", function(options) {\n    options = format_mangler_options(options);\n    var nth_identifier = options.nth_identifier;\n    if (nth_identifier.reset && nth_identifier.sort) {\n        nth_identifier.reset();\n        nth_identifier.sort();\n    }\n    var avoid = this.find_colliding_names(options);\n    var cname = 0;\n    this.globals.forEach(rename);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(rename);\n        if (node instanceof AST_SymbolCatch) rename(node.definition());\n    }));\n\n    function next_name() {\n        var name;\n        do {\n            name = nth_identifier.get(cname++);\n        } while (avoid.has(name) || ALL_RESERVED_WORDS.has(name));\n        return name;\n    }\n\n    function rename(def) {\n        if (def.global && options.cache) return;\n        if (def.unmangleable(options)) return;\n        if (options.reserved.has(def.name)) return;\n        const redefinition = redefined_catch_def(def);\n        const name = def.name = redefinition ? redefinition.name : next_name();\n        def.orig.forEach(function(sym) {\n            sym.name = name;\n        });\n        def.references.forEach(function(sym) {\n            sym.name = name;\n        });\n    }\n});\n\nAST_Node.DEFMETHOD(\"tail_node\", return_this);\nAST_Sequence.DEFMETHOD(\"tail_node\", function() {\n    return this.expressions[this.expressions.length - 1];\n});\n\nAST_Toplevel.DEFMETHOD(\"compute_char_frequency\", function(options) {\n    options = format_mangler_options(options);\n    var nth_identifier = options.nth_identifier;\n    if (!nth_identifier.reset || !nth_identifier.consider || !nth_identifier.sort) {\n        // If the identifier mangler is invariant, skip computing character frequency.\n        return;\n    }\n    nth_identifier.reset();\n\n    try {\n        AST_Node.prototype.print = function(stream, force_parens) {\n            this._print(stream, force_parens);\n            if (this instanceof AST_Symbol && !this.unmangleable(options)) {\n                nth_identifier.consider(this.name, -1);\n            } else if (options.properties) {\n                if (this instanceof AST_DotHash) {\n                    nth_identifier.consider(\"#\" + this.property, -1);\n                } else if (this instanceof AST_Dot) {\n                    nth_identifier.consider(this.property, -1);\n                } else if (this instanceof AST_Sub) {\n                    skip_string(this.property);\n                }\n            }\n        };\n        nth_identifier.consider(this.print_to_string(), 1);\n    } finally {\n        AST_Node.prototype.print = AST_Node.prototype._print;\n    }\n    nth_identifier.sort();\n\n    function skip_string(node) {\n        if (node instanceof AST_String) {\n            nth_identifier.consider(node.value, -1);\n        } else if (node instanceof AST_Conditional) {\n            skip_string(node.consequent);\n            skip_string(node.alternative);\n        } else if (node instanceof AST_Sequence) {\n            skip_string(node.tail_node());\n        }\n    }\n});\n\nconst base54 = (() => {\n    const leading = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\".split(\"\");\n    const digits = \"0123456789\".split(\"\");\n    let chars;\n    let frequency;\n    function reset() {\n        frequency = new Map();\n        leading.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n        digits.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n    }\n    function consider(str, delta) {\n        for (var i = str.length; --i >= 0;) {\n            frequency.set(str[i], frequency.get(str[i]) + delta);\n        }\n    }\n    function compare(a, b) {\n        return frequency.get(b) - frequency.get(a);\n    }\n    function sort() {\n        chars = mergeSort(leading, compare).concat(mergeSort(digits, compare));\n    }\n    // Ensure this is in a usable initial state.\n    reset();\n    sort();\n    function base54(num) {\n        var ret = \"\", base = 54;\n        num++;\n        do {\n            num--;\n            ret += chars[num % base];\n            num = Math.floor(num / base);\n            base = 64;\n        } while (num > 0);\n        return ret;\n    }\n\n    return {\n        get: base54,\n        consider,\n        reset,\n        sort\n    };\n})();\n\nexport {\n    base54,\n    SymbolDef,\n};\n", "import {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Class,\n    AST_ClassStaticBlock,\n    AST_ClassPrivateProperty,\n    AST_ClassProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DotHash,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Infinity,\n    AST_LabeledStatement,\n    AST_Let,\n    AST_NameMapping,\n    AST_NaN,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectKeyVal,\n    AST_ObjectGetter,\n    AST_ObjectSetter,\n    AST_PrivateGetter,\n    AST_PrivateMethod,\n    AST_PrivateSetter,\n    AST_PrivateIn,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_Symbol,\n    AST_SymbolClassProperty,\n    AST_SymbolExportForeign,\n    AST_SymbolImportForeign,\n    AST_SymbolRef,\n    AST_SymbolDeclaration,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Catch,\n    AST_Finally,\n    AST_Unary,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    walk_parent\n} from \"./ast.js\";\nimport { first_in_statement } from \"./utils/first_in_statement.js\";\n\nlet mangle_options = undefined;\nAST_Node.prototype.size = function (compressor, stack) {\n    mangle_options = compressor && compressor.mangle_options;\n\n    let size = 0;\n    walk_parent(this, (node, info) => {\n        size += node._size(info);\n\n        // Braceless arrow functions have fake \"return\" statements\n        if (node instanceof AST_Arrow && node.is_braceless()) {\n            size += node.body[0].value._size(info);\n            return true;\n        }\n    }, stack || (compressor && compressor.stack));\n\n    // just to save a bit of memory\n    mangle_options = undefined;\n\n    return size;\n};\n\nAST_Node.prototype._size = () => 0;\n\nAST_Debugger.prototype._size = () => 8;\n\nAST_Directive.prototype._size = function () {\n    // TODO string encoding stuff\n    return 2 + this.value.length;\n};\n\n/** Count commas/semicolons necessary to show a list of expressions/statements */\nconst list_overhead = (array) => array.length && array.length - 1;\n\nAST_Block.prototype._size = function () {\n    return 2 + list_overhead(this.body);\n};\n\nAST_Toplevel.prototype._size = function() {\n    return list_overhead(this.body);\n};\n\nAST_EmptyStatement.prototype._size = () => 1;\n\nAST_LabeledStatement.prototype._size = () => 2;  // x:\n\nAST_Do.prototype._size = () => 9;\n\nAST_While.prototype._size = () => 7;\n\nAST_For.prototype._size = () => 8;\n\nAST_ForIn.prototype._size = () => 8;\n// AST_ForOf inherits ^\n\nAST_With.prototype._size = () => 6;\n\nAST_Expansion.prototype._size = () => 3;\n\nconst lambda_modifiers = func =>\n    (func.is_generator ? 1 : 0) + (func.async ? 6 : 0);\n\nAST_Accessor.prototype._size = function () {\n    return lambda_modifiers(this) + 4 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Function.prototype._size = function (info) {\n    const first = !!first_in_statement(info);\n    return (first * 2) + lambda_modifiers(this) + 12 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Defun.prototype._size = function () {\n    return lambda_modifiers(this) + 13 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Arrow.prototype._size = function () {\n    let args_and_arrow = 2 + list_overhead(this.argnames);\n\n    if (\n        !(\n            this.argnames.length === 1\n            && this.argnames[0] instanceof AST_Symbol\n        )\n    ) {\n        args_and_arrow += 2; // parens around the args\n    }\n\n    const body_overhead = this.is_braceless() ? 0 : list_overhead(this.body) + 2;\n\n    return lambda_modifiers(this) + args_and_arrow + body_overhead;\n};\n\nAST_Destructuring.prototype._size = () => 2;\n\nAST_TemplateString.prototype._size = function () {\n    return 2 + (Math.floor(this.segments.length / 2) * 3);  /* \"${}\" */\n};\n\nAST_TemplateSegment.prototype._size = function () {\n    return this.value.length;\n};\n\nAST_Return.prototype._size = function () {\n    return this.value ? 7 : 6;\n};\n\nAST_Throw.prototype._size = () => 6;\n\nAST_Break.prototype._size = function () {\n    return this.label ? 6 : 5;\n};\n\nAST_Continue.prototype._size = function () {\n    return this.label ? 9 : 8;\n};\n\nAST_If.prototype._size = () => 4;\n\nAST_Switch.prototype._size = function () {\n    return 8 + list_overhead(this.body);\n};\n\nAST_Case.prototype._size = function () {\n    return 5 + list_overhead(this.body);\n};\n\nAST_Default.prototype._size = function () {\n    return 8 + list_overhead(this.body);\n};\n\nAST_Try.prototype._size = () => 3;\n\nAST_Catch.prototype._size = function () {\n    let size = 7 + list_overhead(this.body);\n    if (this.argname) {\n        size += 2;\n    }\n    return size;\n};\n\nAST_Finally.prototype._size = function () {\n    return 7 + list_overhead(this.body);\n};\n\nAST_Var.prototype._size = function () {\n    return 4 + list_overhead(this.definitions);\n};\n\nAST_Let.prototype._size = function () {\n    return 4 + list_overhead(this.definitions);\n};\n\nAST_Const.prototype._size = function () {\n    return 6 + list_overhead(this.definitions);\n};\n\nAST_VarDef.prototype._size = function () {\n    return this.value ? 1 : 0;\n};\n\nAST_NameMapping.prototype._size = function () {\n    // foreign name isn't mangled\n    return this.name ? 4 : 0;\n};\n\nAST_Import.prototype._size = function () {\n    // import\n    let size = 6;\n\n    if (this.imported_name) size += 1;\n\n    // from\n    if (this.imported_name || this.imported_names) size += 5;\n\n    // braces, and the commas\n    if (this.imported_names) {\n        size += 2 + list_overhead(this.imported_names);\n    }\n\n    return size;\n};\n\nAST_ImportMeta.prototype._size = () => 11;\n\nAST_Export.prototype._size = function () {\n    let size = 7 + (this.is_default ? 8 : 0);\n\n    if (this.exported_value) {\n        size += this.exported_value._size();\n    }\n\n    if (this.exported_names) {\n        // Braces and commas\n        size += 2 + list_overhead(this.exported_names);\n    }\n\n    if (this.module_name) {\n        // \"from \"\n        size += 5;\n    }\n\n    return size;\n};\n\nAST_Call.prototype._size = function () {\n    if (this.optional) {\n        return 4 + list_overhead(this.args);\n    }\n    return 2 + list_overhead(this.args);\n};\n\nAST_New.prototype._size = function () {\n    return 6 + list_overhead(this.args);\n};\n\nAST_Sequence.prototype._size = function () {\n    return list_overhead(this.expressions);\n};\n\nAST_Dot.prototype._size = function () {\n    if (this.optional) {\n        return this.property.length + 2;\n    }\n    return this.property.length + 1;\n};\n\nAST_DotHash.prototype._size = function () {\n    if (this.optional) {\n        return this.property.length + 3;\n    }\n    return this.property.length + 2;\n};\n\nAST_Sub.prototype._size = function () {\n    return this.optional ? 4 : 2;\n};\n\nAST_Unary.prototype._size = function () {\n    if (this.operator === \"typeof\") return 7;\n    if (this.operator === \"void\") return 5;\n    return this.operator.length;\n};\n\nAST_Binary.prototype._size = function (info) {\n    if (this.operator === \"in\") return 4;\n\n    let size = this.operator.length;\n\n    if (\n        (this.operator === \"+\" || this.operator === \"-\")\n        && this.right instanceof AST_Unary && this.right.operator === this.operator\n    ) {\n        // 1+ +a > needs space between the +\n        size += 1;\n    }\n\n    if (this.needs_parens(info)) {\n        size += 2;\n    }\n\n    return size;\n};\n\nAST_Conditional.prototype._size = () => 3;\n\nAST_Array.prototype._size = function () {\n    return 2 + list_overhead(this.elements);\n};\n\nAST_Object.prototype._size = function (info) {\n    let base = 2;\n    if (first_in_statement(info)) {\n        base += 2; // parens\n    }\n    return base + list_overhead(this.properties);\n};\n\n/*#__INLINE__*/\nconst key_size = key =>\n    typeof key === \"string\" ? key.length : 0;\n\nAST_ObjectKeyVal.prototype._size = function () {\n    return key_size(this.key) + 1;\n};\n\n/*#__INLINE__*/\nconst static_size = is_static => is_static ? 7 : 0;\n\nAST_ObjectGetter.prototype._size = function () {\n    return 5 + static_size(this.static) + key_size(this.key);\n};\n\nAST_ObjectSetter.prototype._size = function () {\n    return 5 + static_size(this.static) + key_size(this.key);\n};\n\nAST_ConciseMethod.prototype._size = function () {\n    return static_size(this.static) + key_size(this.key) + lambda_modifiers(this);\n};\n\nAST_PrivateMethod.prototype._size = function () {\n    return AST_ConciseMethod.prototype._size.call(this) + 1;\n};\n\nAST_PrivateGetter.prototype._size = AST_PrivateSetter.prototype._size = function () {\n    return AST_ConciseMethod.prototype._size.call(this) + 4;\n};\n\nAST_PrivateIn.prototype._size = function () {\n    return 5; // \"#\", and \" in \"\n};\n\nAST_Class.prototype._size = function () {\n    return (\n        (this.name ? 8 : 7)\n        + (this.extends ? 8 : 0)\n    );\n};\n\nAST_ClassStaticBlock.prototype._size = function () {\n    // \"class{}\" + semicolons\n    return 7 + list_overhead(this.body);\n};\n\nAST_ClassProperty.prototype._size = function () {\n    return (\n        static_size(this.static)\n        + (typeof this.key === \"string\" ? this.key.length + 2 : 0)\n        + (this.value ? 1 : 0)\n    );\n};\n\nAST_ClassPrivateProperty.prototype._size = function () {\n    return AST_ClassProperty.prototype._size.call(this) + 1;\n};\n\nAST_Symbol.prototype._size = function () {\n    if (!(mangle_options && this.thedef && !this.thedef.unmangleable(mangle_options))) {\n        return this.name.length;\n    } else {\n        return 1;\n    }\n};\n\n// TODO take propmangle into account\nAST_SymbolClassProperty.prototype._size = function () {\n    return this.name.length;\n};\n\nAST_SymbolRef.prototype._size = AST_SymbolDeclaration.prototype._size = function () {\n    if (this.name === \"arguments\") return 9;\n\n    return AST_Symbol.prototype._size.call(this);\n};\n\nAST_NewTarget.prototype._size = () => 10;\n\nAST_SymbolImportForeign.prototype._size = function () {\n    return this.name.length;\n};\n\nAST_SymbolExportForeign.prototype._size = function () {\n    return this.name.length;\n};\n\nAST_This.prototype._size = () => 4;\n\nAST_Super.prototype._size = () => 5;\n\nAST_String.prototype._size = function () {\n    return this.value.length + 2;\n};\n\nAST_Number.prototype._size = function () {\n    const { value } = this;\n    if (value === 0) return 1;\n    if (value > 0 && Math.floor(value) === value) {\n        return Math.floor(Math.log10(value) + 1);\n    }\n    return value.toString().length;\n};\n\nAST_BigInt.prototype._size = function () {\n    return this.value.length;\n};\n\nAST_RegExp.prototype._size = function () {\n    return this.value.toString().length;\n};\n\nAST_Null.prototype._size = () => 4;\n\nAST_NaN.prototype._size = () => 3;\n\nAST_Undefined.prototype._size = () => 6; // \"void 0\"\n\nAST_Hole.prototype._size = () => 0;  // comma is taken into account by list_overhead()\n\nAST_Infinity.prototype._size = () => 8;\n\nAST_True.prototype._size = () => 4;\n\nAST_False.prototype._size = () => 5;\n\nAST_Await.prototype._size = () => 6;\n\nAST_Yield.prototype._size = () => 6;\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n// bitfield flags to be stored in node.flags.\n// These are set and unset during compression, and store information in the node without requiring multiple fields.\nexport const UNUSED = 0b00000001;\nexport const TRUTHY = 0b00000010;\nexport const FALSY = 0b00000100;\nexport const UNDEFINED = 0b00001000;\nexport const INLINED = 0b00010000;\n\n// Nodes to which values are ever written. Used when keep_assign is part of the unused option string.\nexport const WRITE_ONLY = 0b00100000;\n\n// information specific to a single compression pass\nexport const SQUEEZED = 0b0000000100000000;\nexport const OPTIMIZED = 0b0000001000000000;\nexport const TOP = 0b0000010000000000;\nexport const CLEAR_BETWEEN_PASSES = SQUEEZED | OPTIMIZED | TOP;\n\nexport const has_flag = (node, flag) => node.flags & flag;\nexport const set_flag = (node, flag) => { node.flags |= flag; };\nexport const clear_flag = (node, flag) => { node.flags &= ~flag; };\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_BlockStatement,\n    AST_Call,\n    AST_Class,\n    AST_Const,\n    AST_Constant,\n    AST_DefClass,\n    AST_Defun,\n    AST_EmptyStatement,\n    AST_Export,\n    AST_False,\n    AST_Function,\n    AST_Import,\n    AST_Infinity,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NaN,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectKeyVal,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_SymbolRef,\n    AST_True,\n    AST_UnaryPrefix,\n    AST_Undefined,\n\n    TreeWalker,\n    walk,\n    walk_abort,\n    walk_parent,\n} from \"../ast.js\";\nimport { make_node, regexp_source_fix, string_template, makePredicate } from \"../utils/index.js\";\nimport { first_in_statement } from \"../utils/first_in_statement.js\";\nimport { has_flag, TOP } from \"./compressor-flags.js\";\n\nexport function merge_sequence(array, node) {\n    if (node instanceof AST_Sequence) {\n        array.push(...node.expressions);\n    } else {\n        array.push(node);\n    }\n    return array;\n}\n\nexport function make_sequence(orig, expressions) {\n    if (expressions.length == 1) return expressions[0];\n    if (expressions.length == 0) throw new Error(\"trying to create a sequence with length zero!\");\n    return make_node(AST_Sequence, orig, {\n        expressions: expressions.reduce(merge_sequence, [])\n    });\n}\n\nexport function make_node_from_constant(val, orig) {\n    switch (typeof val) {\n      case \"string\":\n        return make_node(AST_String, orig, {\n            value: val\n        });\n      case \"number\":\n        if (isNaN(val)) return make_node(AST_NaN, orig);\n        if (isFinite(val)) {\n            return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                operator: \"-\",\n                expression: make_node(AST_Number, orig, { value: -val })\n            }) : make_node(AST_Number, orig, { value: val });\n        }\n        return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n            operator: \"-\",\n            expression: make_node(AST_Infinity, orig)\n        }) : make_node(AST_Infinity, orig);\n      case \"boolean\":\n        return make_node(val ? AST_True : AST_False, orig);\n      case \"undefined\":\n        return make_node(AST_Undefined, orig);\n      default:\n        if (val === null) {\n            return make_node(AST_Null, orig, { value: null });\n        }\n        if (val instanceof RegExp) {\n            return make_node(AST_RegExp, orig, {\n                value: {\n                    source: regexp_source_fix(val.source),\n                    flags: val.flags\n                }\n            });\n        }\n        throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n            type: typeof val\n        }));\n    }\n}\n\nexport function best_of_expression(ast1, ast2) {\n    return ast1.size() > ast2.size() ? ast2 : ast1;\n}\n\nexport function best_of_statement(ast1, ast2) {\n    return best_of_expression(\n        make_node(AST_SimpleStatement, ast1, {\n            body: ast1\n        }),\n        make_node(AST_SimpleStatement, ast2, {\n            body: ast2\n        })\n    ).body;\n}\n\n/** Find which node is smaller, and return that */\nexport function best_of(compressor, ast1, ast2) {\n    if (first_in_statement(compressor)) {\n        return best_of_statement(ast1, ast2);\n    } else {\n        return best_of_expression(ast1, ast2);\n    }\n}\n\n/** Simplify an object property's key, if possible */\nexport function get_simple_key(key) {\n    if (key instanceof AST_Constant) {\n        return key.getValue();\n    }\n    if (key instanceof AST_UnaryPrefix\n        && key.operator == \"void\"\n        && key.expression instanceof AST_Constant) {\n        return;\n    }\n    return key;\n}\n\nexport function read_property(obj, key) {\n    key = get_simple_key(key);\n    if (key instanceof AST_Node) return;\n\n    var value;\n    if (obj instanceof AST_Array) {\n        var elements = obj.elements;\n        if (key == \"length\") return make_node_from_constant(elements.length, obj);\n        if (typeof key == \"number\" && key in elements) value = elements[key];\n    } else if (obj instanceof AST_Object) {\n        key = \"\" + key;\n        var props = obj.properties;\n        for (var i = props.length; --i >= 0;) {\n            var prop = props[i];\n            if (!(prop instanceof AST_ObjectKeyVal)) return;\n            if (!value && props[i].key === key) value = props[i].value;\n        }\n    }\n\n    return value instanceof AST_SymbolRef && value.fixed_value() || value;\n}\n\nexport function has_break_or_continue(loop, parent) {\n    var found = false;\n    var tw = new TreeWalker(function(node) {\n        if (found || node instanceof AST_Scope) return true;\n        if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === loop) {\n            return found = true;\n        }\n    });\n    if (parent instanceof AST_LabeledStatement) tw.push(parent);\n    tw.push(loop);\n    loop.body.walk(tw);\n    return found;\n}\n\n// we shouldn't compress (1,func)(something) to\n// func(something) because that changes the meaning of\n// the func (becomes lexical instead of global).\nexport function maintain_this_binding(parent, orig, val) {\n    if (\n        parent instanceof AST_UnaryPrefix && parent.operator == \"delete\"\n        || parent instanceof AST_Call && parent.expression === orig\n            && (\n                val instanceof AST_PropAccess\n                || val instanceof AST_SymbolRef && val.name == \"eval\"\n            )\n    ) {\n        const zero = make_node(AST_Number, orig, { value: 0 });\n        return make_sequence(orig, [ zero, val ]);\n    } else {\n        return val;\n    }\n}\n\nexport function is_func_expr(node) {\n    return node instanceof AST_Arrow || node instanceof AST_Function;\n}\n\n/**\n * Used to determine whether the node can benefit from negation.\n * Not the case with arrow functions (you need an extra set of parens). */\nexport function is_iife_call(node) {\n    if (node.TYPE != \"Call\") return false;\n    return node.expression instanceof AST_Function || is_iife_call(node.expression);\n}\n\nexport function is_empty(thing) {\n    if (thing === null) return true;\n    if (thing instanceof AST_EmptyStatement) return true;\n    if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n    return false;\n}\n\nexport const identifier_atom = makePredicate(\"Infinity NaN undefined\");\nexport function is_identifier_atom(node) {\n    return node instanceof AST_Infinity\n        || node instanceof AST_NaN\n        || node instanceof AST_Undefined;\n}\n\n/** Check if this is a SymbolRef node which has one def of a certain AST type */\nexport function is_ref_of(ref, type) {\n    if (!(ref instanceof AST_SymbolRef)) return false;\n    var orig = ref.definition().orig;\n    for (var i = orig.length; --i >= 0;) {\n        if (orig[i] instanceof type) return true;\n    }\n}\n\n/**Can we turn { block contents... } into just the block contents ?\n * Not if one of these is inside.\n **/\nexport function can_be_evicted_from_block(node) {\n    return !(\n        node instanceof AST_DefClass ||\n        node instanceof AST_Defun ||\n        node instanceof AST_Let ||\n        node instanceof AST_Const ||\n        node instanceof AST_Export ||\n        node instanceof AST_Import\n    );\n}\n\nexport function as_statement_array(thing) {\n    if (thing === null) return [];\n    if (thing instanceof AST_BlockStatement) return thing.body;\n    if (thing instanceof AST_EmptyStatement) return [];\n    if (thing instanceof AST_Statement) return [ thing ];\n    throw new Error(\"Can't convert thing to statement array\");\n}\n\nexport function is_reachable(scope_node, defs) {\n    const find_ref = node => {\n        if (node instanceof AST_SymbolRef && defs.includes(node.definition())) {\n            return walk_abort;\n        }\n    };\n\n    return walk_parent(scope_node, (node, info) => {\n        if (node instanceof AST_Scope && node !== scope_node) {\n            var parent = info.parent();\n\n            if (\n                parent instanceof AST_Call\n                && parent.expression === node\n                // Async/Generators aren't guaranteed to sync evaluate all of\n                // their body steps, so it's possible they close over the variable.\n                && !(node.async || node.is_generator)\n            ) {\n                return;\n            }\n\n            if (walk(node, find_ref)) return walk_abort;\n\n            return true;\n        }\n    });\n}\n\n/** Check if a ref refers to the name of a function/class it's defined within */\nexport function is_recursive_ref(compressor, def) {\n    var node;\n    for (var i = 0; node = compressor.parent(i); i++) {\n        if (node instanceof AST_Lambda || node instanceof AST_Class) {\n            var name = node.name;\n            if (name && name.definition() === def) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// TODO this only works with AST_Defun, shouldn't it work for other ways of defining functions?\nexport function retain_top_func(fn, compressor) {\n    return compressor.top_retain\n        && fn instanceof AST_Defun\n        && has_flag(fn, TOP)\n        && fn.name\n        && compressor.top_retain(fn.name);\n}\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport { makePredicate } from \"../utils/index.js\";\n\n// Lists of native methods, useful for `unsafe` option which assumes they exist.\n// Note: Lots of methods and functions are missing here, in case they aren't pure\n// or not available in all JS environments.\n\nfunction make_nested_lookup(obj) {\n    const out = new Map();\n    for (var key of Object.keys(obj)) {\n        out.set(key, makePredicate(obj[key]));\n    }\n\n    const does_have = (global_name, fname) => {\n        const inner_map = out.get(global_name);\n        return inner_map != null && inner_map.has(fname);\n    };\n    return does_have;\n}\n\n// Objects which are safe to access without throwing or causing a side effect.\n// Usually we'd check the `unsafe` option first but these are way too common for that\nexport const pure_prop_access_globals = new Set([\n    \"Number\",\n    \"String\",\n    \"Array\",\n    \"Object\",\n    \"Function\",\n    \"Promise\",\n]);\n\nconst object_methods = [\n    \"constructor\",\n    \"toString\",\n    \"valueOf\",\n];\n\nexport const is_pure_native_method = make_nested_lookup({\n    Array: [\n        \"at\",\n        \"flat\",\n        \"includes\",\n        \"indexOf\",\n        \"join\",\n        \"lastIndexOf\",\n        \"slice\",\n        ...object_methods,\n    ],\n    Boolean: object_methods,\n    Function: object_methods,\n    Number: [\n        \"toExponential\",\n        \"toFixed\",\n        \"toPrecision\",\n        ...object_methods,\n    ],\n    Object: object_methods,\n    RegExp: [\n        \"test\",\n        ...object_methods,\n    ],\n    String: [\n        \"at\",\n        \"charAt\",\n        \"charCodeAt\",\n        \"charPointAt\",\n        \"concat\",\n        \"endsWith\",\n        \"fromCharCode\",\n        \"fromCodePoint\",\n        \"includes\",\n        \"indexOf\",\n        \"italics\",\n        \"lastIndexOf\",\n        \"localeCompare\",\n        \"match\",\n        \"matchAll\",\n        \"normalize\",\n        \"padStart\",\n        \"padEnd\",\n        \"repeat\",\n        \"replace\",\n        \"replaceAll\",\n        \"search\",\n        \"slice\",\n        \"split\",\n        \"startsWith\",\n        \"substr\",\n        \"substring\",\n        \"repeat\",\n        \"toLocaleLowerCase\",\n        \"toLocaleUpperCase\",\n        \"toLowerCase\",\n        \"toUpperCase\",\n        \"trim\",\n        \"trimEnd\",\n        \"trimStart\",\n        ...object_methods,\n    ],\n});\n\nexport const is_pure_native_fn = make_nested_lookup({\n    Array: [\n        \"isArray\",\n    ],\n    Math: [\n        \"abs\",\n        \"acos\",\n        \"asin\",\n        \"atan\",\n        \"ceil\",\n        \"cos\",\n        \"exp\",\n        \"floor\",\n        \"log\",\n        \"round\",\n        \"sin\",\n        \"sqrt\",\n        \"tan\",\n        \"atan2\",\n        \"pow\",\n        \"max\",\n        \"min\",\n    ],\n    Number: [\n        \"isFinite\",\n        \"isNaN\",\n    ],\n    Object: [\n        \"create\",\n        \"getOwnPropertyDescriptor\",\n        \"getOwnPropertyNames\",\n        \"getPrototypeOf\",\n        \"isExtensible\",\n        \"isFrozen\",\n        \"isSealed\",\n        \"hasOwn\",\n        \"keys\",\n    ],\n    String: [\n        \"fromCharCode\",\n    ],\n});\n\n// Known numeric values which come with JS environments\nexport const is_pure_native_value = make_nested_lookup({\n    Math: [\n        \"E\",\n        \"LN10\",\n        \"LN2\",\n        \"LOG2E\",\n        \"LOG10E\",\n        \"PI\",\n        \"SQRT1_2\",\n        \"SQRT2\",\n    ],\n    Number: [\n        \"MAX_VALUE\",\n        \"MIN_VALUE\",\n        \"NaN\",\n        \"NEGATIVE_INFINITY\",\n        \"POSITIVE_INFINITY\",\n    ],\n});\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n  AST_Array,\n  AST_Arrow,\n  AST_Assign,\n  AST_BigInt,\n  AST_Binary,\n  AST_Block,\n  AST_BlockStatement,\n  AST_Call,\n  AST_Case,\n  AST_Chain,\n  AST_Class,\n  AST_DefClass,\n  AST_ClassStaticBlock,\n  AST_ClassProperty,\n  AST_ConciseMethod,\n  AST_Conditional,\n  AST_Constant,\n  AST_Definitions,\n  AST_Dot,\n  AST_EmptyStatement,\n  AST_Expansion,\n  AST_False,\n  AST_Function,\n  AST_If,\n  AST_Import,\n  AST_ImportMeta,\n  AST_Jump,\n  AST_LabeledStatement,\n  AST_Lambda,\n  AST_New,\n  AST_Node,\n  AST_Null,\n  AST_Number,\n  AST_Object,\n  AST_ObjectGetter,\n  AST_ObjectKeyVal,\n  AST_ObjectProperty,\n  AST_ObjectSetter,\n  AST_PropAccess,\n  AST_RegExp,\n  AST_Return,\n  AST_Sequence,\n  AST_SimpleStatement,\n  AST_Statement,\n  AST_String,\n  AST_Sub,\n  AST_Switch,\n  AST_SwitchBranch,\n  AST_SymbolClassProperty,\n  AST_SymbolDeclaration,\n  AST_SymbolRef,\n  AST_TemplateSegment,\n  AST_TemplateString,\n  AST_This,\n  AST_Toplevel,\n  AST_True,\n  AST_Try,\n  AST_Unary,\n  AST_UnaryPostfix,\n  AST_UnaryPrefix,\n  AST_Undefined,\n  AST_VarDef,\n\n  TreeTransformer,\n  walk,\n  walk_abort,\n\n  _PURE\n} from \"../ast.js\";\nimport {\n    makePredicate,\n    return_true,\n    return_false,\n    return_null,\n    return_this,\n    make_node,\n    member,\n    noop,\n    has_annotation,\n    HOP\n} from \"../utils/index.js\";\nimport { make_node_from_constant, make_sequence, best_of_expression, read_property } from \"./common.js\";\n\nimport { INLINED, UNDEFINED, has_flag } from \"./compressor-flags.js\";\nimport { pure_prop_access_globals, is_pure_native_fn, is_pure_native_method } from \"./native-objects.js\";\n\n// Functions and methods to infer certain facts about expressions\n// It's not always possible to be 100% sure about something just by static analysis,\n// so `true` means yes, and `false` means maybe\n\nexport const is_undeclared_ref = (node) =>\n    node instanceof AST_SymbolRef && node.definition().undeclared;\n\nexport const lazy_op = makePredicate(\"&& || ??\");\nexport const unary_side_effects = makePredicate(\"delete ++ --\");\n\n// methods to determine whether an expression has a boolean result type\n(function(def_is_boolean) {\n    const unary_bool = makePredicate(\"! delete\");\n    const binary_bool = makePredicate(\"in instanceof == != === !== < <= >= >\");\n    def_is_boolean(AST_Node, return_false);\n    def_is_boolean(AST_UnaryPrefix, function() {\n        return unary_bool.has(this.operator);\n    });\n    def_is_boolean(AST_Binary, function() {\n        return binary_bool.has(this.operator)\n            || lazy_op.has(this.operator)\n                && this.left.is_boolean()\n                && this.right.is_boolean();\n    });\n    def_is_boolean(AST_Conditional, function() {\n        return this.consequent.is_boolean() && this.alternative.is_boolean();\n    });\n    def_is_boolean(AST_Assign, function() {\n        return this.operator == \"=\" && this.right.is_boolean();\n    });\n    def_is_boolean(AST_Sequence, function() {\n        return this.tail_node().is_boolean();\n    });\n    def_is_boolean(AST_True, return_true);\n    def_is_boolean(AST_False, return_true);\n})(function(node, func) {\n    node.DEFMETHOD(\"is_boolean\", func);\n});\n\n// methods to determine if an expression has a numeric result type\n(function(def_is_number) {\n    def_is_number(AST_Node, return_false);\n    def_is_number(AST_Number, return_true);\n    const unary = makePredicate(\"+ - ~ ++ --\");\n    def_is_number(AST_Unary, function() {\n        return unary.has(this.operator) && !(this.expression instanceof AST_BigInt);\n    });\n    const numeric_ops = makePredicate(\"- * / % & | ^ << >> >>>\");\n    def_is_number(AST_Binary, function(compressor) {\n        return numeric_ops.has(this.operator) || this.operator == \"+\"\n            && this.left.is_number(compressor)\n            && this.right.is_number(compressor);\n    });\n    def_is_number(AST_Assign, function(compressor) {\n        return numeric_ops.has(this.operator.slice(0, -1))\n            || this.operator == \"=\" && this.right.is_number(compressor);\n    });\n    def_is_number(AST_Sequence, function(compressor) {\n        return this.tail_node().is_number(compressor);\n    });\n    def_is_number(AST_Conditional, function(compressor) {\n        return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"is_number\", func);\n});\n\n// methods to determine if an expression has a string result type\n(function(def_is_string) {\n    def_is_string(AST_Node, return_false);\n    def_is_string(AST_String, return_true);\n    def_is_string(AST_TemplateString, return_true);\n    def_is_string(AST_UnaryPrefix, function() {\n        return this.operator == \"typeof\";\n    });\n    def_is_string(AST_Binary, function(compressor) {\n        return this.operator == \"+\" &&\n            (this.left.is_string(compressor) || this.right.is_string(compressor));\n    });\n    def_is_string(AST_Assign, function(compressor) {\n        return (this.operator == \"=\" || this.operator == \"+=\") && this.right.is_string(compressor);\n    });\n    def_is_string(AST_Sequence, function(compressor) {\n        return this.tail_node().is_string(compressor);\n    });\n    def_is_string(AST_Conditional, function(compressor) {\n        return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"is_string\", func);\n});\n\nexport function is_undefined(node, compressor) {\n    return (\n        has_flag(node, UNDEFINED)\n        || node instanceof AST_Undefined\n        || node instanceof AST_UnaryPrefix\n            && node.operator == \"void\"\n            && !node.expression.has_side_effects(compressor)\n    );\n}\n\n// Is the node explicitly null or undefined.\nfunction is_null_or_undefined(node, compressor) {\n    let fixed;\n    return (\n        node instanceof AST_Null\n        || is_undefined(node, compressor)\n        || (\n            node instanceof AST_SymbolRef\n            && (fixed = node.definition().fixed) instanceof AST_Node\n            && is_nullish(fixed, compressor)\n        )\n    );\n}\n\n// Find out if this expression is optionally chained from a base-point that we\n// can statically analyze as null or undefined.\nexport function is_nullish_shortcircuited(node, compressor) {\n    if (node instanceof AST_PropAccess || node instanceof AST_Call) {\n        return (\n            (node.optional && is_null_or_undefined(node.expression, compressor))\n            || is_nullish_shortcircuited(node.expression, compressor)\n        );\n    }\n    if (node instanceof AST_Chain) return is_nullish_shortcircuited(node.expression, compressor);\n    return false;\n}\n\n// Find out if something is == null, or can short circuit into nullish.\n// Used to optimize ?. and ??\nexport function is_nullish(node, compressor) {\n    if (is_null_or_undefined(node, compressor)) return true;\n    return is_nullish_shortcircuited(node, compressor);\n}\n\n// Determine if expression might cause side effects\n// If there's a possibility that a node may change something when it's executed, this returns true\n(function(def_has_side_effects) {\n    def_has_side_effects(AST_Node, return_true);\n\n    def_has_side_effects(AST_EmptyStatement, return_false);\n    def_has_side_effects(AST_Constant, return_false);\n    def_has_side_effects(AST_This, return_false);\n\n    function any(list, compressor) {\n        for (var i = list.length; --i >= 0;)\n            if (list[i].has_side_effects(compressor))\n                return true;\n        return false;\n    }\n\n    def_has_side_effects(AST_Block, function(compressor) {\n        return any(this.body, compressor);\n    });\n    def_has_side_effects(AST_Call, function(compressor) {\n        if (\n            !this.is_callee_pure(compressor)\n            && (!this.expression.is_call_pure(compressor)\n                || this.expression.has_side_effects(compressor))\n        ) {\n            return true;\n        }\n        return any(this.args, compressor);\n    });\n    def_has_side_effects(AST_Switch, function(compressor) {\n        return this.expression.has_side_effects(compressor)\n            || any(this.body, compressor);\n    });\n    def_has_side_effects(AST_Case, function(compressor) {\n        return this.expression.has_side_effects(compressor)\n            || any(this.body, compressor);\n    });\n    def_has_side_effects(AST_Try, function(compressor) {\n        return this.body.has_side_effects(compressor)\n            || this.bcatch && this.bcatch.has_side_effects(compressor)\n            || this.bfinally && this.bfinally.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_If, function(compressor) {\n        return this.condition.has_side_effects(compressor)\n            || this.body && this.body.has_side_effects(compressor)\n            || this.alternative && this.alternative.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_ImportMeta, return_false);\n    def_has_side_effects(AST_LabeledStatement, function(compressor) {\n        return this.body.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_SimpleStatement, function(compressor) {\n        return this.body.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_Lambda, return_false);\n    def_has_side_effects(AST_Class, function (compressor) {\n        if (this.extends && this.extends.has_side_effects(compressor)) {\n            return true;\n        }\n        return any(this.properties, compressor);\n    });\n    def_has_side_effects(AST_ClassStaticBlock, function(compressor) {\n        return any(this.body, compressor);\n    });\n    def_has_side_effects(AST_Binary, function(compressor) {\n        return this.left.has_side_effects(compressor)\n            || this.right.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_Assign, return_true);\n    def_has_side_effects(AST_Conditional, function(compressor) {\n        return this.condition.has_side_effects(compressor)\n            || this.consequent.has_side_effects(compressor)\n            || this.alternative.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_Unary, function(compressor) {\n        return unary_side_effects.has(this.operator)\n            || this.expression.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_SymbolRef, function(compressor) {\n        return !this.is_declared(compressor) && !pure_prop_access_globals.has(this.name);\n    });\n    def_has_side_effects(AST_SymbolClassProperty, return_false);\n    def_has_side_effects(AST_SymbolDeclaration, return_false);\n    def_has_side_effects(AST_Object, function(compressor) {\n        return any(this.properties, compressor);\n    });\n    def_has_side_effects(AST_ObjectProperty, function(compressor) {\n        return (\n            this.computed_key() && this.key.has_side_effects(compressor)\n            || this.value && this.value.has_side_effects(compressor)\n        );\n    });\n    def_has_side_effects(AST_ClassProperty, function(compressor) {\n        return (\n            this.computed_key() && this.key.has_side_effects(compressor)\n            || this.static && this.value && this.value.has_side_effects(compressor)\n        );\n    });\n    def_has_side_effects(AST_ConciseMethod, function(compressor) {\n        return this.computed_key() && this.key.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_ObjectGetter, function(compressor) {\n        return this.computed_key() && this.key.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_ObjectSetter, function(compressor) {\n        return this.computed_key() && this.key.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_Array, function(compressor) {\n        return any(this.elements, compressor);\n    });\n    def_has_side_effects(AST_Dot, function(compressor) {\n        if (is_nullish(this, compressor)) return false;\n        return !this.optional && this.expression.may_throw_on_access(compressor)\n            || this.expression.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_Sub, function(compressor) {\n        if (is_nullish(this, compressor)) return false;\n\n        return !this.optional && this.expression.may_throw_on_access(compressor)\n            || this.expression.has_side_effects(compressor)\n            || this.property.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_Chain, function (compressor) {\n        return this.expression.has_side_effects(compressor);\n    });\n    def_has_side_effects(AST_Sequence, function(compressor) {\n        return any(this.expressions, compressor);\n    });\n    def_has_side_effects(AST_Definitions, function(compressor) {\n        return any(this.definitions, compressor);\n    });\n    def_has_side_effects(AST_VarDef, function() {\n        return this.value;\n    });\n    def_has_side_effects(AST_TemplateSegment, return_false);\n    def_has_side_effects(AST_TemplateString, function(compressor) {\n        return any(this.segments, compressor);\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"has_side_effects\", func);\n});\n\n// determine if expression may throw\n(function(def_may_throw) {\n    def_may_throw(AST_Node, return_true);\n\n    def_may_throw(AST_Constant, return_false);\n    def_may_throw(AST_EmptyStatement, return_false);\n    def_may_throw(AST_Lambda, return_false);\n    def_may_throw(AST_SymbolDeclaration, return_false);\n    def_may_throw(AST_This, return_false);\n    def_may_throw(AST_ImportMeta, return_false);\n\n    function any(list, compressor) {\n        for (var i = list.length; --i >= 0;)\n            if (list[i].may_throw(compressor))\n                return true;\n        return false;\n    }\n\n    def_may_throw(AST_Class, function(compressor) {\n        if (this.extends && this.extends.may_throw(compressor)) return true;\n        return any(this.properties, compressor);\n    });\n    def_may_throw(AST_ClassStaticBlock, function (compressor) {\n        return any(this.body, compressor);\n    });\n\n    def_may_throw(AST_Array, function(compressor) {\n        return any(this.elements, compressor);\n    });\n    def_may_throw(AST_Assign, function(compressor) {\n        if (this.right.may_throw(compressor)) return true;\n        if (!compressor.has_directive(\"use strict\")\n            && this.operator == \"=\"\n            && this.left instanceof AST_SymbolRef) {\n            return false;\n        }\n        return this.left.may_throw(compressor);\n    });\n    def_may_throw(AST_Binary, function(compressor) {\n        return this.left.may_throw(compressor)\n            || this.right.may_throw(compressor);\n    });\n    def_may_throw(AST_Block, function(compressor) {\n        return any(this.body, compressor);\n    });\n    def_may_throw(AST_Call, function(compressor) {\n        if (is_nullish(this, compressor)) return false;\n        if (any(this.args, compressor)) return true;\n        if (this.is_callee_pure(compressor)) return false;\n        if (this.expression.may_throw(compressor)) return true;\n        return !(this.expression instanceof AST_Lambda)\n            || any(this.expression.body, compressor);\n    });\n    def_may_throw(AST_Case, function(compressor) {\n        return this.expression.may_throw(compressor)\n            || any(this.body, compressor);\n    });\n    def_may_throw(AST_Conditional, function(compressor) {\n        return this.condition.may_throw(compressor)\n            || this.consequent.may_throw(compressor)\n            || this.alternative.may_throw(compressor);\n    });\n    def_may_throw(AST_Definitions, function(compressor) {\n        return any(this.definitions, compressor);\n    });\n    def_may_throw(AST_If, function(compressor) {\n        return this.condition.may_throw(compressor)\n            || this.body && this.body.may_throw(compressor)\n            || this.alternative && this.alternative.may_throw(compressor);\n    });\n    def_may_throw(AST_LabeledStatement, function(compressor) {\n        return this.body.may_throw(compressor);\n    });\n    def_may_throw(AST_Object, function(compressor) {\n        return any(this.properties, compressor);\n    });\n    def_may_throw(AST_ObjectProperty, function(compressor) {\n        // TODO key may throw too\n        return this.value ? this.value.may_throw(compressor) : false;\n    });\n    def_may_throw(AST_ClassProperty, function(compressor) {\n        return (\n            this.computed_key() && this.key.may_throw(compressor)\n            || this.static && this.value && this.value.may_throw(compressor)\n        );\n    });\n    def_may_throw(AST_ConciseMethod, function(compressor) {\n        return this.computed_key() && this.key.may_throw(compressor);\n    });\n    def_may_throw(AST_ObjectGetter, function(compressor) {\n        return this.computed_key() && this.key.may_throw(compressor);\n    });\n    def_may_throw(AST_ObjectSetter, function(compressor) {\n        return this.computed_key() && this.key.may_throw(compressor);\n    });\n    def_may_throw(AST_Return, function(compressor) {\n        return this.value && this.value.may_throw(compressor);\n    });\n    def_may_throw(AST_Sequence, function(compressor) {\n        return any(this.expressions, compressor);\n    });\n    def_may_throw(AST_SimpleStatement, function(compressor) {\n        return this.body.may_throw(compressor);\n    });\n    def_may_throw(AST_Dot, function(compressor) {\n        if (is_nullish(this, compressor)) return false;\n        return !this.optional && this.expression.may_throw_on_access(compressor)\n            || this.expression.may_throw(compressor);\n    });\n    def_may_throw(AST_Sub, function(compressor) {\n        if (is_nullish(this, compressor)) return false;\n        return !this.optional && this.expression.may_throw_on_access(compressor)\n            || this.expression.may_throw(compressor)\n            || this.property.may_throw(compressor);\n    });\n    def_may_throw(AST_Chain, function(compressor) {\n        return this.expression.may_throw(compressor);\n    });\n    def_may_throw(AST_Switch, function(compressor) {\n        return this.expression.may_throw(compressor)\n            || any(this.body, compressor);\n    });\n    def_may_throw(AST_SymbolRef, function(compressor) {\n        return !this.is_declared(compressor) && !pure_prop_access_globals.has(this.name);\n    });\n    def_may_throw(AST_SymbolClassProperty, return_false);\n    def_may_throw(AST_Try, function(compressor) {\n        return this.bcatch ? this.bcatch.may_throw(compressor) : this.body.may_throw(compressor)\n            || this.bfinally && this.bfinally.may_throw(compressor);\n    });\n    def_may_throw(AST_Unary, function(compressor) {\n        if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef)\n            return false;\n        return this.expression.may_throw(compressor);\n    });\n    def_may_throw(AST_VarDef, function(compressor) {\n        if (!this.value) return false;\n        return this.value.may_throw(compressor);\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"may_throw\", func);\n});\n\n// determine if expression is constant\n(function(def_is_constant_expression) {\n    function all_refs_local(scope) {\n        let result = true;\n        walk(this, node => {\n            if (node instanceof AST_SymbolRef) {\n                if (has_flag(this, INLINED)) {\n                    result = false;\n                    return walk_abort;\n                }\n                var def = node.definition();\n                if (\n                    member(def, this.enclosed)\n                    && !this.variables.has(def.name)\n                ) {\n                    if (scope) {\n                        var scope_def = scope.find_variable(node);\n                        if (def.undeclared ? !scope_def : scope_def === def) {\n                            result = \"f\";\n                            return true;\n                        }\n                    }\n                    result = false;\n                    return walk_abort;\n                }\n                return true;\n            }\n            if (node instanceof AST_This && this instanceof AST_Arrow) {\n                result = false;\n                return walk_abort;\n            }\n        });\n        return result;\n    }\n\n    def_is_constant_expression(AST_Node, return_false);\n    def_is_constant_expression(AST_Constant, return_true);\n    def_is_constant_expression(AST_Class, function(scope) {\n        if (this.extends && !this.extends.is_constant_expression(scope)) {\n            return false;\n        }\n\n        for (const prop of this.properties) {\n            if (prop.computed_key() && !prop.key.is_constant_expression(scope)) {\n                return false;\n            }\n            if (prop.static && prop.value && !prop.value.is_constant_expression(scope)) {\n                return false;\n            }\n            if (prop instanceof AST_ClassStaticBlock) {\n                return false;\n            }\n        }\n\n        return all_refs_local.call(this, scope);\n    });\n    def_is_constant_expression(AST_Lambda, all_refs_local);\n    def_is_constant_expression(AST_Unary, function() {\n        return this.expression.is_constant_expression();\n    });\n    def_is_constant_expression(AST_Binary, function() {\n        return this.left.is_constant_expression()\n            && this.right.is_constant_expression();\n    });\n    def_is_constant_expression(AST_Array, function() {\n        return this.elements.every((l) => l.is_constant_expression());\n    });\n    def_is_constant_expression(AST_Object, function() {\n        return this.properties.every((l) => l.is_constant_expression());\n    });\n    def_is_constant_expression(AST_ObjectProperty, function() {\n        return !!(!(this.key instanceof AST_Node) && this.value && this.value.is_constant_expression());\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"is_constant_expression\", func);\n});\n\n\n// may_throw_on_access()\n// returns true if this node may be null, undefined or contain `AST_Accessor`\n(function(def_may_throw_on_access) {\n    AST_Node.DEFMETHOD(\"may_throw_on_access\", function(compressor) {\n        return !compressor.option(\"pure_getters\")\n            || this._dot_throw(compressor);\n    });\n\n    function is_strict(compressor) {\n        return /strict/.test(compressor.option(\"pure_getters\"));\n    }\n\n    def_may_throw_on_access(AST_Node, is_strict);\n    def_may_throw_on_access(AST_Null, return_true);\n    def_may_throw_on_access(AST_Undefined, return_true);\n    def_may_throw_on_access(AST_Constant, return_false);\n    def_may_throw_on_access(AST_Array, return_false);\n    def_may_throw_on_access(AST_Object, function(compressor) {\n        if (!is_strict(compressor)) return false;\n        for (var i = this.properties.length; --i >=0;)\n            if (this.properties[i]._dot_throw(compressor)) return true;\n        return false;\n    });\n    // Do not be as strict with classes as we are with objects.\n    // Hopefully the community is not going to abuse static getters and setters.\n    // https://github.com/terser/terser/issues/724#issuecomment-643655656\n    def_may_throw_on_access(AST_Class, return_false);\n    def_may_throw_on_access(AST_ObjectProperty, return_false);\n    def_may_throw_on_access(AST_ObjectGetter, return_true);\n    def_may_throw_on_access(AST_Expansion, function(compressor) {\n        return this.expression._dot_throw(compressor);\n    });\n    def_may_throw_on_access(AST_Function, return_false);\n    def_may_throw_on_access(AST_Arrow, return_false);\n    def_may_throw_on_access(AST_UnaryPostfix, return_false);\n    def_may_throw_on_access(AST_UnaryPrefix, function() {\n        return this.operator == \"void\";\n    });\n    def_may_throw_on_access(AST_Binary, function(compressor) {\n        return (this.operator == \"&&\" || this.operator == \"||\" || this.operator == \"??\")\n            && (this.left._dot_throw(compressor) || this.right._dot_throw(compressor));\n    });\n    def_may_throw_on_access(AST_Assign, function(compressor) {\n        if (this.logical) return true;\n\n        return this.operator == \"=\"\n            && this.right._dot_throw(compressor);\n    });\n    def_may_throw_on_access(AST_Conditional, function(compressor) {\n        return this.consequent._dot_throw(compressor)\n            || this.alternative._dot_throw(compressor);\n    });\n    def_may_throw_on_access(AST_Dot, function(compressor) {\n        if (!is_strict(compressor)) return false;\n\n        if (this.property == \"prototype\") {\n            return !(\n                this.expression instanceof AST_Function\n                || this.expression instanceof AST_Class\n            );\n        }\n        return true;\n    });\n    def_may_throw_on_access(AST_Chain, function(compressor) {\n        return this.expression._dot_throw(compressor);\n    });\n    def_may_throw_on_access(AST_Sequence, function(compressor) {\n        return this.tail_node()._dot_throw(compressor);\n    });\n    def_may_throw_on_access(AST_SymbolRef, function(compressor) {\n        if (this.name === \"arguments\" && this.scope instanceof AST_Lambda) return false;\n        if (has_flag(this, UNDEFINED)) return true;\n        if (!is_strict(compressor)) return false;\n        if (is_undeclared_ref(this) && this.is_declared(compressor)) return false;\n        if (this.is_immutable()) return false;\n        var fixed = this.fixed_value();\n        return !fixed || fixed._dot_throw(compressor);\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"_dot_throw\", func);\n});\n\nexport function is_lhs(node, parent) {\n    if (parent instanceof AST_Unary && unary_side_effects.has(parent.operator)) return parent.expression;\n    if (parent instanceof AST_Assign && parent.left === node) return node;\n}\n\n(function(def_find_defs) {\n    function to_node(value, orig) {\n        if (value instanceof AST_Node) {\n            if (!(value instanceof AST_Constant)) {\n                // Value may be a function, an array including functions and even a complex assign / block expression,\n                // so it should never be shared in different places.\n                // Otherwise wrong information may be used in the compression phase\n                value = value.clone(true);\n            }\n            return make_node(value.CTOR, orig, value);\n        }\n        if (Array.isArray(value)) return make_node(AST_Array, orig, {\n            elements: value.map(function(value) {\n                return to_node(value, orig);\n            })\n        });\n        if (value && typeof value == \"object\") {\n            var props = [];\n            for (var key in value) if (HOP(value, key)) {\n                props.push(make_node(AST_ObjectKeyVal, orig, {\n                    key: key,\n                    value: to_node(value[key], orig)\n                }));\n            }\n            return make_node(AST_Object, orig, {\n                properties: props\n            });\n        }\n        return make_node_from_constant(value, orig);\n    }\n\n    AST_Toplevel.DEFMETHOD(\"resolve_defines\", function(compressor) {\n        if (!compressor.option(\"global_defs\")) return this;\n        this.figure_out_scope({ ie8: compressor.option(\"ie8\") });\n        return this.transform(new TreeTransformer(function(node) {\n            var def = node._find_defs(compressor, \"\");\n            if (!def) return;\n            var level = 0, child = node, parent;\n            while (parent = this.parent(level++)) {\n                if (!(parent instanceof AST_PropAccess)) break;\n                if (parent.expression !== child) break;\n                child = parent;\n            }\n            if (is_lhs(child, parent)) {\n                return;\n            }\n            return def;\n        }));\n    });\n    def_find_defs(AST_Node, noop);\n    def_find_defs(AST_Chain, function(compressor, suffix) {\n        return this.expression._find_defs(compressor, suffix);\n    });\n    def_find_defs(AST_Dot, function(compressor, suffix) {\n        return this.expression._find_defs(compressor, \".\" + this.property + suffix);\n    });\n    def_find_defs(AST_SymbolDeclaration, function() {\n        if (!this.global()) return;\n    });\n    def_find_defs(AST_SymbolRef, function(compressor, suffix) {\n        if (!this.global()) return;\n        var defines = compressor.option(\"global_defs\");\n        var name = this.name + suffix;\n        if (HOP(defines, name)) return to_node(defines[name], this);\n    });\n    def_find_defs(AST_ImportMeta, function(compressor, suffix) {\n        var defines = compressor.option(\"global_defs\");\n        var name = \"import.meta\" + suffix;\n        if (HOP(defines, name)) return to_node(defines[name], this);\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"_find_defs\", func);\n});\n\n// method to negate an expression\n(function(def_negate) {\n    function basic_negation(exp) {\n        return make_node(AST_UnaryPrefix, exp, {\n            operator: \"!\",\n            expression: exp\n        });\n    }\n    function best(orig, alt, first_in_statement) {\n        var negated = basic_negation(orig);\n        if (first_in_statement) {\n            var stat = make_node(AST_SimpleStatement, alt, {\n                body: alt\n            });\n            return best_of_expression(negated, stat) === stat ? alt : negated;\n        }\n        return best_of_expression(negated, alt);\n    }\n    def_negate(AST_Node, function() {\n        return basic_negation(this);\n    });\n    def_negate(AST_Statement, function() {\n        throw new Error(\"Cannot negate a statement\");\n    });\n    def_negate(AST_Function, function() {\n        return basic_negation(this);\n    });\n    def_negate(AST_Arrow, function() {\n        return basic_negation(this);\n    });\n    def_negate(AST_UnaryPrefix, function() {\n        if (this.operator == \"!\")\n            return this.expression;\n        return basic_negation(this);\n    });\n    def_negate(AST_Sequence, function(compressor) {\n        var expressions = this.expressions.slice();\n        expressions.push(expressions.pop().negate(compressor));\n        return make_sequence(this, expressions);\n    });\n    def_negate(AST_Conditional, function(compressor, first_in_statement) {\n        var self = this.clone();\n        self.consequent = self.consequent.negate(compressor);\n        self.alternative = self.alternative.negate(compressor);\n        return best(this, self, first_in_statement);\n    });\n    def_negate(AST_Binary, function(compressor, first_in_statement) {\n        var self = this.clone(), op = this.operator;\n        if (compressor.option(\"unsafe_comps\")) {\n            switch (op) {\n              case \"<=\" : self.operator = \">\"  ; return self;\n              case \"<\"  : self.operator = \">=\" ; return self;\n              case \">=\" : self.operator = \"<\"  ; return self;\n              case \">\"  : self.operator = \"<=\" ; return self;\n            }\n        }\n        switch (op) {\n          case \"==\" : self.operator = \"!=\"; return self;\n          case \"!=\" : self.operator = \"==\"; return self;\n          case \"===\": self.operator = \"!==\"; return self;\n          case \"!==\": self.operator = \"===\"; return self;\n          case \"&&\":\n            self.operator = \"||\";\n            self.left = self.left.negate(compressor, first_in_statement);\n            self.right = self.right.negate(compressor);\n            return best(this, self, first_in_statement);\n          case \"||\":\n            self.operator = \"&&\";\n            self.left = self.left.negate(compressor, first_in_statement);\n            self.right = self.right.negate(compressor);\n            return best(this, self, first_in_statement);\n        }\n        return basic_negation(this);\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"negate\", function(compressor, first_in_statement) {\n        return func.call(this, compressor, first_in_statement);\n    });\n});\n\n// Is the callee of this function pure?\nvar global_pure_fns = makePredicate(\"Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError\");\nAST_Call.DEFMETHOD(\"is_callee_pure\", function(compressor) {\n    if (compressor.option(\"unsafe\")) {\n        var expr = this.expression;\n        var first_arg = (this.args && this.args[0] && this.args[0].evaluate(compressor));\n        if (\n            expr.expression && expr.expression.name === \"hasOwnProperty\" &&\n            (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)\n        ) {\n            return false;\n        }\n        if (is_undeclared_ref(expr) && global_pure_fns.has(expr.name)) return true;\n        if (\n            expr instanceof AST_Dot\n            && is_undeclared_ref(expr.expression)\n            && is_pure_native_fn(expr.expression.name, expr.property)\n        ) {\n            return true;\n        }\n    }\n    return !!has_annotation(this, _PURE) || !compressor.pure_funcs(this);\n});\n\n// If I call this, is it a pure function?\nAST_Node.DEFMETHOD(\"is_call_pure\", return_false);\nAST_Dot.DEFMETHOD(\"is_call_pure\", function(compressor) {\n    if (!compressor.option(\"unsafe\")) return;\n    const expr = this.expression;\n\n    let native_obj;\n    if (expr instanceof AST_Array) {\n        native_obj = \"Array\";\n    } else if (expr.is_boolean()) {\n        native_obj = \"Boolean\";\n    } else if (expr.is_number(compressor)) {\n        native_obj = \"Number\";\n    } else if (expr instanceof AST_RegExp) {\n        native_obj = \"RegExp\";\n    } else if (expr.is_string(compressor)) {\n        native_obj = \"String\";\n    } else if (!this.may_throw_on_access(compressor)) {\n        native_obj = \"Object\";\n    }\n    return native_obj != null && is_pure_native_method(native_obj, this.property);\n});\n\n// tell me if a statement aborts\nexport const aborts = (thing) => thing && thing.aborts();\n\n(function(def_aborts) {\n    def_aborts(AST_Statement, return_null);\n    def_aborts(AST_Jump, return_this);\n    function block_aborts() {\n        for (var i = 0; i < this.body.length; i++) {\n            if (aborts(this.body[i])) {\n                return this.body[i];\n            }\n        }\n        return null;\n    }\n    def_aborts(AST_Import, return_null);\n    def_aborts(AST_BlockStatement, block_aborts);\n    def_aborts(AST_SwitchBranch, block_aborts);\n    def_aborts(AST_DefClass, function () {\n        for (const prop of this.properties) {\n            if (prop instanceof AST_ClassStaticBlock) {\n                if (prop.aborts()) return prop;\n            }\n        }\n        return null;\n    });\n    def_aborts(AST_ClassStaticBlock, block_aborts);\n    def_aborts(AST_If, function() {\n        return this.alternative && aborts(this.body) && aborts(this.alternative) && this;\n    });\n})(function(node, func) {\n    node.DEFMETHOD(\"aborts\", func);\n});\n\nexport function is_modified(compressor, tw, node, value, level, immutable) {\n    var parent = tw.parent(level);\n    var lhs = is_lhs(node, parent);\n    if (lhs) return lhs;\n    if (!immutable\n        && parent instanceof AST_Call\n        && parent.expression === node\n        && !(value instanceof AST_Arrow)\n        && !(value instanceof AST_Class)\n        && !parent.is_callee_pure(compressor)\n        && (!(value instanceof AST_Function)\n            || !(parent instanceof AST_New) && value.contains_this())) {\n        return true;\n    }\n    if (parent instanceof AST_Array) {\n        return is_modified(compressor, tw, parent, parent, level + 1);\n    }\n    if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n        var obj = tw.parent(level + 1);\n        return is_modified(compressor, tw, obj, obj, level + 2);\n    }\n    if (parent instanceof AST_PropAccess && parent.expression === node) {\n        var prop = read_property(value, parent.property);\n        return !immutable && is_modified(compressor, tw, parent, prop, level + 1);\n    }\n}\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    HOP,\n    makePredicate,\n    return_this,\n    string_template,\n    regexp_source_fix,\n    regexp_is_safe,\n} from \"../utils/index.js\";\nimport {\n    AST_Array,\n    AST_BigInt,\n    AST_Binary,\n    AST_Call,\n    AST_Chain,\n    AST_Class,\n    AST_Conditional,\n    AST_Constant,\n    AST_Dot,\n    AST_Expansion,\n    AST_Function,\n    AST_Lambda,\n    AST_New,\n    AST_Node,\n    AST_Object,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Statement,\n    AST_Symbol,\n    AST_SymbolRef,\n    AST_TemplateString,\n    AST_UnaryPrefix,\n    AST_With,\n} from \"../ast.js\";\nimport { is_undeclared_ref} from \"./inference.js\";\nimport { is_pure_native_value, is_pure_native_fn, is_pure_native_method } from \"./native-objects.js\";\n\n// methods to evaluate a constant expression\n\nfunction def_eval(node, func) {\n    node.DEFMETHOD(\"_eval\", func);\n}\n\n// Used to propagate a nullish short-circuit signal upwards through the chain.\nexport const nullish = Symbol(\"This AST_Chain is nullish\");\n\n// If the node has been successfully reduced to a constant,\n// then its value is returned; otherwise the element itself\n// is returned.\n// They can be distinguished as constant value is never a\n// descendant of AST_Node.\nAST_Node.DEFMETHOD(\"evaluate\", function (compressor) {\n    if (!compressor.option(\"evaluate\"))\n        return this;\n    var val = this._eval(compressor, 1);\n    if (!val || val instanceof RegExp)\n        return val;\n    if (typeof val == \"function\" || typeof val == \"object\" || val == nullish)\n        return this;\n\n    // Evaluated strings can be larger than the original expression\n    if (typeof val === \"string\") {\n        const unevaluated_size = this.size(compressor);\n        if (val.length + 2 > unevaluated_size) return this;\n    }\n\n    return val;\n});\n\nvar unaryPrefix = makePredicate(\"! ~ - + void\");\nAST_Node.DEFMETHOD(\"is_constant\", function () {\n    // Accomodate when compress option evaluate=false\n    // as well as the common constant expressions !0 and -1\n    if (this instanceof AST_Constant) {\n        return !(this instanceof AST_RegExp);\n    } else {\n        return this instanceof AST_UnaryPrefix\n            && this.expression instanceof AST_Constant\n            && unaryPrefix.has(this.operator);\n    }\n});\n\ndef_eval(AST_Statement, function () {\n    throw new Error(string_template(\"Cannot evaluate a statement [{file}:{line},{col}]\", this.start));\n});\n\ndef_eval(AST_Lambda, return_this);\ndef_eval(AST_Class, return_this);\ndef_eval(AST_Node, return_this);\ndef_eval(AST_Constant, function () {\n    return this.getValue();\n});\n\ndef_eval(AST_BigInt, return_this);\n\ndef_eval(AST_RegExp, function (compressor) {\n    let evaluated = compressor.evaluated_regexps.get(this.value);\n    if (evaluated === undefined && regexp_is_safe(this.value.source)) {\n        try {\n            const { source, flags } = this.value;\n            evaluated = new RegExp(source, flags);\n        } catch (e) {\n            evaluated = null;\n        }\n        compressor.evaluated_regexps.set(this.value, evaluated);\n    }\n    return evaluated || this;\n});\n\ndef_eval(AST_TemplateString, function () {\n    if (this.segments.length !== 1) return this;\n    return this.segments[0].value;\n});\n\ndef_eval(AST_Function, function (compressor) {\n    if (compressor.option(\"unsafe\")) {\n        var fn = function () { };\n        fn.node = this;\n        fn.toString = () => this.print_to_string();\n        return fn;\n    }\n    return this;\n});\n\ndef_eval(AST_Array, function (compressor, depth) {\n    if (compressor.option(\"unsafe\")) {\n        var elements = [];\n        for (var i = 0, len = this.elements.length; i < len; i++) {\n            var element = this.elements[i];\n            var value = element._eval(compressor, depth);\n            if (element === value)\n                return this;\n            elements.push(value);\n        }\n        return elements;\n    }\n    return this;\n});\n\ndef_eval(AST_Object, function (compressor, depth) {\n    if (compressor.option(\"unsafe\")) {\n        var val = {};\n        for (var i = 0, len = this.properties.length; i < len; i++) {\n            var prop = this.properties[i];\n            if (prop instanceof AST_Expansion)\n                return this;\n            var key = prop.key;\n            if (key instanceof AST_Symbol) {\n                key = key.name;\n            } else if (key instanceof AST_Node) {\n                key = key._eval(compressor, depth);\n                if (key === prop.key)\n                    return this;\n            }\n            if (typeof Object.prototype[key] === \"function\") {\n                return this;\n            }\n            if (prop.value instanceof AST_Function)\n                continue;\n            val[key] = prop.value._eval(compressor, depth);\n            if (val[key] === prop.value)\n                return this;\n        }\n        return val;\n    }\n    return this;\n});\n\nvar non_converting_unary = makePredicate(\"! typeof void\");\ndef_eval(AST_UnaryPrefix, function (compressor, depth) {\n    var e = this.expression;\n    // Function would be evaluated to an array and so typeof would\n    // incorrectly return 'object'. Hence making is a special case.\n    if (compressor.option(\"typeofs\")\n        && this.operator == \"typeof\"\n        && (e instanceof AST_Lambda\n            || e instanceof AST_SymbolRef\n            && e.fixed_value() instanceof AST_Lambda)) {\n        return typeof function () { };\n    }\n    if (!non_converting_unary.has(this.operator))\n        depth++;\n    e = e._eval(compressor, depth);\n    if (e === this.expression)\n        return this;\n    switch (this.operator) {\n        case \"!\": return !e;\n        case \"typeof\":\n            // typeof <RegExp> returns \"object\" or \"function\" on different platforms\n            // so cannot evaluate reliably\n            if (e instanceof RegExp)\n                return this;\n            return typeof e;\n        case \"void\": return void e;\n        case \"~\": return ~e;\n        case \"-\": return -e;\n        case \"+\": return +e;\n    }\n    return this;\n});\n\nvar non_converting_binary = makePredicate(\"&& || ?? === !==\");\nconst identity_comparison = makePredicate(\"== != === !==\");\nconst has_identity = value => typeof value === \"object\"\n    || typeof value === \"function\"\n    || typeof value === \"symbol\";\n\ndef_eval(AST_Binary, function (compressor, depth) {\n    if (!non_converting_binary.has(this.operator))\n        depth++;\n\n    var left = this.left._eval(compressor, depth);\n    if (left === this.left)\n        return this;\n    var right = this.right._eval(compressor, depth);\n    if (right === this.right)\n        return this;\n    var result;\n\n    if (left != null\n        && right != null\n        && identity_comparison.has(this.operator)\n        && has_identity(left)\n        && has_identity(right)\n        && typeof left === typeof right) {\n        // Do not compare by reference\n        return this;\n    }\n\n    switch (this.operator) {\n        case \"&&\": result = left && right; break;\n        case \"||\": result = left || right; break;\n        case \"??\": result = left != null ? left : right; break;\n        case \"|\": result = left | right; break;\n        case \"&\": result = left & right; break;\n        case \"^\": result = left ^ right; break;\n        case \"+\": result = left + right; break;\n        case \"*\": result = left * right; break;\n        case \"**\": result = Math.pow(left, right); break;\n        case \"/\": result = left / right; break;\n        case \"%\": result = left % right; break;\n        case \"-\": result = left - right; break;\n        case \"<<\": result = left << right; break;\n        case \">>\": result = left >> right; break;\n        case \">>>\": result = left >>> right; break;\n        case \"==\": result = left == right; break;\n        case \"===\": result = left === right; break;\n        case \"!=\": result = left != right; break;\n        case \"!==\": result = left !== right; break;\n        case \"<\": result = left < right; break;\n        case \"<=\": result = left <= right; break;\n        case \">\": result = left > right; break;\n        case \">=\": result = left >= right; break;\n        default:\n            return this;\n    }\n    if (isNaN(result) && compressor.find_parent(AST_With)) {\n        // leave original expression as is\n        return this;\n    }\n    return result;\n});\n\ndef_eval(AST_Conditional, function (compressor, depth) {\n    var condition = this.condition._eval(compressor, depth);\n    if (condition === this.condition)\n        return this;\n    var node = condition ? this.consequent : this.alternative;\n    var value = node._eval(compressor, depth);\n    return value === node ? this : value;\n});\n\n// Set of AST_SymbolRef which are currently being evaluated.\n// Avoids infinite recursion of ._eval()\nconst reentrant_ref_eval = new Set();\ndef_eval(AST_SymbolRef, function (compressor, depth) {\n    if (reentrant_ref_eval.has(this))\n        return this;\n\n    var fixed = this.fixed_value();\n    if (!fixed)\n        return this;\n\n    reentrant_ref_eval.add(this);\n    const value = fixed._eval(compressor, depth);\n    reentrant_ref_eval.delete(this);\n\n    if (value === fixed)\n        return this;\n\n    if (value && typeof value == \"object\") {\n        var escaped = this.definition().escaped;\n        if (escaped && depth > escaped)\n            return this;\n    }\n    return value;\n});\n\nconst global_objs = { Array, Math, Number, Object, String };\n\nconst regexp_flags = new Set([\n    \"dotAll\",\n    \"global\",\n    \"ignoreCase\",\n    \"multiline\",\n    \"sticky\",\n    \"unicode\",\n]);\n\ndef_eval(AST_PropAccess, function (compressor, depth) {\n    let obj = this.expression._eval(compressor, depth + 1);\n    if (obj === nullish || (this.optional && obj == null)) return nullish;\n    if (compressor.option(\"unsafe\")) {\n        var key = this.property;\n        if (key instanceof AST_Node) {\n            key = key._eval(compressor, depth);\n            if (key === this.property)\n                return this;\n        }\n        var exp = this.expression;\n        if (is_undeclared_ref(exp)) {\n\n            var aa;\n            var first_arg = exp.name === \"hasOwnProperty\"\n                && key === \"call\"\n                && (aa = compressor.parent() && compressor.parent().args)\n                && (aa && aa[0]\n                    && aa[0].evaluate(compressor));\n\n            first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;\n\n            if (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared) {\n                return this.clone();\n            }\n            if (!is_pure_native_value(exp.name, key))\n                return this;\n            obj = global_objs[exp.name];\n        } else {\n            if (obj instanceof RegExp) {\n                if (key == \"source\") {\n                    return regexp_source_fix(obj.source);\n                } else if (key == \"flags\" || regexp_flags.has(key)) {\n                    return obj[key];\n                }\n            }\n            if (!obj || obj === exp || !HOP(obj, key))\n                return this;\n\n            if (typeof obj == \"function\")\n                switch (key) {\n                    case \"name\":\n                        return obj.node.name ? obj.node.name.name : \"\";\n                    case \"length\":\n                        return obj.node.length_property();\n                    default:\n                        return this;\n                }\n        }\n        return obj[key];\n    }\n    return this;\n});\n\ndef_eval(AST_Chain, function (compressor, depth) {\n    const evaluated = this.expression._eval(compressor, depth);\n    return evaluated === nullish\n        ? undefined\n        : evaluated === this.expression\n          ? this\n          : evaluated;\n});\n\ndef_eval(AST_Call, function (compressor, depth) {\n    var exp = this.expression;\n\n    const callee = exp._eval(compressor, depth);\n    if (callee === nullish || (this.optional && callee == null)) return nullish;\n\n    if (compressor.option(\"unsafe\") && exp instanceof AST_PropAccess) {\n        var key = exp.property;\n        if (key instanceof AST_Node) {\n            key = key._eval(compressor, depth);\n            if (key === exp.property)\n                return this;\n        }\n        var val;\n        var e = exp.expression;\n        if (is_undeclared_ref(e)) {\n            var first_arg = e.name === \"hasOwnProperty\" &&\n                key === \"call\" &&\n                (this.args[0] && this.args[0].evaluate(compressor));\n\n            first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;\n\n            if ((first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)) {\n                return this.clone();\n            }\n            if (!is_pure_native_fn(e.name, key)) return this;\n            val = global_objs[e.name];\n        } else {\n            val = e._eval(compressor, depth + 1);\n            if (val === e || !val)\n                return this;\n            if (!is_pure_native_method(val.constructor.name, key))\n                return this;\n        }\n        var args = [];\n        for (var i = 0, len = this.args.length; i < len; i++) {\n            var arg = this.args[i];\n            var value = arg._eval(compressor, depth);\n            if (arg === value)\n                return this;\n            if (arg instanceof AST_Lambda)\n                return this;\n            args.push(value);\n        }\n        try {\n            return val[key].apply(val, args);\n        } catch (ex) {\n            // We don't really care\n        }\n    }\n    return this;\n});\n\n// Also a subclass of AST_Call\ndef_eval(AST_New, return_this);\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Binary,\n    AST_Call,\n    AST_Chain,\n    AST_Class,\n    AST_ClassStaticBlock,\n    AST_ClassProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Constant,\n    AST_Dot,\n    AST_Expansion,\n    AST_Function,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PropAccess,\n    AST_Scope,\n    AST_Sequence,\n    AST_Sub,\n    AST_SymbolRef,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Unary,\n} from \"../ast.js\";\nimport { make_node, return_null, return_this } from \"../utils/index.js\";\nimport { first_in_statement } from \"../utils/first_in_statement.js\";\n\nimport { pure_prop_access_globals } from \"./native-objects.js\";\nimport { lazy_op, unary_side_effects, is_nullish_shortcircuited } from \"./inference.js\";\nimport { WRITE_ONLY, set_flag, clear_flag } from \"./compressor-flags.js\";\nimport { make_sequence, is_func_expr, is_iife_call } from \"./common.js\";\n\n// AST_Node#drop_side_effect_free() gets called when we don't care about the value,\n// only about side effects. We'll be defining this method for each node type in this module\n//\n// Examples:\n// foo++ -> foo++\n// 1 + func() -> func()\n// 10 -> (nothing)\n// knownPureFunc(foo++) -> foo++\n\nfunction def_drop_side_effect_free(node, func) {\n    node.DEFMETHOD(\"drop_side_effect_free\", func);\n}\n\n// Drop side-effect-free elements from an array of expressions.\n// Returns an array of expressions with side-effects or null\n// if all elements were dropped. Note: original array may be\n// returned if nothing changed.\nfunction trim(nodes, compressor, first_in_statement) {\n    var len = nodes.length;\n    if (!len)  return null;\n\n    var ret = [], changed = false;\n    for (var i = 0; i < len; i++) {\n        var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n        changed |= node !== nodes[i];\n        if (node) {\n            ret.push(node);\n            first_in_statement = false;\n        }\n    }\n    return changed ? ret.length ? ret : null : nodes;\n}\n\ndef_drop_side_effect_free(AST_Node, return_this);\ndef_drop_side_effect_free(AST_Constant, return_null);\ndef_drop_side_effect_free(AST_This, return_null);\n\ndef_drop_side_effect_free(AST_Call, function (compressor, first_in_statement) {\n    if (is_nullish_shortcircuited(this, compressor)) {\n        return this.expression.drop_side_effect_free(compressor, first_in_statement);\n    }\n\n    if (!this.is_callee_pure(compressor)) {\n        if (this.expression.is_call_pure(compressor)) {\n            var exprs = this.args.slice();\n            exprs.unshift(this.expression.expression);\n            exprs = trim(exprs, compressor, first_in_statement);\n            return exprs && make_sequence(this, exprs);\n        }\n        if (is_func_expr(this.expression)\n            && (!this.expression.name || !this.expression.name.definition().references.length)) {\n            var node = this.clone();\n            node.expression.process_expression(false, compressor);\n            return node;\n        }\n        return this;\n    }\n\n    var args = trim(this.args, compressor, first_in_statement);\n    return args && make_sequence(this, args);\n});\n\ndef_drop_side_effect_free(AST_Accessor, return_null);\n\ndef_drop_side_effect_free(AST_Function, return_null);\n\ndef_drop_side_effect_free(AST_Arrow, return_null);\n\ndef_drop_side_effect_free(AST_Class, function (compressor) {\n    const with_effects = [];\n    const trimmed_extends = this.extends && this.extends.drop_side_effect_free(compressor);\n    if (trimmed_extends)\n        with_effects.push(trimmed_extends);\n    for (const prop of this.properties) {\n        if (prop instanceof AST_ClassStaticBlock) {\n            if (prop.body.some(stat => stat.has_side_effects(compressor))) {\n                return this;\n            } else {\n                continue;\n            }\n        }\n\n        const trimmed_prop = prop.drop_side_effect_free(compressor);\n        if (trimmed_prop)\n            with_effects.push(trimmed_prop);\n    }\n    if (!with_effects.length)\n        return null;\n    return make_sequence(this, with_effects);\n});\n\ndef_drop_side_effect_free(AST_Binary, function (compressor, first_in_statement) {\n    var right = this.right.drop_side_effect_free(compressor);\n    if (!right)\n        return this.left.drop_side_effect_free(compressor, first_in_statement);\n    if (lazy_op.has(this.operator)) {\n        if (right === this.right)\n            return this;\n        var node = this.clone();\n        node.right = right;\n        return node;\n    } else {\n        var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n        if (!left)\n            return this.right.drop_side_effect_free(compressor, first_in_statement);\n        return make_sequence(this, [left, right]);\n    }\n});\n\ndef_drop_side_effect_free(AST_Assign, function (compressor) {\n    if (this.logical)\n        return this;\n\n    var left = this.left;\n    if (left.has_side_effects(compressor)\n        || compressor.has_directive(\"use strict\")\n        && left instanceof AST_PropAccess\n        && left.expression.is_constant()) {\n        return this;\n    }\n    set_flag(this, WRITE_ONLY);\n    while (left instanceof AST_PropAccess) {\n        left = left.expression;\n    }\n    if (left.is_constant_expression(compressor.find_parent(AST_Scope))) {\n        return this.right.drop_side_effect_free(compressor);\n    }\n    return this;\n});\n\ndef_drop_side_effect_free(AST_Conditional, function (compressor) {\n    var consequent = this.consequent.drop_side_effect_free(compressor);\n    var alternative = this.alternative.drop_side_effect_free(compressor);\n    if (consequent === this.consequent && alternative === this.alternative)\n        return this;\n    if (!consequent)\n        return alternative ? make_node(AST_Binary, this, {\n            operator: \"||\",\n            left: this.condition,\n            right: alternative\n        }) : this.condition.drop_side_effect_free(compressor);\n    if (!alternative)\n        return make_node(AST_Binary, this, {\n            operator: \"&&\",\n            left: this.condition,\n            right: consequent\n        });\n    var node = this.clone();\n    node.consequent = consequent;\n    node.alternative = alternative;\n    return node;\n});\n\ndef_drop_side_effect_free(AST_Unary, function (compressor, first_in_statement) {\n    if (unary_side_effects.has(this.operator)) {\n        if (!this.expression.has_side_effects(compressor)) {\n            set_flag(this, WRITE_ONLY);\n        } else {\n            clear_flag(this, WRITE_ONLY);\n        }\n        return this;\n    }\n    if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef)\n        return null;\n    var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n    if (first_in_statement && expression && is_iife_call(expression)) {\n        if (expression === this.expression && this.operator == \"!\")\n            return this;\n        return expression.negate(compressor, first_in_statement);\n    }\n    return expression;\n});\n\ndef_drop_side_effect_free(AST_SymbolRef, function (compressor) {\n    const safe_access = this.is_declared(compressor)\n        || pure_prop_access_globals.has(this.name);\n    return safe_access ? null : this;\n});\n\ndef_drop_side_effect_free(AST_Object, function (compressor, first_in_statement) {\n    var values = trim(this.properties, compressor, first_in_statement);\n    return values && make_sequence(this, values);\n});\n\ndef_drop_side_effect_free(AST_ObjectProperty, function (compressor, first_in_statement) {\n    const computed_key = this instanceof AST_ObjectKeyVal && this.key instanceof AST_Node;\n    const key = computed_key && this.key.drop_side_effect_free(compressor, first_in_statement);\n    const value = this.value && this.value.drop_side_effect_free(compressor, first_in_statement);\n    if (key && value) {\n        return make_sequence(this, [key, value]);\n    }\n    return key || value;\n});\n\ndef_drop_side_effect_free(AST_ClassProperty, function (compressor) {\n    const key = this.computed_key() && this.key.drop_side_effect_free(compressor);\n\n    const value = this.static && this.value\n        && this.value.drop_side_effect_free(compressor);\n\n    if (key && value)\n        return make_sequence(this, [key, value]);\n    return key || value || null;\n});\n\ndef_drop_side_effect_free(AST_ConciseMethod, function () {\n    return this.computed_key() ? this.key : null;\n});\n\ndef_drop_side_effect_free(AST_ObjectGetter, function () {\n    return this.computed_key() ? this.key : null;\n});\n\ndef_drop_side_effect_free(AST_ObjectSetter, function () {\n    return this.computed_key() ? this.key : null;\n});\n\ndef_drop_side_effect_free(AST_Array, function (compressor, first_in_statement) {\n    var values = trim(this.elements, compressor, first_in_statement);\n    return values && make_sequence(this, values);\n});\n\ndef_drop_side_effect_free(AST_Dot, function (compressor, first_in_statement) {\n    if (is_nullish_shortcircuited(this, compressor)) {\n        return this.expression.drop_side_effect_free(compressor, first_in_statement);\n    }\n    if (this.expression.may_throw_on_access(compressor)) return this;\n\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\n\ndef_drop_side_effect_free(AST_Sub, function (compressor, first_in_statement) {\n    if (is_nullish_shortcircuited(this, compressor)) {\n        return this.expression.drop_side_effect_free(compressor, first_in_statement);\n    }\n    if (this.expression.may_throw_on_access(compressor)) return this;\n\n    var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n    if (!expression)\n        return this.property.drop_side_effect_free(compressor, first_in_statement);\n    var property = this.property.drop_side_effect_free(compressor);\n    if (!property)\n        return expression;\n    return make_sequence(this, [expression, property]);\n});\n\ndef_drop_side_effect_free(AST_Chain, function (compressor, first_in_statement) {\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\n\ndef_drop_side_effect_free(AST_Sequence, function (compressor) {\n    var last = this.tail_node();\n    var expr = last.drop_side_effect_free(compressor);\n    if (expr === last)\n        return this;\n    var expressions = this.expressions.slice(0, -1);\n    if (expr)\n        expressions.push(expr);\n    if (!expressions.length) {\n        return make_node(AST_Number, this, { value: 0 });\n    }\n    return make_sequence(this, expressions);\n});\n\ndef_drop_side_effect_free(AST_Expansion, function (compressor, first_in_statement) {\n    return this.expression.drop_side_effect_free(compressor, first_in_statement);\n});\n\ndef_drop_side_effect_free(AST_TemplateSegment, return_null);\n\ndef_drop_side_effect_free(AST_TemplateString, function (compressor) {\n    var values = trim(this.segments, compressor, first_in_statement);\n    return values && make_sequence(this, values);\n});\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Accessor,\n    AST_Assign,\n    AST_BlockStatement,\n    AST_Class,\n    AST_ClassExpression,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Number,\n    AST_Scope,\n    AST_SimpleStatement,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolDeclaration,\n    AST_SymbolFunarg,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_Toplevel,\n    AST_Unary,\n    AST_Var,\n\n    TreeTransformer,\n    TreeWalker,\n    walk,\n\n    _INLINE,\n    _NOINLINE,\n    _PURE\n} from \"../ast.js\";\nimport {\n    keep_name,\n    make_node,\n    map_add,\n    MAP,\n    remove,\n    return_false,\n} from \"../utils/index.js\";\nimport { SymbolDef } from \"../scope.js\";\n\nimport {\n    WRITE_ONLY,\n    UNUSED,\n\n    has_flag,\n    set_flag,\n} from \"./compressor-flags.js\";\nimport {\n    make_sequence,\n    maintain_this_binding,\n    is_empty,\n    is_ref_of,\n    can_be_evicted_from_block,\n} from \"./common.js\";\n\nconst r_keep_assign = /keep_assign/;\n\n/** Drop unused variables from this scope */\nAST_Scope.DEFMETHOD(\"drop_unused\", function(compressor) {\n    if (!compressor.option(\"unused\")) return;\n    if (compressor.has_directive(\"use asm\")) return;\n    var self = this;\n    if (self.pinned()) return;\n    var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs;\n    var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars;\n    const assign_as_unused = r_keep_assign.test(compressor.option(\"unused\")) ? return_false : function(node) {\n        if (node instanceof AST_Assign\n            && !node.logical\n            && (has_flag(node, WRITE_ONLY) || node.operator == \"=\")\n        ) {\n            return node.left;\n        }\n        if (node instanceof AST_Unary && has_flag(node, WRITE_ONLY)) {\n            return node.expression;\n        }\n    };\n    var in_use_ids = new Map();\n    var fixed_ids = new Map();\n    if (self instanceof AST_Toplevel && compressor.top_retain) {\n        self.variables.forEach(function(def) {\n            if (compressor.top_retain(def) && !in_use_ids.has(def.id)) {\n                in_use_ids.set(def.id, def);\n            }\n        });\n    }\n    var var_defs_by_id = new Map();\n    var initializations = new Map();\n    // pass 1: find out which symbols are directly used in\n    // this scope (not in nested scopes).\n    var scope = this;\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_Lambda && node.uses_arguments && !tw.has_directive(\"use strict\")) {\n            node.argnames.forEach(function(argname) {\n                if (!(argname instanceof AST_SymbolDeclaration)) return;\n                var def = argname.definition();\n                if (!in_use_ids.has(def.id)) {\n                    in_use_ids.set(def.id, def);\n                }\n            });\n        }\n        if (node === self) return;\n        if (node instanceof AST_Defun || node instanceof AST_DefClass) {\n            var node_def = node.name.definition();\n            const in_export = tw.parent() instanceof AST_Export;\n            if (in_export || !drop_funcs && scope === self) {\n                if (node_def.global && !in_use_ids.has(node_def.id)) {\n                    in_use_ids.set(node_def.id, node_def);\n                }\n            }\n            if (node instanceof AST_DefClass) {\n                if (\n                    node.extends\n                    && (node.extends.has_side_effects(compressor)\n                    || node.extends.may_throw(compressor))\n                ) {\n                    node.extends.walk(tw);\n                }\n                for (const prop of node.properties) {\n                    if (\n                        prop.has_side_effects(compressor) ||\n                        prop.may_throw(compressor)\n                    ) {\n                        prop.walk(tw);\n                    }\n                }\n            }\n            map_add(initializations, node_def.id, node);\n            return true; // don't go in nested scopes\n        }\n        if (node instanceof AST_SymbolFunarg && scope === self) {\n            map_add(var_defs_by_id, node.definition().id, node);\n        }\n        if (node instanceof AST_Definitions && scope === self) {\n            const in_export = tw.parent() instanceof AST_Export;\n            node.definitions.forEach(function(def) {\n                if (def.name instanceof AST_SymbolVar) {\n                    map_add(var_defs_by_id, def.name.definition().id, def);\n                }\n                if (in_export || !drop_vars) {\n                    walk(def.name, node => {\n                        if (node instanceof AST_SymbolDeclaration) {\n                            const def = node.definition();\n                            if (def.global && !in_use_ids.has(def.id)) {\n                                in_use_ids.set(def.id, def);\n                            }\n                        }\n                    });\n                }\n                if (def.name instanceof AST_Destructuring) {\n                    def.walk(tw);\n                }\n                if (def.name instanceof AST_SymbolDeclaration && def.value) {\n                    var node_def = def.name.definition();\n                    map_add(initializations, node_def.id, def.value);\n                    if (!node_def.chained && def.name.fixed_value() === def.value) {\n                        fixed_ids.set(node_def.id, def);\n                    }\n                    if (def.value.has_side_effects(compressor)) {\n                        def.value.walk(tw);\n                    }\n                }\n            });\n            return true;\n        }\n        return scan_ref_scoped(node, descend);\n    });\n    self.walk(tw);\n    // pass 2: for every used symbol we need to walk its\n    // initialization code to figure out if it uses other\n    // symbols (that may not be in_use).\n    tw = new TreeWalker(scan_ref_scoped);\n    in_use_ids.forEach(function (def) {\n        var init = initializations.get(def.id);\n        if (init) init.forEach(function(init) {\n            init.walk(tw);\n        });\n    });\n    // pass 3: we should drop declarations not in_use\n    var tt = new TreeTransformer(\n        function before(node, descend, in_list) {\n            var parent = tt.parent();\n            if (drop_vars) {\n                const sym = assign_as_unused(node);\n                if (sym instanceof AST_SymbolRef) {\n                    var def = sym.definition();\n                    var in_use = in_use_ids.has(def.id);\n                    if (node instanceof AST_Assign) {\n                        if (!in_use || fixed_ids.has(def.id) && fixed_ids.get(def.id) !== node) {\n                            return maintain_this_binding(parent, node, node.right.transform(tt));\n                        }\n                    } else if (!in_use) return in_list ? MAP.skip : make_node(AST_Number, node, {\n                        value: 0\n                    });\n                }\n            }\n            if (scope !== self) return;\n            var def;\n            if (node.name\n                && (node instanceof AST_ClassExpression\n                    && !keep_name(compressor.option(\"keep_classnames\"), (def = node.name.definition()).name)\n                || node instanceof AST_Function\n                    && !keep_name(compressor.option(\"keep_fnames\"), (def = node.name.definition()).name))) {\n                // any declarations with same name will overshadow\n                // name of this anonymous function and can therefore\n                // never be used anywhere\n                if (!in_use_ids.has(def.id) || def.orig.length > 1) node.name = null;\n            }\n            if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {\n                var trim = !compressor.option(\"keep_fargs\");\n                for (var a = node.argnames, i = a.length; --i >= 0;) {\n                    var sym = a[i];\n                    if (sym instanceof AST_Expansion) {\n                        sym = sym.expression;\n                    }\n                    if (sym instanceof AST_DefaultAssign) {\n                        sym = sym.left;\n                    }\n                    // Do not drop destructuring arguments.\n                    // They constitute a type assertion of sorts\n                    if (\n                        !(sym instanceof AST_Destructuring)\n                        && !in_use_ids.has(sym.definition().id)\n                    ) {\n                        set_flag(sym, UNUSED);\n                        if (trim) {\n                            a.pop();\n                        }\n                    } else {\n                        trim = false;\n                    }\n                }\n            }\n            if ((node instanceof AST_Defun || node instanceof AST_DefClass) && node !== self) {\n                const def = node.name.definition();\n                const keep = def.global && !drop_funcs || in_use_ids.has(def.id);\n                // Class \"extends\" and static blocks may have side effects\n                const has_side_effects = !keep\n                    && node instanceof AST_Class\n                    && node.has_side_effects(compressor);\n                if (!keep && !has_side_effects) {\n                    def.eliminated++;\n                    return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);\n                }\n            }\n            if (node instanceof AST_Definitions && !(parent instanceof AST_ForIn && parent.init === node)) {\n                var drop_block = !(parent instanceof AST_Toplevel) && !(node instanceof AST_Var);\n                // place uninitialized names at the start\n                var body = [], head = [], tail = [];\n                // for unused names whose initialization has\n                // side effects, we can cascade the init. code\n                // into the next one, or next statement.\n                var side_effects = [];\n                node.definitions.forEach(function(def) {\n                    if (def.value) def.value = def.value.transform(tt);\n                    var is_destructure = def.name instanceof AST_Destructuring;\n                    var sym = is_destructure\n                        ? new SymbolDef(null, { name: \"<destructure>\" }) /* fake SymbolDef */\n                        : def.name.definition();\n                    if (drop_block && sym.global) return tail.push(def);\n                    if (!(drop_vars || drop_block)\n                        || is_destructure\n                            && (def.name.names.length\n                                || def.name.is_array\n                                || compressor.option(\"pure_getters\") != true)\n                        || in_use_ids.has(sym.id)\n                    ) {\n                        if (def.value && fixed_ids.has(sym.id) && fixed_ids.get(sym.id) !== def) {\n                            def.value = def.value.drop_side_effect_free(compressor);\n                        }\n                        if (def.name instanceof AST_SymbolVar) {\n                            var var_defs = var_defs_by_id.get(sym.id);\n                            if (var_defs.length > 1 && (!def.value || sym.orig.indexOf(def.name) > sym.eliminated)) {\n                                if (def.value) {\n                                    var ref = make_node(AST_SymbolRef, def.name, def.name);\n                                    sym.references.push(ref);\n                                    var assign = make_node(AST_Assign, def, {\n                                        operator: \"=\",\n                                        logical: false,\n                                        left: ref,\n                                        right: def.value\n                                    });\n                                    if (fixed_ids.get(sym.id) === def) {\n                                        fixed_ids.set(sym.id, assign);\n                                    }\n                                    side_effects.push(assign.transform(tt));\n                                }\n                                remove(var_defs, def);\n                                sym.eliminated++;\n                                return;\n                            }\n                        }\n                        if (def.value) {\n                            if (side_effects.length > 0) {\n                                if (tail.length > 0) {\n                                    side_effects.push(def.value);\n                                    def.value = make_sequence(def.value, side_effects);\n                                } else {\n                                    body.push(make_node(AST_SimpleStatement, node, {\n                                        body: make_sequence(node, side_effects)\n                                    }));\n                                }\n                                side_effects = [];\n                            }\n                            tail.push(def);\n                        } else {\n                            head.push(def);\n                        }\n                    } else if (sym.orig[0] instanceof AST_SymbolCatch) {\n                        var value = def.value && def.value.drop_side_effect_free(compressor);\n                        if (value) side_effects.push(value);\n                        def.value = null;\n                        head.push(def);\n                    } else {\n                        var value = def.value && def.value.drop_side_effect_free(compressor);\n                        if (value) {\n                            side_effects.push(value);\n                        }\n                        sym.eliminated++;\n                    }\n                });\n                if (head.length > 0 || tail.length > 0) {\n                    node.definitions = head.concat(tail);\n                    body.push(node);\n                }\n                if (side_effects.length > 0) {\n                    body.push(make_node(AST_SimpleStatement, node, {\n                        body: make_sequence(node, side_effects)\n                    }));\n                }\n                switch (body.length) {\n                  case 0:\n                    return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);\n                  case 1:\n                    return body[0];\n                  default:\n                    return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {\n                        body: body\n                    });\n                }\n            }\n            // certain combination of unused name + side effect leads to:\n            //    https://github.com/mishoo/UglifyJS2/issues/44\n            //    https://github.com/mishoo/UglifyJS2/issues/1830\n            //    https://github.com/mishoo/UglifyJS2/issues/1838\n            // that's an invalid AST.\n            // We fix it at this stage by moving the `var` outside the `for`.\n            if (node instanceof AST_For) {\n                descend(node, this);\n                var block;\n                if (node.init instanceof AST_BlockStatement) {\n                    block = node.init;\n                    node.init = block.body.pop();\n                    block.body.push(node);\n                }\n                if (node.init instanceof AST_SimpleStatement) {\n                    node.init = node.init.body;\n                } else if (is_empty(node.init)) {\n                    node.init = null;\n                }\n                return !block ? node : in_list ? MAP.splice(block.body) : block;\n            }\n            if (node instanceof AST_LabeledStatement\n                && node.body instanceof AST_For\n            ) {\n                descend(node, this);\n                if (node.body instanceof AST_BlockStatement) {\n                    var block = node.body;\n                    node.body = block.body.pop();\n                    block.body.push(node);\n                    return in_list ? MAP.splice(block.body) : block;\n                }\n                return node;\n            }\n            if (node instanceof AST_BlockStatement) {\n                descend(node, this);\n                if (in_list && node.body.every(can_be_evicted_from_block)) {\n                    return MAP.splice(node.body);\n                }\n                return node;\n            }\n            if (node instanceof AST_Scope) {\n                const save_scope = scope;\n                scope = node;\n                descend(node, this);\n                scope = save_scope;\n                return node;\n            }\n        }\n    );\n\n    self.transform(tt);\n\n    function scan_ref_scoped(node, descend) {\n        var node_def;\n        const sym = assign_as_unused(node);\n        if (sym instanceof AST_SymbolRef\n            && !is_ref_of(node.left, AST_SymbolBlockDeclaration)\n            && self.variables.get(sym.name) === (node_def = sym.definition())\n        ) {\n            if (node instanceof AST_Assign) {\n                node.right.walk(tw);\n                if (!node_def.chained && node.left.fixed_value() === node.right) {\n                    fixed_ids.set(node_def.id, node);\n                }\n            }\n            return true;\n        }\n        if (node instanceof AST_SymbolRef) {\n            node_def = node.definition();\n            if (!in_use_ids.has(node_def.id)) {\n                in_use_ids.set(node_def.id, node_def);\n                if (node_def.orig[0] instanceof AST_SymbolCatch) {\n                    const redef = node_def.scope.is_block_scope()\n                        && node_def.scope.get_defun_scope().variables.get(node_def.name);\n                    if (redef) in_use_ids.set(redef.id, redef);\n                }\n            }\n            return true;\n        }\n        if (node instanceof AST_Scope) {\n            var save_scope = scope;\n            scope = node;\n            descend();\n            scope = save_scope;\n            return true;\n        }\n    }\n});\n\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Assign,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_Call,\n    AST_Case,\n    AST_Chain,\n    AST_Class,\n    AST_ClassStaticBlock,\n    AST_ClassExpression,\n    AST_Conditional,\n    AST_Default,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Do,\n    AST_Exit,\n    AST_Expansion,\n    AST_For,\n    AST_ForIn,\n    AST_If,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_New,\n    AST_Node,\n    AST_Number,\n    AST_ObjectKeyVal,\n    AST_PropAccess,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Symbol,\n    AST_SymbolCatch,\n    AST_SymbolConst,\n    AST_SymbolDefun,\n    AST_SymbolFunarg,\n    AST_SymbolLambda,\n    AST_SymbolRef,\n    AST_This,\n    AST_Toplevel,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_VarDef,\n    AST_While,\n    AST_Yield,\n\n    walk,\n    walk_body,\n\n    _INLINE,\n    _NOINLINE,\n    _PURE\n} from \"../ast.js\";\nimport { HOP, make_node, noop } from \"../utils/index.js\";\n\nimport { lazy_op, is_modified } from \"./inference.js\";\nimport { INLINED, clear_flag } from \"./compressor-flags.js\";\nimport { read_property, has_break_or_continue, is_recursive_ref } from \"./common.js\";\n\n/**\n * Define the method AST_Node#reduce_vars, which goes through the AST in\n * execution order to perform basic flow analysis\n */\nfunction def_reduce_vars(node, func) {\n    node.DEFMETHOD(\"reduce_vars\", func);\n}\n\ndef_reduce_vars(AST_Node, noop);\n\n/** Clear definition properties */\nfunction reset_def(compressor, def) {\n    def.assignments = 0;\n    def.chained = false;\n    def.direct_access = false;\n    def.escaped = 0;\n    def.recursive_refs = 0;\n    def.references = [];\n    def.single_use = undefined;\n    if (\n        def.scope.pinned()\n        || (def.orig[0] instanceof AST_SymbolFunarg && def.scope.uses_arguments)\n    ) {\n        def.fixed = false;\n    } else if (def.orig[0] instanceof AST_SymbolConst || !compressor.exposed(def)) {\n        def.fixed = def.init;\n    } else {\n        def.fixed = false;\n    }\n}\n\nfunction reset_variables(tw, compressor, node) {\n    node.variables.forEach(function(def) {\n        reset_def(compressor, def);\n        if (def.fixed === null) {\n            tw.defs_to_safe_ids.set(def.id, tw.safe_ids);\n            mark(tw, def, true);\n        } else if (def.fixed) {\n            tw.loop_ids.set(def.id, tw.in_loop);\n            mark(tw, def, true);\n        }\n    });\n}\n\nfunction reset_block_variables(compressor, node) {\n    if (node.block_scope) node.block_scope.variables.forEach((def) => {\n        reset_def(compressor, def);\n    });\n}\n\nfunction push(tw) {\n    tw.safe_ids = Object.create(tw.safe_ids);\n}\n\nfunction pop(tw) {\n    tw.safe_ids = Object.getPrototypeOf(tw.safe_ids);\n}\n\nfunction mark(tw, def, safe) {\n    tw.safe_ids[def.id] = safe;\n}\n\nfunction safe_to_read(tw, def) {\n    if (def.single_use == \"m\") return false;\n    if (tw.safe_ids[def.id]) {\n        if (def.fixed == null) {\n            var orig = def.orig[0];\n            if (orig instanceof AST_SymbolFunarg || orig.name == \"arguments\") return false;\n            def.fixed = make_node(AST_Undefined, orig);\n        }\n        return true;\n    }\n    return def.fixed instanceof AST_Defun;\n}\n\nfunction safe_to_assign(tw, def, scope, value) {\n    if (def.fixed === undefined) return true;\n    let def_safe_ids;\n    if (def.fixed === null\n        && (def_safe_ids = tw.defs_to_safe_ids.get(def.id))\n    ) {\n        def_safe_ids[def.id] = false;\n        tw.defs_to_safe_ids.delete(def.id);\n        return true;\n    }\n    if (!HOP(tw.safe_ids, def.id)) return false;\n    if (!safe_to_read(tw, def)) return false;\n    if (def.fixed === false) return false;\n    if (def.fixed != null && (!value || def.references.length > def.assignments)) return false;\n    if (def.fixed instanceof AST_Defun) {\n        return value instanceof AST_Node && def.fixed.parent_scope === scope;\n    }\n    return def.orig.every((sym) => {\n        return !(sym instanceof AST_SymbolConst\n            || sym instanceof AST_SymbolDefun\n            || sym instanceof AST_SymbolLambda);\n    });\n}\n\nfunction ref_once(tw, compressor, def) {\n    return compressor.option(\"unused\")\n        && !def.scope.pinned()\n        && def.references.length - def.recursive_refs == 1\n        && tw.loop_ids.get(def.id) === tw.in_loop;\n}\n\nfunction is_immutable(value) {\n    if (!value) return false;\n    return value.is_constant()\n        || value instanceof AST_Lambda\n        || value instanceof AST_This;\n}\n\n// A definition \"escapes\" when its value can leave the point of use.\n// Example: `a = b || c`\n// In this example, \"b\" and \"c\" are escaping, because they're going into \"a\"\n//\n// def.escaped is != 0 when it escapes.\n//\n// When greater than 1, it means that N chained properties will be read off\n// of that def before an escape occurs. This is useful for evaluating\n// property accesses, where you need to know when to stop.\nfunction mark_escaped(tw, d, scope, node, value, level = 0, depth = 1) {\n    var parent = tw.parent(level);\n    if (value) {\n        if (value.is_constant()) return;\n        if (value instanceof AST_ClassExpression) return;\n    }\n\n    if (\n        parent instanceof AST_Assign && (parent.operator === \"=\" || parent.logical) && node === parent.right\n        || parent instanceof AST_Call && (node !== parent.expression || parent instanceof AST_New)\n        || parent instanceof AST_Exit && node === parent.value && node.scope !== d.scope\n        || parent instanceof AST_VarDef && node === parent.value\n        || parent instanceof AST_Yield && node === parent.value && node.scope !== d.scope\n    ) {\n        if (depth > 1 && !(value && value.is_constant_expression(scope))) depth = 1;\n        if (!d.escaped || d.escaped > depth) d.escaped = depth;\n        return;\n    } else if (\n        parent instanceof AST_Array\n        || parent instanceof AST_Await\n        || parent instanceof AST_Binary && lazy_op.has(parent.operator)\n        || parent instanceof AST_Conditional && node !== parent.condition\n        || parent instanceof AST_Expansion\n        || parent instanceof AST_Sequence && node === parent.tail_node()\n    ) {\n        mark_escaped(tw, d, scope, parent, parent, level + 1, depth);\n    } else if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n        var obj = tw.parent(level + 1);\n\n        mark_escaped(tw, d, scope, obj, obj, level + 2, depth);\n    } else if (parent instanceof AST_PropAccess && node === parent.expression) {\n        value = read_property(value, parent.property);\n\n        mark_escaped(tw, d, scope, parent, value, level + 1, depth + 1);\n        if (value) return;\n    }\n\n    if (level > 0) return;\n    if (parent instanceof AST_Sequence && node !== parent.tail_node()) return;\n    if (parent instanceof AST_SimpleStatement) return;\n\n    d.direct_access = true;\n}\n\nconst suppress = node => walk(node, node => {\n    if (!(node instanceof AST_Symbol)) return;\n    var d = node.definition();\n    if (!d) return;\n    if (node instanceof AST_SymbolRef) d.references.push(node);\n    d.fixed = false;\n});\n\ndef_reduce_vars(AST_Accessor, function(tw, descend, compressor) {\n    push(tw);\n    reset_variables(tw, compressor, this);\n    descend();\n    pop(tw);\n    return true;\n});\n\ndef_reduce_vars(AST_Assign, function(tw, descend, compressor) {\n    var node = this;\n    if (node.left instanceof AST_Destructuring) {\n        suppress(node.left);\n        return;\n    }\n\n    const finish_walk = () => {\n        if (node.logical) {\n            node.left.walk(tw);\n\n            push(tw);\n            node.right.walk(tw);\n            pop(tw);\n\n            return true;\n        }\n    };\n\n    var sym = node.left;\n    if (!(sym instanceof AST_SymbolRef)) return finish_walk();\n\n    var def = sym.definition();\n    var safe = safe_to_assign(tw, def, sym.scope, node.right);\n    def.assignments++;\n    if (!safe) return finish_walk();\n\n    var fixed = def.fixed;\n    if (!fixed && node.operator != \"=\" && !node.logical) return finish_walk();\n\n    var eq = node.operator == \"=\";\n    var value = eq ? node.right : node;\n    if (is_modified(compressor, tw, node, value, 0)) return finish_walk();\n\n    def.references.push(sym);\n\n    if (!node.logical) {\n        if (!eq) def.chained = true;\n\n        def.fixed = eq ? function() {\n            return node.right;\n        } : function() {\n            return make_node(AST_Binary, node, {\n                operator: node.operator.slice(0, -1),\n                left: fixed instanceof AST_Node ? fixed : fixed(),\n                right: node.right\n            });\n        };\n    }\n\n    if (node.logical) {\n        mark(tw, def, false);\n        push(tw);\n        node.right.walk(tw);\n        pop(tw);\n        return true;\n    }\n\n    mark(tw, def, false);\n    node.right.walk(tw);\n    mark(tw, def, true);\n\n    mark_escaped(tw, def, sym.scope, node, value, 0, 1);\n\n    return true;\n});\n\ndef_reduce_vars(AST_Binary, function(tw) {\n    if (!lazy_op.has(this.operator)) return;\n    this.left.walk(tw);\n    push(tw);\n    this.right.walk(tw);\n    pop(tw);\n    return true;\n});\n\ndef_reduce_vars(AST_Block, function(tw, descend, compressor) {\n    reset_block_variables(compressor, this);\n});\n\ndef_reduce_vars(AST_Case, function(tw) {\n    push(tw);\n    this.expression.walk(tw);\n    pop(tw);\n    push(tw);\n    walk_body(this, tw);\n    pop(tw);\n    return true;\n});\n\ndef_reduce_vars(AST_Class, function(tw, descend) {\n    clear_flag(this, INLINED);\n    push(tw);\n    descend();\n    pop(tw);\n    return true;\n});\n\ndef_reduce_vars(AST_ClassStaticBlock, function(tw, descend, compressor) {\n    reset_block_variables(compressor, this);\n});\n\ndef_reduce_vars(AST_Conditional, function(tw) {\n    this.condition.walk(tw);\n    push(tw);\n    this.consequent.walk(tw);\n    pop(tw);\n    push(tw);\n    this.alternative.walk(tw);\n    pop(tw);\n    return true;\n});\n\ndef_reduce_vars(AST_Chain, function(tw, descend) {\n    // Chains' conditions apply left-to-right, cumulatively.\n    // If we walk normally we don't go in that order because we would pop before pushing again\n    // Solution: AST_PropAccess and AST_Call push when they are optional, and never pop.\n    // Then we pop everything when they are done being walked.\n    const safe_ids = tw.safe_ids;\n\n    descend();\n\n    // Unroll back to start\n    tw.safe_ids = safe_ids;\n    return true;\n});\n\ndef_reduce_vars(AST_Call, function (tw) {\n    this.expression.walk(tw);\n\n    if (this.optional) {\n        // Never pop -- it's popped at AST_Chain above\n        push(tw);\n    }\n\n    for (const arg of this.args) arg.walk(tw);\n\n    return true;\n});\n\ndef_reduce_vars(AST_PropAccess, function (tw) {\n    if (!this.optional) return;\n\n    this.expression.walk(tw);\n\n    // Never pop -- it's popped at AST_Chain above\n    push(tw);\n\n    if (this.property instanceof AST_Node) this.property.walk(tw);\n\n    return true;\n});\n\ndef_reduce_vars(AST_Default, function(tw, descend) {\n    push(tw);\n    descend();\n    pop(tw);\n    return true;\n});\n\nfunction mark_lambda(tw, descend, compressor) {\n    clear_flag(this, INLINED);\n\n    push(tw);\n\n    reset_variables(tw, compressor, this);\n\n    var iife;\n    if (!this.name\n        && !this.uses_arguments\n        && !this.pinned()\n        && (iife = tw.parent()) instanceof AST_Call\n        && iife.expression === this\n        && !iife.args.some(arg => arg instanceof AST_Expansion)\n        && this.argnames.every(arg_name => arg_name instanceof AST_Symbol)\n    ) {\n        // Virtually turn IIFE parameters into variable definitions:\n        //   (function(a,b) {...})(c,d) => (function() {var a=c,b=d; ...})()\n        // So existing transformation rules can work on them.\n        this.argnames.forEach((arg, i) => {\n            if (!arg.definition) return;\n            var d = arg.definition();\n            // Avoid setting fixed when there's more than one origin for a variable value\n            if (d.orig.length > 1) return;\n            if (d.fixed === undefined && (!this.uses_arguments || tw.has_directive(\"use strict\"))) {\n                d.fixed = function() {\n                    return iife.args[i] || make_node(AST_Undefined, iife);\n                };\n                tw.loop_ids.set(d.id, tw.in_loop);\n                mark(tw, d, true);\n            } else {\n                d.fixed = false;\n            }\n        });\n    }\n\n    descend();\n    pop(tw);\n\n    return true;\n}\n\ndef_reduce_vars(AST_Lambda, mark_lambda);\n\ndef_reduce_vars(AST_Do, function(tw, descend, compressor) {\n    reset_block_variables(compressor, this);\n    const saved_loop = tw.in_loop;\n    tw.in_loop = this;\n    push(tw);\n    this.body.walk(tw);\n    if (has_break_or_continue(this)) {\n        pop(tw);\n        push(tw);\n    }\n    this.condition.walk(tw);\n    pop(tw);\n    tw.in_loop = saved_loop;\n    return true;\n});\n\ndef_reduce_vars(AST_For, function(tw, descend, compressor) {\n    reset_block_variables(compressor, this);\n    if (this.init) this.init.walk(tw);\n    const saved_loop = tw.in_loop;\n    tw.in_loop = this;\n    push(tw);\n    if (this.condition) this.condition.walk(tw);\n    this.body.walk(tw);\n    if (this.step) {\n        if (has_break_or_continue(this)) {\n            pop(tw);\n            push(tw);\n        }\n        this.step.walk(tw);\n    }\n    pop(tw);\n    tw.in_loop = saved_loop;\n    return true;\n});\n\ndef_reduce_vars(AST_ForIn, function(tw, descend, compressor) {\n    reset_block_variables(compressor, this);\n    suppress(this.init);\n    this.object.walk(tw);\n    const saved_loop = tw.in_loop;\n    tw.in_loop = this;\n    push(tw);\n    this.body.walk(tw);\n    pop(tw);\n    tw.in_loop = saved_loop;\n    return true;\n});\n\ndef_reduce_vars(AST_If, function(tw) {\n    this.condition.walk(tw);\n    push(tw);\n    this.body.walk(tw);\n    pop(tw);\n    if (this.alternative) {\n        push(tw);\n        this.alternative.walk(tw);\n        pop(tw);\n    }\n    return true;\n});\n\ndef_reduce_vars(AST_LabeledStatement, function(tw) {\n    push(tw);\n    this.body.walk(tw);\n    pop(tw);\n    return true;\n});\n\ndef_reduce_vars(AST_SymbolCatch, function() {\n    this.definition().fixed = false;\n});\n\ndef_reduce_vars(AST_SymbolRef, function(tw, descend, compressor) {\n    var d = this.definition();\n    d.references.push(this);\n    if (d.references.length == 1\n        && !d.fixed\n        && d.orig[0] instanceof AST_SymbolDefun) {\n        tw.loop_ids.set(d.id, tw.in_loop);\n    }\n    var fixed_value;\n    if (d.fixed === undefined || !safe_to_read(tw, d)) {\n        d.fixed = false;\n    } else if (d.fixed) {\n        fixed_value = this.fixed_value();\n        if (\n            fixed_value instanceof AST_Lambda\n            && is_recursive_ref(tw, d)\n        ) {\n            d.recursive_refs++;\n        } else if (fixed_value\n            && !compressor.exposed(d)\n            && ref_once(tw, compressor, d)\n        ) {\n            d.single_use =\n                fixed_value instanceof AST_Lambda && !fixed_value.pinned()\n                || fixed_value instanceof AST_Class\n                || d.scope === this.scope && fixed_value.is_constant_expression();\n        } else {\n            d.single_use = false;\n        }\n        if (is_modified(compressor, tw, this, fixed_value, 0, is_immutable(fixed_value))) {\n            if (d.single_use) {\n                d.single_use = \"m\";\n            } else {\n                d.fixed = false;\n            }\n        }\n    }\n    mark_escaped(tw, d, this.scope, this, fixed_value, 0, 1);\n});\n\ndef_reduce_vars(AST_Toplevel, function(tw, descend, compressor) {\n    this.globals.forEach(function(def) {\n        reset_def(compressor, def);\n    });\n    reset_variables(tw, compressor, this);\n});\n\ndef_reduce_vars(AST_Try, function(tw, descend, compressor) {\n    reset_block_variables(compressor, this);\n    push(tw);\n    this.body.walk(tw);\n    pop(tw);\n    if (this.bcatch) {\n        push(tw);\n        this.bcatch.walk(tw);\n        pop(tw);\n    }\n    if (this.bfinally) this.bfinally.walk(tw);\n    return true;\n});\n\ndef_reduce_vars(AST_Unary, function(tw) {\n    var node = this;\n    if (node.operator !== \"++\" && node.operator !== \"--\") return;\n    var exp = node.expression;\n    if (!(exp instanceof AST_SymbolRef)) return;\n    var def = exp.definition();\n    var safe = safe_to_assign(tw, def, exp.scope, true);\n    def.assignments++;\n    if (!safe) return;\n    var fixed = def.fixed;\n    if (!fixed) return;\n    def.references.push(exp);\n    def.chained = true;\n    def.fixed = function() {\n        return make_node(AST_Binary, node, {\n            operator: node.operator.slice(0, -1),\n            left: make_node(AST_UnaryPrefix, node, {\n                operator: \"+\",\n                expression: fixed instanceof AST_Node ? fixed : fixed()\n            }),\n            right: make_node(AST_Number, node, {\n                value: 1\n            })\n        });\n    };\n    mark(tw, def, true);\n    return true;\n});\n\ndef_reduce_vars(AST_VarDef, function(tw, descend) {\n    var node = this;\n    if (node.name instanceof AST_Destructuring) {\n        suppress(node.name);\n        return;\n    }\n    var d = node.name.definition();\n    if (node.value) {\n        if (safe_to_assign(tw, d, node.name.scope, node.value)) {\n            d.fixed = function() {\n                return node.value;\n            };\n            tw.loop_ids.set(d.id, tw.in_loop);\n            mark(tw, d, false);\n            descend();\n            mark(tw, d, true);\n            return true;\n        } else {\n            d.fixed = false;\n        }\n    }\n});\n\ndef_reduce_vars(AST_While, function(tw, descend, compressor) {\n    reset_block_variables(compressor, this);\n    const saved_loop = tw.in_loop;\n    tw.in_loop = this;\n    push(tw);\n    descend();\n    pop(tw);\n    tw.in_loop = saved_loop;\n    return true;\n});\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Chain,\n    AST_Class,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Dot,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_If,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectKeyVal,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Sub,\n    AST_Switch,\n    AST_Symbol,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefun,\n    AST_SymbolFunarg,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_This,\n    AST_Try,\n    AST_TryBlock,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_With,\n    AST_Yield,\n\n    TreeTransformer,\n    TreeWalker,\n    walk,\n    walk_abort,\n\n    _NOINLINE\n} from \"../ast.js\";\nimport {\n    make_node,\n    MAP,\n    member,\n    remove,\n    has_annotation\n} from \"../utils/index.js\";\n\nimport { pure_prop_access_globals } from \"./native-objects.js\";\nimport {\n    lazy_op,\n    unary_side_effects,\n    is_modified,\n    is_lhs,\n    aborts\n} from \"./inference.js\";\nimport { WRITE_ONLY, clear_flag } from \"./compressor-flags.js\";\nimport {\n    make_sequence,\n    merge_sequence,\n    maintain_this_binding,\n    is_func_expr,\n    is_identifier_atom,\n    is_ref_of,\n    can_be_evicted_from_block,\n    as_statement_array,\n} from \"./common.js\";\n\nfunction loop_body(x) {\n    if (x instanceof AST_IterationStatement) {\n        return x.body instanceof AST_BlockStatement ? x.body : x;\n    }\n    return x;\n}\n\nfunction is_lhs_read_only(lhs) {\n    if (lhs instanceof AST_This) return true;\n    if (lhs instanceof AST_SymbolRef) return lhs.definition().orig[0] instanceof AST_SymbolLambda;\n    if (lhs instanceof AST_PropAccess) {\n        lhs = lhs.expression;\n        if (lhs instanceof AST_SymbolRef) {\n            if (lhs.is_immutable()) return false;\n            lhs = lhs.fixed_value();\n        }\n        if (!lhs) return true;\n        if (lhs instanceof AST_RegExp) return false;\n        if (lhs instanceof AST_Constant) return true;\n        return is_lhs_read_only(lhs);\n    }\n    return false;\n}\n\n// Remove code which we know is unreachable.\nexport function trim_unreachable_code(compressor, stat, target) {\n    walk(stat, node => {\n        if (node instanceof AST_Var) {\n            node.remove_initializers();\n            target.push(node);\n            return true;\n        }\n        if (\n            node instanceof AST_Defun\n            && (node === stat || !compressor.has_directive(\"use strict\"))\n        ) {\n            target.push(node === stat ? node : make_node(AST_Var, node, {\n                definitions: [\n                    make_node(AST_VarDef, node, {\n                        name: make_node(AST_SymbolVar, node.name, node.name),\n                        value: null\n                    })\n                ]\n            }));\n            return true;\n        }\n        if (node instanceof AST_Export || node instanceof AST_Import) {\n            target.push(node);\n            return true;\n        }\n        if (node instanceof AST_Scope) {\n            return true;\n        }\n    });\n}\n\n/** Tighten a bunch of statements together, and perform statement-level optimization. */\nexport function tighten_body(statements, compressor) {\n    const nearest_scope = compressor.find_scope();\n    const defun_scope = nearest_scope.get_defun_scope();\n    const { in_loop, in_try } = find_loop_scope_try();\n\n    var CHANGED, max_iter = 10;\n    do {\n        CHANGED = false;\n        eliminate_spurious_blocks(statements);\n        if (compressor.option(\"dead_code\")) {\n            eliminate_dead_code(statements, compressor);\n        }\n        if (compressor.option(\"if_return\")) {\n            handle_if_return(statements, compressor);\n        }\n        if (compressor.sequences_limit > 0) {\n            sequencesize(statements, compressor);\n            sequencesize_2(statements, compressor);\n        }\n        if (compressor.option(\"join_vars\")) {\n            join_consecutive_vars(statements);\n        }\n        if (compressor.option(\"collapse_vars\")) {\n            collapse(statements, compressor);\n        }\n    } while (CHANGED && max_iter-- > 0);\n\n    function find_loop_scope_try() {\n        var node = compressor.self(), level = 0, in_loop = false, in_try = false;\n        do {\n            if (node instanceof AST_IterationStatement) {\n                in_loop = true;\n            } else if (node instanceof AST_Scope) {\n                break;\n            } else if (node instanceof AST_TryBlock) {\n                in_try = true;\n            }\n        } while (node = compressor.parent(level++));\n\n        return { in_loop, in_try };\n    }\n\n    // Search from right to left for assignment-like expressions:\n    // - `var a = x;`\n    // - `a = x;`\n    // - `++a`\n    // For each candidate, scan from left to right for first usage, then try\n    // to fold assignment into the site for compression.\n    // Will not attempt to collapse assignments into or past code blocks\n    // which are not sequentially executed, e.g. loops and conditionals.\n    function collapse(statements, compressor) {\n        if (nearest_scope.pinned() || defun_scope.pinned())\n            return statements;\n        var args;\n        var candidates = [];\n        var stat_index = statements.length;\n        var scanner = new TreeTransformer(function (node) {\n            if (abort)\n                return node;\n            // Skip nodes before `candidate` as quickly as possible\n            if (!hit) {\n                if (node !== hit_stack[hit_index])\n                    return node;\n                hit_index++;\n                if (hit_index < hit_stack.length)\n                    return handle_custom_scan_order(node);\n                hit = true;\n                stop_after = find_stop(node, 0);\n                if (stop_after === node)\n                    abort = true;\n                return node;\n            }\n            // Stop immediately if these node types are encountered\n            var parent = scanner.parent();\n            if (node instanceof AST_Assign\n                    && (node.logical || node.operator != \"=\" && lhs.equivalent_to(node.left))\n                || node instanceof AST_Await\n                || node instanceof AST_Call && lhs instanceof AST_PropAccess && lhs.equivalent_to(node.expression)\n                ||\n                    (node instanceof AST_Call || node instanceof AST_PropAccess)\n                    && node.optional\n                || node instanceof AST_Debugger\n                || node instanceof AST_Destructuring\n                || node instanceof AST_Expansion\n                    && node.expression instanceof AST_Symbol\n                    && (\n                        node.expression instanceof AST_This\n                        || node.expression.definition().references.length > 1\n                    )\n                || node instanceof AST_IterationStatement && !(node instanceof AST_For)\n                || node instanceof AST_LoopControl\n                || node instanceof AST_Try\n                || node instanceof AST_With\n                || node instanceof AST_Yield\n                || node instanceof AST_Export\n                || node instanceof AST_Class\n                || parent instanceof AST_For && node !== parent.init\n                || !replace_all\n                    && (\n                        node instanceof AST_SymbolRef\n                        && !node.is_declared(compressor)\n                        && !pure_prop_access_globals.has(node)\n                    )\n                || node instanceof AST_SymbolRef\n                    && parent instanceof AST_Call\n                    && has_annotation(parent, _NOINLINE)\n            ) {\n                abort = true;\n                return node;\n            }\n            // Stop only if candidate is found within conditional branches\n            if (!stop_if_hit && (!lhs_local || !replace_all)\n                && (parent instanceof AST_Binary && lazy_op.has(parent.operator) && parent.left !== node\n                    || parent instanceof AST_Conditional && parent.condition !== node\n                    || parent instanceof AST_If && parent.condition !== node)) {\n                stop_if_hit = parent;\n            }\n            // Replace variable with assignment when found\n            if (\n                can_replace\n                && !(node instanceof AST_SymbolDeclaration)\n                && lhs.equivalent_to(node)\n                && !shadows(scanner.find_scope() || nearest_scope, lvalues)\n            ) {\n                if (stop_if_hit) {\n                    abort = true;\n                    return node;\n                }\n                if (is_lhs(node, parent)) {\n                    if (value_def)\n                        replaced++;\n                    return node;\n                } else {\n                    replaced++;\n                    if (value_def && candidate instanceof AST_VarDef)\n                        return node;\n                }\n                CHANGED = abort = true;\n                if (candidate instanceof AST_UnaryPostfix) {\n                    return make_node(AST_UnaryPrefix, candidate, candidate);\n                }\n                if (candidate instanceof AST_VarDef) {\n                    var def = candidate.name.definition();\n                    var value = candidate.value;\n                    if (def.references.length - def.replaced == 1 && !compressor.exposed(def)) {\n                        def.replaced++;\n                        if (funarg && is_identifier_atom(value)) {\n                            return value.transform(compressor);\n                        } else {\n                            return maintain_this_binding(parent, node, value);\n                        }\n                    }\n                    return make_node(AST_Assign, candidate, {\n                        operator: \"=\",\n                        logical: false,\n                        left: make_node(AST_SymbolRef, candidate.name, candidate.name),\n                        right: value\n                    });\n                }\n                clear_flag(candidate, WRITE_ONLY);\n                return candidate;\n            }\n            // These node types have child nodes that execute sequentially,\n            // but are otherwise not safe to scan into or beyond them.\n            var sym;\n            if (node instanceof AST_Call\n                || node instanceof AST_Exit\n                && (side_effects || lhs instanceof AST_PropAccess || may_modify(lhs))\n                || node instanceof AST_PropAccess\n                && (side_effects || node.expression.may_throw_on_access(compressor))\n                || node instanceof AST_SymbolRef\n                && ((lvalues.has(node.name) && lvalues.get(node.name).modified) || side_effects && may_modify(node))\n                || node instanceof AST_VarDef && node.value\n                && (lvalues.has(node.name.name) || side_effects && may_modify(node.name))\n                || (sym = is_lhs(node.left, node))\n                && (sym instanceof AST_PropAccess || lvalues.has(sym.name))\n                || may_throw\n                && (in_try ? node.has_side_effects(compressor) : side_effects_external(node))) {\n                stop_after = node;\n                if (node instanceof AST_Scope)\n                    abort = true;\n            }\n            return handle_custom_scan_order(node);\n        }, function (node) {\n            if (abort)\n                return;\n            if (stop_after === node)\n                abort = true;\n            if (stop_if_hit === node)\n                stop_if_hit = null;\n        });\n\n        var multi_replacer = new TreeTransformer(function (node) {\n            if (abort)\n                return node;\n            // Skip nodes before `candidate` as quickly as possible\n            if (!hit) {\n                if (node !== hit_stack[hit_index])\n                    return node;\n                hit_index++;\n                if (hit_index < hit_stack.length)\n                    return;\n                hit = true;\n                return node;\n            }\n            // Replace variable when found\n            if (node instanceof AST_SymbolRef\n                && node.name == def.name) {\n                if (!--replaced)\n                    abort = true;\n                if (is_lhs(node, multi_replacer.parent()))\n                    return node;\n                def.replaced++;\n                value_def.replaced--;\n                return candidate.value;\n            }\n            // Skip (non-executed) functions and (leading) default case in switch statements\n            if (node instanceof AST_Default || node instanceof AST_Scope)\n                return node;\n        });\n\n        while (--stat_index >= 0) {\n            // Treat parameters as collapsible in IIFE, i.e.\n            //   function(a, b){ ... }(x());\n            // would be translated into equivalent assignments:\n            //   var a = x(), b = undefined;\n            if (stat_index == 0 && compressor.option(\"unused\"))\n                extract_args();\n            // Find collapsible assignments\n            var hit_stack = [];\n            extract_candidates(statements[stat_index]);\n            while (candidates.length > 0) {\n                hit_stack = candidates.pop();\n                var hit_index = 0;\n                var candidate = hit_stack[hit_stack.length - 1];\n                var value_def = null;\n                var stop_after = null;\n                var stop_if_hit = null;\n                var lhs = get_lhs(candidate);\n                if (!lhs || is_lhs_read_only(lhs) || lhs.has_side_effects(compressor))\n                    continue;\n                // Locate symbols which may execute code outside of scanning range\n                var lvalues = get_lvalues(candidate);\n                var lhs_local = is_lhs_local(lhs);\n                if (lhs instanceof AST_SymbolRef) {\n                    lvalues.set(lhs.name, { def: lhs.definition(), modified: false });\n                }\n                var side_effects = value_has_side_effects(candidate);\n                var replace_all = replace_all_symbols();\n                var may_throw = candidate.may_throw(compressor);\n                var funarg = candidate.name instanceof AST_SymbolFunarg;\n                var hit = funarg;\n                var abort = false, replaced = 0, can_replace = !args || !hit;\n                if (!can_replace) {\n                    for (\n                        let j = compressor.self().argnames.lastIndexOf(candidate.name) + 1;\n                        !abort && j < args.length;\n                        j++\n                    ) {\n                        args[j].transform(scanner);\n                    }\n                    can_replace = true;\n                }\n                for (var i = stat_index; !abort && i < statements.length; i++) {\n                    statements[i].transform(scanner);\n                }\n                if (value_def) {\n                    var def = candidate.name.definition();\n                    if (abort && def.references.length - def.replaced > replaced)\n                        replaced = false;\n                    else {\n                        abort = false;\n                        hit_index = 0;\n                        hit = funarg;\n                        for (var i = stat_index; !abort && i < statements.length; i++) {\n                            statements[i].transform(multi_replacer);\n                        }\n                        value_def.single_use = false;\n                    }\n                }\n                if (replaced && !remove_candidate(candidate))\n                    statements.splice(stat_index, 1);\n            }\n        }\n\n        function handle_custom_scan_order(node) {\n            // Skip (non-executed) functions\n            if (node instanceof AST_Scope)\n                return node;\n\n            // Scan case expressions first in a switch statement\n            if (node instanceof AST_Switch) {\n                node.expression = node.expression.transform(scanner);\n                for (var i = 0, len = node.body.length; !abort && i < len; i++) {\n                    var branch = node.body[i];\n                    if (branch instanceof AST_Case) {\n                        if (!hit) {\n                            if (branch !== hit_stack[hit_index])\n                                continue;\n                            hit_index++;\n                        }\n                        branch.expression = branch.expression.transform(scanner);\n                        if (!replace_all)\n                            break;\n                    }\n                }\n                abort = true;\n                return node;\n            }\n        }\n\n        function redefined_within_scope(def, scope) {\n            if (def.global)\n                return false;\n            let cur_scope = def.scope;\n            while (cur_scope && cur_scope !== scope) {\n                if (cur_scope.variables.has(def.name)) {\n                    return true;\n                }\n                cur_scope = cur_scope.parent_scope;\n            }\n            return false;\n        }\n\n        function has_overlapping_symbol(fn, arg, fn_strict) {\n            var found = false, scan_this = !(fn instanceof AST_Arrow);\n            arg.walk(new TreeWalker(function (node, descend) {\n                if (found)\n                    return true;\n                if (node instanceof AST_SymbolRef && (fn.variables.has(node.name) || redefined_within_scope(node.definition(), fn))) {\n                    var s = node.definition().scope;\n                    if (s !== defun_scope)\n                        while (s = s.parent_scope) {\n                            if (s === defun_scope)\n                                return true;\n                        }\n                    return found = true;\n                }\n                if ((fn_strict || scan_this) && node instanceof AST_This) {\n                    return found = true;\n                }\n                if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {\n                    var prev = scan_this;\n                    scan_this = false;\n                    descend();\n                    scan_this = prev;\n                    return true;\n                }\n            }));\n            return found;\n        }\n\n        function extract_args() {\n            var iife, fn = compressor.self();\n            if (is_func_expr(fn)\n                && !fn.name\n                && !fn.uses_arguments\n                && !fn.pinned()\n                && (iife = compressor.parent()) instanceof AST_Call\n                && iife.expression === fn\n                && iife.args.every((arg) => !(arg instanceof AST_Expansion))) {\n                var fn_strict = compressor.has_directive(\"use strict\");\n                if (fn_strict && !member(fn_strict, fn.body))\n                    fn_strict = false;\n                var len = fn.argnames.length;\n                args = iife.args.slice(len);\n                var names = new Set();\n                for (var i = len; --i >= 0;) {\n                    var sym = fn.argnames[i];\n                    var arg = iife.args[i];\n                    // The following two line fix is a duplicate of the fix at\n                    // https://github.com/terser/terser/commit/011d3eb08cefe6922c7d1bdfa113fc4aeaca1b75\n                    // This might mean that these two pieces of code (one here in collapse_vars and another in reduce_vars\n                    // Might be doing the exact same thing.\n                    const def = sym.definition && sym.definition();\n                    const is_reassigned = def && def.orig.length > 1;\n                    if (is_reassigned)\n                        continue;\n                    args.unshift(make_node(AST_VarDef, sym, {\n                        name: sym,\n                        value: arg\n                    }));\n                    if (names.has(sym.name))\n                        continue;\n                    names.add(sym.name);\n                    if (sym instanceof AST_Expansion) {\n                        var elements = iife.args.slice(i);\n                        if (elements.every((arg) => !has_overlapping_symbol(fn, arg, fn_strict)\n                        )) {\n                            candidates.unshift([make_node(AST_VarDef, sym, {\n                                name: sym.expression,\n                                value: make_node(AST_Array, iife, {\n                                    elements: elements\n                                })\n                            })]);\n                        }\n                    } else {\n                        if (!arg) {\n                            arg = make_node(AST_Undefined, sym).transform(compressor);\n                        } else if (arg instanceof AST_Lambda && arg.pinned()\n                            || has_overlapping_symbol(fn, arg, fn_strict)) {\n                            arg = null;\n                        }\n                        if (arg)\n                            candidates.unshift([make_node(AST_VarDef, sym, {\n                                name: sym,\n                                value: arg\n                            })]);\n                    }\n                }\n            }\n        }\n\n        function extract_candidates(expr) {\n            hit_stack.push(expr);\n            if (expr instanceof AST_Assign) {\n                if (!expr.left.has_side_effects(compressor)\n                    && !(expr.right instanceof AST_Chain)) {\n                    candidates.push(hit_stack.slice());\n                }\n                extract_candidates(expr.right);\n            } else if (expr instanceof AST_Binary) {\n                extract_candidates(expr.left);\n                extract_candidates(expr.right);\n            } else if (expr instanceof AST_Call && !has_annotation(expr, _NOINLINE)) {\n                extract_candidates(expr.expression);\n                expr.args.forEach(extract_candidates);\n            } else if (expr instanceof AST_Case) {\n                extract_candidates(expr.expression);\n            } else if (expr instanceof AST_Conditional) {\n                extract_candidates(expr.condition);\n                extract_candidates(expr.consequent);\n                extract_candidates(expr.alternative);\n            } else if (expr instanceof AST_Definitions) {\n                var len = expr.definitions.length;\n                // limit number of trailing variable definitions for consideration\n                var i = len - 200;\n                if (i < 0)\n                    i = 0;\n                for (; i < len; i++) {\n                    extract_candidates(expr.definitions[i]);\n                }\n            } else if (expr instanceof AST_DWLoop) {\n                extract_candidates(expr.condition);\n                if (!(expr.body instanceof AST_Block)) {\n                    extract_candidates(expr.body);\n                }\n            } else if (expr instanceof AST_Exit) {\n                if (expr.value)\n                    extract_candidates(expr.value);\n            } else if (expr instanceof AST_For) {\n                if (expr.init)\n                    extract_candidates(expr.init);\n                if (expr.condition)\n                    extract_candidates(expr.condition);\n                if (expr.step)\n                    extract_candidates(expr.step);\n                if (!(expr.body instanceof AST_Block)) {\n                    extract_candidates(expr.body);\n                }\n            } else if (expr instanceof AST_ForIn) {\n                extract_candidates(expr.object);\n                if (!(expr.body instanceof AST_Block)) {\n                    extract_candidates(expr.body);\n                }\n            } else if (expr instanceof AST_If) {\n                extract_candidates(expr.condition);\n                if (!(expr.body instanceof AST_Block)) {\n                    extract_candidates(expr.body);\n                }\n                if (expr.alternative && !(expr.alternative instanceof AST_Block)) {\n                    extract_candidates(expr.alternative);\n                }\n            } else if (expr instanceof AST_Sequence) {\n                expr.expressions.forEach(extract_candidates);\n            } else if (expr instanceof AST_SimpleStatement) {\n                extract_candidates(expr.body);\n            } else if (expr instanceof AST_Switch) {\n                extract_candidates(expr.expression);\n                expr.body.forEach(extract_candidates);\n            } else if (expr instanceof AST_Unary) {\n                if (expr.operator == \"++\" || expr.operator == \"--\") {\n                    candidates.push(hit_stack.slice());\n                }\n            } else if (expr instanceof AST_VarDef) {\n                if (expr.value && !(expr.value instanceof AST_Chain)) {\n                    candidates.push(hit_stack.slice());\n                    extract_candidates(expr.value);\n                }\n            }\n            hit_stack.pop();\n        }\n\n        function find_stop(node, level, write_only) {\n            var parent = scanner.parent(level);\n            if (parent instanceof AST_Assign) {\n                if (write_only\n                    && !parent.logical\n                    && !(parent.left instanceof AST_PropAccess\n                        || lvalues.has(parent.left.name))) {\n                    return find_stop(parent, level + 1, write_only);\n                }\n                return node;\n            }\n            if (parent instanceof AST_Binary) {\n                if (write_only && (!lazy_op.has(parent.operator) || parent.left === node)) {\n                    return find_stop(parent, level + 1, write_only);\n                }\n                return node;\n            }\n            if (parent instanceof AST_Call)\n                return node;\n            if (parent instanceof AST_Case)\n                return node;\n            if (parent instanceof AST_Conditional) {\n                if (write_only && parent.condition === node) {\n                    return find_stop(parent, level + 1, write_only);\n                }\n                return node;\n            }\n            if (parent instanceof AST_Definitions) {\n                return find_stop(parent, level + 1, true);\n            }\n            if (parent instanceof AST_Exit) {\n                return write_only ? find_stop(parent, level + 1, write_only) : node;\n            }\n            if (parent instanceof AST_If) {\n                if (write_only && parent.condition === node) {\n                    return find_stop(parent, level + 1, write_only);\n                }\n                return node;\n            }\n            if (parent instanceof AST_IterationStatement)\n                return node;\n            if (parent instanceof AST_Sequence) {\n                return find_stop(parent, level + 1, parent.tail_node() !== node);\n            }\n            if (parent instanceof AST_SimpleStatement) {\n                return find_stop(parent, level + 1, true);\n            }\n            if (parent instanceof AST_Switch)\n                return node;\n            if (parent instanceof AST_VarDef)\n                return node;\n            return null;\n        }\n\n        function mangleable_var(var_def) {\n            var value = var_def.value;\n            if (!(value instanceof AST_SymbolRef))\n                return;\n            if (value.name == \"arguments\")\n                return;\n            var def = value.definition();\n            if (def.undeclared)\n                return;\n            return value_def = def;\n        }\n\n        function get_lhs(expr) {\n            if (expr instanceof AST_Assign && expr.logical) {\n                return false;\n            } else if (expr instanceof AST_VarDef && expr.name instanceof AST_SymbolDeclaration) {\n                var def = expr.name.definition();\n                if (!member(expr.name, def.orig))\n                    return;\n                var referenced = def.references.length - def.replaced;\n                if (!referenced)\n                    return;\n                var declared = def.orig.length - def.eliminated;\n                if (declared > 1 && !(expr.name instanceof AST_SymbolFunarg)\n                    || (referenced > 1 ? mangleable_var(expr) : !compressor.exposed(def))) {\n                    return make_node(AST_SymbolRef, expr.name, expr.name);\n                }\n            } else {\n                const lhs = expr instanceof AST_Assign\n                    ? expr.left\n                    : expr.expression;\n                return !is_ref_of(lhs, AST_SymbolConst)\n                    && !is_ref_of(lhs, AST_SymbolLet) && lhs;\n            }\n        }\n\n        function get_rvalue(expr) {\n            if (expr instanceof AST_Assign) {\n                return expr.right;\n            } else {\n                return expr.value;\n            }\n        }\n\n        function get_lvalues(expr) {\n            var lvalues = new Map();\n            if (expr instanceof AST_Unary)\n                return lvalues;\n            var tw = new TreeWalker(function (node) {\n                var sym = node;\n                while (sym instanceof AST_PropAccess)\n                    sym = sym.expression;\n                if (sym instanceof AST_SymbolRef) {\n                    const prev = lvalues.get(sym.name);\n                    if (!prev || !prev.modified) {\n                        lvalues.set(sym.name, {\n                            def: sym.definition(),\n                            modified: is_modified(compressor, tw, node, node, 0)\n                        });\n                    }\n                }\n            });\n            get_rvalue(expr).walk(tw);\n            return lvalues;\n        }\n\n        function remove_candidate(expr) {\n            if (expr.name instanceof AST_SymbolFunarg) {\n                var iife = compressor.parent(), argnames = compressor.self().argnames;\n                var index = argnames.indexOf(expr.name);\n                if (index < 0) {\n                    iife.args.length = Math.min(iife.args.length, argnames.length - 1);\n                } else {\n                    var args = iife.args;\n                    if (args[index])\n                        args[index] = make_node(AST_Number, args[index], {\n                            value: 0\n                        });\n                }\n                return true;\n            }\n            var found = false;\n            return statements[stat_index].transform(new TreeTransformer(function (node, descend, in_list) {\n                if (found)\n                    return node;\n                if (node === expr || node.body === expr) {\n                    found = true;\n                    if (node instanceof AST_VarDef) {\n                        node.value = node.name instanceof AST_SymbolConst\n                            ? make_node(AST_Undefined, node.value) // `const` always needs value.\n                            : null;\n                        return node;\n                    }\n                    return in_list ? MAP.skip : null;\n                }\n            }, function (node) {\n                if (node instanceof AST_Sequence)\n                    switch (node.expressions.length) {\n                        case 0: return null;\n                        case 1: return node.expressions[0];\n                    }\n            }));\n        }\n\n        function is_lhs_local(lhs) {\n            while (lhs instanceof AST_PropAccess)\n                lhs = lhs.expression;\n            return lhs instanceof AST_SymbolRef\n                && lhs.definition().scope.get_defun_scope() === defun_scope\n                && !(in_loop\n                    && (lvalues.has(lhs.name)\n                        || candidate instanceof AST_Unary\n                        || (candidate instanceof AST_Assign\n                            && !candidate.logical\n                            && candidate.operator != \"=\")));\n        }\n\n        function value_has_side_effects(expr) {\n            if (expr instanceof AST_Unary)\n                return unary_side_effects.has(expr.operator);\n            return get_rvalue(expr).has_side_effects(compressor);\n        }\n\n        function replace_all_symbols() {\n            if (side_effects)\n                return false;\n            if (value_def)\n                return true;\n            if (lhs instanceof AST_SymbolRef) {\n                var def = lhs.definition();\n                if (def.references.length - def.replaced == (candidate instanceof AST_VarDef ? 1 : 2)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        function may_modify(sym) {\n            if (!sym.definition)\n                return true; // AST_Destructuring\n            var def = sym.definition();\n            if (def.orig.length == 1 && def.orig[0] instanceof AST_SymbolDefun)\n                return false;\n            if (def.scope.get_defun_scope() !== defun_scope)\n                return true;\n            return def.references.some((ref) =>\n                ref.scope.get_defun_scope() !== defun_scope\n            );\n        }\n\n        function side_effects_external(node, lhs) {\n            if (node instanceof AST_Assign)\n                return side_effects_external(node.left, true);\n            if (node instanceof AST_Unary)\n                return side_effects_external(node.expression, true);\n            if (node instanceof AST_VarDef)\n                return node.value && side_effects_external(node.value);\n            if (lhs) {\n                if (node instanceof AST_Dot)\n                    return side_effects_external(node.expression, true);\n                if (node instanceof AST_Sub)\n                    return side_effects_external(node.expression, true);\n                if (node instanceof AST_SymbolRef)\n                    return node.definition().scope.get_defun_scope() !== defun_scope;\n            }\n            return false;\n        }\n\n        /**\n         * Will any of the pulled-in lvalues shadow a variable in newScope or parents?\n         * similar to scope_encloses_variables_in_this_scope */\n        function shadows(my_scope, lvalues) {\n            for (const { def } of lvalues.values()) {\n                const looked_up = my_scope.find_variable(def.name);\n                if (looked_up) {\n                    if (looked_up === def) continue;\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    function eliminate_spurious_blocks(statements) {\n        var seen_dirs = [];\n        for (var i = 0; i < statements.length;) {\n            var stat = statements[i];\n            if (stat instanceof AST_BlockStatement && stat.body.every(can_be_evicted_from_block)) {\n                CHANGED = true;\n                eliminate_spurious_blocks(stat.body);\n                statements.splice(i, 1, ...stat.body);\n                i += stat.body.length;\n            } else if (stat instanceof AST_EmptyStatement) {\n                CHANGED = true;\n                statements.splice(i, 1);\n            } else if (stat instanceof AST_Directive) {\n                if (seen_dirs.indexOf(stat.value) < 0) {\n                    i++;\n                    seen_dirs.push(stat.value);\n                } else {\n                    CHANGED = true;\n                    statements.splice(i, 1);\n                }\n            } else\n                i++;\n        }\n    }\n\n    function handle_if_return(statements, compressor) {\n        var self = compressor.self();\n        var multiple_if_returns = has_multiple_if_returns(statements);\n        var in_lambda = self instanceof AST_Lambda;\n        for (var i = statements.length; --i >= 0;) {\n            var stat = statements[i];\n            var j = next_index(i);\n            var next = statements[j];\n\n            if (in_lambda && !next && stat instanceof AST_Return) {\n                if (!stat.value) {\n                    CHANGED = true;\n                    statements.splice(i, 1);\n                    continue;\n                }\n                if (stat.value instanceof AST_UnaryPrefix && stat.value.operator == \"void\") {\n                    CHANGED = true;\n                    statements[i] = make_node(AST_SimpleStatement, stat, {\n                        body: stat.value.expression\n                    });\n                    continue;\n                }\n            }\n\n            if (stat instanceof AST_If) {\n                var ab = aborts(stat.body);\n                if (can_merge_flow(ab)) {\n                    if (ab.label) {\n                        remove(ab.label.thedef.references, ab);\n                    }\n                    CHANGED = true;\n                    stat = stat.clone();\n                    stat.condition = stat.condition.negate(compressor);\n                    var body = as_statement_array_with_return(stat.body, ab);\n                    stat.body = make_node(AST_BlockStatement, stat, {\n                        body: as_statement_array(stat.alternative).concat(extract_functions())\n                    });\n                    stat.alternative = make_node(AST_BlockStatement, stat, {\n                        body: body\n                    });\n                    statements[i] = stat.transform(compressor);\n                    continue;\n                }\n\n                var ab = aborts(stat.alternative);\n                if (can_merge_flow(ab)) {\n                    if (ab.label) {\n                        remove(ab.label.thedef.references, ab);\n                    }\n                    CHANGED = true;\n                    stat = stat.clone();\n                    stat.body = make_node(AST_BlockStatement, stat.body, {\n                        body: as_statement_array(stat.body).concat(extract_functions())\n                    });\n                    var body = as_statement_array_with_return(stat.alternative, ab);\n                    stat.alternative = make_node(AST_BlockStatement, stat.alternative, {\n                        body: body\n                    });\n                    statements[i] = stat.transform(compressor);\n                    continue;\n                }\n            }\n\n            if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                var value = stat.body.value;\n                //---\n                // pretty silly case, but:\n                // if (foo()) return; return; ==> foo(); return;\n                if (!value && !stat.alternative\n                    && (in_lambda && !next || next instanceof AST_Return && !next.value)) {\n                    CHANGED = true;\n                    statements[i] = make_node(AST_SimpleStatement, stat.condition, {\n                        body: stat.condition\n                    });\n                    continue;\n                }\n                //---\n                // if (foo()) return x; return y; ==> return foo() ? x : y;\n                if (value && !stat.alternative && next instanceof AST_Return && next.value) {\n                    CHANGED = true;\n                    stat = stat.clone();\n                    stat.alternative = next;\n                    statements[i] = stat.transform(compressor);\n                    statements.splice(j, 1);\n                    continue;\n                }\n                //---\n                // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;\n                if (value && !stat.alternative\n                    && (!next && in_lambda && multiple_if_returns\n                        || next instanceof AST_Return)) {\n                    CHANGED = true;\n                    stat = stat.clone();\n                    stat.alternative = next || make_node(AST_Return, stat, {\n                        value: null\n                    });\n                    statements[i] = stat.transform(compressor);\n                    if (next)\n                        statements.splice(j, 1);\n                    continue;\n                }\n                //---\n                // if (a) return b; if (c) return d; e; ==> return a ? b : c ? d : void e;\n                //\n                // if sequences is not enabled, this can lead to an endless loop (issue #866).\n                // however, with sequences on this helps producing slightly better output for\n                // the example code.\n                var prev = statements[prev_index(i)];\n                if (compressor.option(\"sequences\") && in_lambda && !stat.alternative\n                    && prev instanceof AST_If && prev.body instanceof AST_Return\n                    && next_index(j) == statements.length && next instanceof AST_SimpleStatement) {\n                    CHANGED = true;\n                    stat = stat.clone();\n                    stat.alternative = make_node(AST_BlockStatement, next, {\n                        body: [\n                            next,\n                            make_node(AST_Return, next, {\n                                value: null\n                            })\n                        ]\n                    });\n                    statements[i] = stat.transform(compressor);\n                    statements.splice(j, 1);\n                    continue;\n                }\n            }\n        }\n\n        function has_multiple_if_returns(statements) {\n            var n = 0;\n            for (var i = statements.length; --i >= 0;) {\n                var stat = statements[i];\n                if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                    if (++n > 1)\n                        return true;\n                }\n            }\n            return false;\n        }\n\n        function is_return_void(value) {\n            return !value || value instanceof AST_UnaryPrefix && value.operator == \"void\";\n        }\n\n        function can_merge_flow(ab) {\n            if (!ab)\n                return false;\n            for (var j = i + 1, len = statements.length; j < len; j++) {\n                var stat = statements[j];\n                if (stat instanceof AST_Const || stat instanceof AST_Let)\n                    return false;\n            }\n            var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;\n            return ab instanceof AST_Return && in_lambda && is_return_void(ab.value)\n                || ab instanceof AST_Continue && self === loop_body(lct)\n                || ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct;\n        }\n\n        function extract_functions() {\n            var tail = statements.slice(i + 1);\n            statements.length = i + 1;\n            return tail.filter(function (stat) {\n                if (stat instanceof AST_Defun) {\n                    statements.push(stat);\n                    return false;\n                }\n                return true;\n            });\n        }\n\n        function as_statement_array_with_return(node, ab) {\n            var body = as_statement_array(node).slice(0, -1);\n            if (ab.value) {\n                body.push(make_node(AST_SimpleStatement, ab.value, {\n                    body: ab.value.expression\n                }));\n            }\n            return body;\n        }\n\n        function next_index(i) {\n            for (var j = i + 1, len = statements.length; j < len; j++) {\n                var stat = statements[j];\n                if (!(stat instanceof AST_Var && declarations_only(stat))) {\n                    break;\n                }\n            }\n            return j;\n        }\n\n        function prev_index(i) {\n            for (var j = i; --j >= 0;) {\n                var stat = statements[j];\n                if (!(stat instanceof AST_Var && declarations_only(stat))) {\n                    break;\n                }\n            }\n            return j;\n        }\n    }\n\n    function eliminate_dead_code(statements, compressor) {\n        var has_quit;\n        var self = compressor.self();\n        for (var i = 0, n = 0, len = statements.length; i < len; i++) {\n            var stat = statements[i];\n            if (stat instanceof AST_LoopControl) {\n                var lct = compressor.loopcontrol_target(stat);\n                if (stat instanceof AST_Break\n                    && !(lct instanceof AST_IterationStatement)\n                    && loop_body(lct) === self\n                    || stat instanceof AST_Continue\n                    && loop_body(lct) === self) {\n                    if (stat.label) {\n                        remove(stat.label.thedef.references, stat);\n                    }\n                } else {\n                    statements[n++] = stat;\n                }\n            } else {\n                statements[n++] = stat;\n            }\n            if (aborts(stat)) {\n                has_quit = statements.slice(i + 1);\n                break;\n            }\n        }\n        statements.length = n;\n        CHANGED = n != len;\n        if (has_quit)\n            has_quit.forEach(function (stat) {\n                trim_unreachable_code(compressor, stat, statements);\n            });\n    }\n\n    function declarations_only(node) {\n        return node.definitions.every((var_def) => !var_def.value);\n    }\n\n    function sequencesize(statements, compressor) {\n        if (statements.length < 2)\n            return;\n        var seq = [], n = 0;\n        function push_seq() {\n            if (!seq.length)\n                return;\n            var body = make_sequence(seq[0], seq);\n            statements[n++] = make_node(AST_SimpleStatement, body, { body: body });\n            seq = [];\n        }\n        for (var i = 0, len = statements.length; i < len; i++) {\n            var stat = statements[i];\n            if (stat instanceof AST_SimpleStatement) {\n                if (seq.length >= compressor.sequences_limit)\n                    push_seq();\n                var body = stat.body;\n                if (seq.length > 0)\n                    body = body.drop_side_effect_free(compressor);\n                if (body)\n                    merge_sequence(seq, body);\n            } else if (stat instanceof AST_Definitions && declarations_only(stat)\n                || stat instanceof AST_Defun) {\n                statements[n++] = stat;\n            } else {\n                push_seq();\n                statements[n++] = stat;\n            }\n        }\n        push_seq();\n        statements.length = n;\n        if (n != len)\n            CHANGED = true;\n    }\n\n    function to_simple_statement(block, decls) {\n        if (!(block instanceof AST_BlockStatement))\n            return block;\n        var stat = null;\n        for (var i = 0, len = block.body.length; i < len; i++) {\n            var line = block.body[i];\n            if (line instanceof AST_Var && declarations_only(line)) {\n                decls.push(line);\n            } else if (stat || line instanceof AST_Const || line instanceof AST_Let) {\n                return false;\n            } else {\n                stat = line;\n            }\n        }\n        return stat;\n    }\n\n    function sequencesize_2(statements, compressor) {\n        function cons_seq(right) {\n            n--;\n            CHANGED = true;\n            var left = prev.body;\n            return make_sequence(left, [left, right]).transform(compressor);\n        }\n        var n = 0, prev;\n        for (var i = 0; i < statements.length; i++) {\n            var stat = statements[i];\n            if (prev) {\n                if (stat instanceof AST_Exit) {\n                    stat.value = cons_seq(stat.value || make_node(AST_Undefined, stat).transform(compressor));\n                } else if (stat instanceof AST_For) {\n                    if (!(stat.init instanceof AST_Definitions)) {\n                        const abort = walk(prev.body, node => {\n                            if (node instanceof AST_Scope)\n                                return true;\n                            if (node instanceof AST_Binary\n                                && node.operator === \"in\") {\n                                return walk_abort;\n                            }\n                        });\n                        if (!abort) {\n                            if (stat.init)\n                                stat.init = cons_seq(stat.init);\n                            else {\n                                stat.init = prev.body;\n                                n--;\n                                CHANGED = true;\n                            }\n                        }\n                    }\n                } else if (stat instanceof AST_ForIn) {\n                    if (!(stat.init instanceof AST_Const) && !(stat.init instanceof AST_Let)) {\n                        stat.object = cons_seq(stat.object);\n                    }\n                } else if (stat instanceof AST_If) {\n                    stat.condition = cons_seq(stat.condition);\n                } else if (stat instanceof AST_Switch) {\n                    stat.expression = cons_seq(stat.expression);\n                } else if (stat instanceof AST_With) {\n                    stat.expression = cons_seq(stat.expression);\n                }\n            }\n            if (compressor.option(\"conditionals\") && stat instanceof AST_If) {\n                var decls = [];\n                var body = to_simple_statement(stat.body, decls);\n                var alt = to_simple_statement(stat.alternative, decls);\n                if (body !== false && alt !== false && decls.length > 0) {\n                    var len = decls.length;\n                    decls.push(make_node(AST_If, stat, {\n                        condition: stat.condition,\n                        body: body || make_node(AST_EmptyStatement, stat.body),\n                        alternative: alt\n                    }));\n                    decls.unshift(n, 1);\n                    [].splice.apply(statements, decls);\n                    i += len;\n                    n += len + 1;\n                    prev = null;\n                    CHANGED = true;\n                    continue;\n                }\n            }\n            statements[n++] = stat;\n            prev = stat instanceof AST_SimpleStatement ? stat : null;\n        }\n        statements.length = n;\n    }\n\n    function join_object_assignments(defn, body) {\n        if (!(defn instanceof AST_Definitions))\n            return;\n        var def = defn.definitions[defn.definitions.length - 1];\n        if (!(def.value instanceof AST_Object))\n            return;\n        var exprs;\n        if (body instanceof AST_Assign && !body.logical) {\n            exprs = [body];\n        } else if (body instanceof AST_Sequence) {\n            exprs = body.expressions.slice();\n        }\n        if (!exprs)\n            return;\n        var trimmed = false;\n        do {\n            var node = exprs[0];\n            if (!(node instanceof AST_Assign))\n                break;\n            if (node.operator != \"=\")\n                break;\n            if (!(node.left instanceof AST_PropAccess))\n                break;\n            var sym = node.left.expression;\n            if (!(sym instanceof AST_SymbolRef))\n                break;\n            if (def.name.name != sym.name)\n                break;\n            if (!node.right.is_constant_expression(nearest_scope))\n                break;\n            var prop = node.left.property;\n            if (prop instanceof AST_Node) {\n                prop = prop.evaluate(compressor);\n            }\n            if (prop instanceof AST_Node)\n                break;\n            prop = \"\" + prop;\n            var diff = compressor.option(\"ecma\") < 2015\n                && compressor.has_directive(\"use strict\") ? function (node) {\n                    return node.key != prop && (node.key && node.key.name != prop);\n                } : function (node) {\n                    return node.key && node.key.name != prop;\n                };\n            if (!def.value.properties.every(diff))\n                break;\n            var p = def.value.properties.filter(function (p) { return p.key === prop; })[0];\n            if (!p) {\n                def.value.properties.push(make_node(AST_ObjectKeyVal, node, {\n                    key: prop,\n                    value: node.right\n                }));\n            } else {\n                p.value = new AST_Sequence({\n                    start: p.start,\n                    expressions: [p.value.clone(), node.right.clone()],\n                    end: p.end\n                });\n            }\n            exprs.shift();\n            trimmed = true;\n        } while (exprs.length);\n        return trimmed && exprs;\n    }\n\n    function join_consecutive_vars(statements) {\n        var defs;\n        for (var i = 0, j = -1, len = statements.length; i < len; i++) {\n            var stat = statements[i];\n            var prev = statements[j];\n            if (stat instanceof AST_Definitions) {\n                if (prev && prev.TYPE == stat.TYPE) {\n                    prev.definitions = prev.definitions.concat(stat.definitions);\n                    CHANGED = true;\n                } else if (defs && defs.TYPE == stat.TYPE && declarations_only(stat)) {\n                    defs.definitions = defs.definitions.concat(stat.definitions);\n                    CHANGED = true;\n                } else {\n                    statements[++j] = stat;\n                    defs = stat;\n                }\n            } else if (stat instanceof AST_Exit) {\n                stat.value = extract_object_assignments(stat.value);\n            } else if (stat instanceof AST_For) {\n                var exprs = join_object_assignments(prev, stat.init);\n                if (exprs) {\n                    CHANGED = true;\n                    stat.init = exprs.length ? make_sequence(stat.init, exprs) : null;\n                    statements[++j] = stat;\n                } else if (\n                    prev instanceof AST_Var\n                    && (!stat.init || stat.init.TYPE == prev.TYPE)\n                ) {\n                    if (stat.init) {\n                        prev.definitions = prev.definitions.concat(stat.init.definitions);\n                    }\n                    stat.init = prev;\n                    statements[j] = stat;\n                    CHANGED = true;\n                } else if (\n                    defs instanceof AST_Var\n                    && stat.init instanceof AST_Var\n                    && declarations_only(stat.init)\n                ) {\n                    defs.definitions = defs.definitions.concat(stat.init.definitions);\n                    stat.init = null;\n                    statements[++j] = stat;\n                    CHANGED = true;\n                } else {\n                    statements[++j] = stat;\n                }\n            } else if (stat instanceof AST_ForIn) {\n                stat.object = extract_object_assignments(stat.object);\n            } else if (stat instanceof AST_If) {\n                stat.condition = extract_object_assignments(stat.condition);\n            } else if (stat instanceof AST_SimpleStatement) {\n                var exprs = join_object_assignments(prev, stat.body);\n                if (exprs) {\n                    CHANGED = true;\n                    if (!exprs.length)\n                        continue;\n                    stat.body = make_sequence(stat.body, exprs);\n                }\n                statements[++j] = stat;\n            } else if (stat instanceof AST_Switch) {\n                stat.expression = extract_object_assignments(stat.expression);\n            } else if (stat instanceof AST_With) {\n                stat.expression = extract_object_assignments(stat.expression);\n            } else {\n                statements[++j] = stat;\n            }\n        }\n        statements.length = j + 1;\n\n        function extract_object_assignments(value) {\n            statements[++j] = stat;\n            var exprs = join_object_assignments(prev, value);\n            if (exprs) {\n                CHANGED = true;\n                if (exprs.length) {\n                    return make_sequence(value, exprs);\n                } else if (value instanceof AST_Sequence) {\n                    return value.tail_node().left;\n                } else {\n                    return value.left;\n                }\n            }\n            return value;\n        }\n    }\n}\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Array,\n    AST_Assign,\n    AST_Block,\n    AST_Call,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Defun,\n    AST_Destructuring,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_Function,\n    AST_IterationStatement,\n    AST_Lambda,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectKeyVal,\n    AST_PropAccess,\n    AST_Return,\n    AST_Scope,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_SymbolDefun,\n    AST_SymbolFunarg,\n    AST_SymbolLambda,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_This,\n    AST_Toplevel,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n\n    walk,\n\n    _INLINE,\n    _NOINLINE,\n    _PURE\n} from \"../ast.js\";\nimport { make_node, has_annotation } from \"../utils/index.js\";\nimport \"../size.js\";\n\nimport \"./evaluate.js\";\nimport \"./drop-side-effect-free.js\";\nimport \"./reduce-vars.js\";\nimport {\n    SQUEEZED,\n    INLINED,\n    UNUSED,\n\n    has_flag,\n    set_flag,\n} from \"./compressor-flags.js\";\nimport {\n    make_sequence,\n    best_of,\n    make_node_from_constant,\n    identifier_atom,\n    is_empty,\n    is_func_expr,\n    is_iife_call,\n    is_reachable,\n    is_recursive_ref,\n    retain_top_func,\n} from \"./common.js\";\n\n/**\n * Module that contains the inlining logic.\n *\n * @module\n *\n * The stars of the show are `inline_into_symbolref` and `inline_into_call`.\n */\n\nfunction within_array_or_object_literal(compressor) {\n    var node, level = 0;\n    while (node = compressor.parent(level++)) {\n        if (node instanceof AST_Statement) return false;\n        if (node instanceof AST_Array\n            || node instanceof AST_ObjectKeyVal\n            || node instanceof AST_Object) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction scope_encloses_variables_in_this_scope(scope, pulled_scope) {\n    for (const enclosed of pulled_scope.enclosed) {\n        if (pulled_scope.variables.has(enclosed.name)) {\n            continue;\n        }\n        const looked_up = scope.find_variable(enclosed.name);\n        if (looked_up) {\n            if (looked_up === enclosed) continue;\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function inline_into_symbolref(self, compressor) {\n    const parent = compressor.parent();\n\n    const def = self.definition();\n    const nearest_scope = compressor.find_scope();\n    if (compressor.top_retain && def.global && compressor.top_retain(def)) {\n        def.fixed = false;\n        def.single_use = false;\n        return self;\n    }\n\n    let fixed = self.fixed_value();\n    let single_use = def.single_use\n        && !(parent instanceof AST_Call\n            && (parent.is_callee_pure(compressor))\n                || has_annotation(parent, _NOINLINE))\n        && !(parent instanceof AST_Export\n            && fixed instanceof AST_Lambda\n            && fixed.name);\n\n    if (single_use && fixed instanceof AST_Node) {\n        single_use =\n            !fixed.has_side_effects(compressor)\n            && !fixed.may_throw(compressor);\n    }\n\n    if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {\n        if (retain_top_func(fixed, compressor)) {\n            single_use = false;\n        } else if (def.scope !== self.scope\n            && (def.escaped == 1\n                || has_flag(fixed, INLINED)\n                || within_array_or_object_literal(compressor)\n                || !compressor.option(\"reduce_funcs\"))) {\n            single_use = false;\n        } else if (is_recursive_ref(compressor, def)) {\n            single_use = false;\n        } else if (def.scope !== self.scope || def.orig[0] instanceof AST_SymbolFunarg) {\n            single_use = fixed.is_constant_expression(self.scope);\n            if (single_use == \"f\") {\n                var scope = self.scope;\n                do {\n                    if (scope instanceof AST_Defun || is_func_expr(scope)) {\n                        set_flag(scope, INLINED);\n                    }\n                } while (scope = scope.parent_scope);\n            }\n        }\n    }\n\n    if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {\n        single_use =\n            def.scope === self.scope\n                && !scope_encloses_variables_in_this_scope(nearest_scope, fixed)\n            || parent instanceof AST_Call\n                && parent.expression === self\n                && !scope_encloses_variables_in_this_scope(nearest_scope, fixed)\n                && !(fixed.name && fixed.name.definition().recursive_refs > 0);\n    }\n\n    if (single_use && fixed) {\n        if (fixed instanceof AST_DefClass) {\n            set_flag(fixed, SQUEEZED);\n            fixed = make_node(AST_ClassExpression, fixed, fixed);\n        }\n        if (fixed instanceof AST_Defun) {\n            set_flag(fixed, SQUEEZED);\n            fixed = make_node(AST_Function, fixed, fixed);\n        }\n        if (def.recursive_refs > 0 && fixed.name instanceof AST_SymbolDefun) {\n            const defun_def = fixed.name.definition();\n            let lambda_def = fixed.variables.get(fixed.name.name);\n            let name = lambda_def && lambda_def.orig[0];\n            if (!(name instanceof AST_SymbolLambda)) {\n                name = make_node(AST_SymbolLambda, fixed.name, fixed.name);\n                name.scope = fixed;\n                fixed.name = name;\n                lambda_def = fixed.def_function(name);\n            }\n            walk(fixed, node => {\n                if (node instanceof AST_SymbolRef && node.definition() === defun_def) {\n                    node.thedef = lambda_def;\n                    lambda_def.references.push(node);\n                }\n            });\n        }\n        if (\n            (fixed instanceof AST_Lambda || fixed instanceof AST_Class)\n            && fixed.parent_scope !== nearest_scope\n        ) {\n            fixed = fixed.clone(true, compressor.get_toplevel());\n\n            nearest_scope.add_child_scope(fixed);\n        }\n        return fixed.optimize(compressor);\n    }\n\n    // multiple uses\n    if (fixed) {\n        let replace;\n\n        if (fixed instanceof AST_This) {\n            if (!(def.orig[0] instanceof AST_SymbolFunarg)\n                && def.references.every((ref) =>\n                    def.scope === ref.scope\n                )) {\n                replace = fixed;\n            }\n        } else {\n            var ev = fixed.evaluate(compressor);\n            if (\n                ev !== fixed\n                && (compressor.option(\"unsafe_regexp\") || !(ev instanceof RegExp))\n            ) {\n                replace = make_node_from_constant(ev, fixed);\n            }\n        }\n\n        if (replace) {\n            const name_length = self.size(compressor);\n            const replace_size = replace.size(compressor);\n\n            let overhead = 0;\n            if (compressor.option(\"unused\") && !compressor.exposed(def)) {\n                overhead =\n                    (name_length + 2 + replace_size) /\n                    (def.references.length - def.assignments);\n            }\n\n            if (replace_size <= name_length + overhead) {\n                return replace;\n            }\n        }\n    }\n\n    return self;\n}\n\nexport function inline_into_call(self, fn, compressor) {\n    var exp = self.expression;\n    var simple_args = self.args.every((arg) => !(arg instanceof AST_Expansion));\n\n    if (compressor.option(\"reduce_vars\")\n        && fn instanceof AST_SymbolRef\n        && !has_annotation(self, _NOINLINE)\n    ) {\n        const fixed = fn.fixed_value();\n        if (!retain_top_func(fixed, compressor)) {\n            fn = fixed;\n        }\n    }\n\n    var is_func = fn instanceof AST_Lambda;\n\n    var stat = is_func && fn.body[0];\n    var is_regular_func = is_func && !fn.is_generator && !fn.async;\n    var can_inline = is_regular_func && compressor.option(\"inline\") && !self.is_callee_pure(compressor);\n    if (can_inline && stat instanceof AST_Return) {\n        let returned = stat.value;\n        if (!returned || returned.is_constant_expression()) {\n            if (returned) {\n                returned = returned.clone(true);\n            } else {\n                returned = make_node(AST_Undefined, self);\n            }\n            const args = self.args.concat(returned);\n            return make_sequence(self, args).optimize(compressor);\n        }\n\n        // optimize identity function\n        if (\n            fn.argnames.length === 1\n            && (fn.argnames[0] instanceof AST_SymbolFunarg)\n            && self.args.length < 2\n            && !(self.args[0] instanceof AST_Expansion)\n            && returned instanceof AST_SymbolRef\n            && returned.name === fn.argnames[0].name\n        ) {\n            const replacement =\n                (self.args[0] || make_node(AST_Undefined)).optimize(compressor);\n\n            let parent;\n            if (\n                replacement instanceof AST_PropAccess\n                && (parent = compressor.parent()) instanceof AST_Call\n                && parent.expression === self\n            ) {\n                // identity function was being used to remove `this`, like in\n                //\n                // id(bag.no_this)(...)\n                //\n                // Replace with a larger but more effish (0, bag.no_this) wrapper.\n\n                return make_sequence(self, [\n                    make_node(AST_Number, self, { value: 0 }),\n                    replacement\n                ]);\n            }\n            // replace call with first argument or undefined if none passed\n            return replacement;\n        }\n    }\n\n    if (can_inline) {\n        var scope, in_loop, level = -1;\n        let def;\n        let returned_value;\n        let nearest_scope;\n        if (simple_args\n            && !fn.uses_arguments\n            && !(compressor.parent() instanceof AST_Class)\n            && !(fn.name && fn instanceof AST_Function)\n            && (returned_value = can_flatten_body(stat))\n            && (exp === fn\n                || has_annotation(self, _INLINE)\n                || compressor.option(\"unused\")\n                    && (def = exp.definition()).references.length == 1\n                    && !is_recursive_ref(compressor, def)\n                    && fn.is_constant_expression(exp.scope))\n            && !has_annotation(self, _PURE | _NOINLINE)\n            && !fn.contains_this()\n            && can_inject_symbols()\n            && (nearest_scope = compressor.find_scope())\n            && !scope_encloses_variables_in_this_scope(nearest_scope, fn)\n            && !(function in_default_assign() {\n                    // Due to the fact function parameters have their own scope\n                    // which can't use `var something` in the function body within,\n                    // we simply don't inline into DefaultAssign.\n                    let i = 0;\n                    let p;\n                    while ((p = compressor.parent(i++))) {\n                        if (p instanceof AST_DefaultAssign) return true;\n                        if (p instanceof AST_Block) break;\n                    }\n                    return false;\n                })()\n            && !(scope instanceof AST_Class)\n        ) {\n            set_flag(fn, SQUEEZED);\n            nearest_scope.add_child_scope(fn);\n            return make_sequence(self, flatten_fn(returned_value)).optimize(compressor);\n        }\n    }\n\n    if (can_inline && has_annotation(self, _INLINE)) {\n        set_flag(fn, SQUEEZED);\n        fn = make_node(fn.CTOR === AST_Defun ? AST_Function : fn.CTOR, fn, fn);\n        fn = fn.clone(true);\n        fn.figure_out_scope({}, {\n            parent_scope: compressor.find_scope(),\n            toplevel: compressor.get_toplevel()\n        });\n\n        return make_node(AST_Call, self, {\n            expression: fn,\n            args: self.args,\n        }).optimize(compressor);\n    }\n\n    const can_drop_this_call = is_regular_func && compressor.option(\"side_effects\") && fn.body.every(is_empty);\n    if (can_drop_this_call) {\n        var args = self.args.concat(make_node(AST_Undefined, self));\n        return make_sequence(self, args).optimize(compressor);\n    }\n\n    if (compressor.option(\"negate_iife\")\n        && compressor.parent() instanceof AST_SimpleStatement\n        && is_iife_call(self)) {\n        return self.negate(compressor, true);\n    }\n\n    var ev = self.evaluate(compressor);\n    if (ev !== self) {\n        ev = make_node_from_constant(ev, self).optimize(compressor);\n        return best_of(compressor, ev, self);\n    }\n\n    return self;\n\n    function return_value(stat) {\n        if (!stat) return make_node(AST_Undefined, self);\n        if (stat instanceof AST_Return) {\n            if (!stat.value) return make_node(AST_Undefined, self);\n            return stat.value.clone(true);\n        }\n        if (stat instanceof AST_SimpleStatement) {\n            return make_node(AST_UnaryPrefix, stat, {\n                operator: \"void\",\n                expression: stat.body.clone(true)\n            });\n        }\n    }\n\n    function can_flatten_body(stat) {\n        var body = fn.body;\n        var len = body.length;\n        if (compressor.option(\"inline\") < 3) {\n            return len == 1 && return_value(stat);\n        }\n        stat = null;\n        for (var i = 0; i < len; i++) {\n            var line = body[i];\n            if (line instanceof AST_Var) {\n                if (stat && !line.definitions.every((var_def) =>\n                    !var_def.value\n                )) {\n                    return false;\n                }\n            } else if (stat) {\n                return false;\n            } else if (!(line instanceof AST_EmptyStatement)) {\n                stat = line;\n            }\n        }\n        return return_value(stat);\n    }\n\n    function can_inject_args(block_scoped, safe_to_inject) {\n        for (var i = 0, len = fn.argnames.length; i < len; i++) {\n            var arg = fn.argnames[i];\n            if (arg instanceof AST_DefaultAssign) {\n                if (has_flag(arg.left, UNUSED)) continue;\n                return false;\n            }\n            if (arg instanceof AST_Destructuring) return false;\n            if (arg instanceof AST_Expansion) {\n                if (has_flag(arg.expression, UNUSED)) continue;\n                return false;\n            }\n            if (has_flag(arg, UNUSED)) continue;\n            if (!safe_to_inject\n                || block_scoped.has(arg.name)\n                || identifier_atom.has(arg.name)\n                || scope.conflicting_def(arg.name)) {\n                return false;\n            }\n            if (in_loop) in_loop.push(arg.definition());\n        }\n        return true;\n    }\n\n    function can_inject_vars(block_scoped, safe_to_inject) {\n        var len = fn.body.length;\n        for (var i = 0; i < len; i++) {\n            var stat = fn.body[i];\n            if (!(stat instanceof AST_Var)) continue;\n            if (!safe_to_inject) return false;\n            for (var j = stat.definitions.length; --j >= 0;) {\n                var name = stat.definitions[j].name;\n                if (name instanceof AST_Destructuring\n                    || block_scoped.has(name.name)\n                    || identifier_atom.has(name.name)\n                    || scope.conflicting_def(name.name)) {\n                    return false;\n                }\n                if (in_loop) in_loop.push(name.definition());\n            }\n        }\n        return true;\n    }\n\n    function can_inject_symbols() {\n        var block_scoped = new Set();\n        do {\n            scope = compressor.parent(++level);\n            if (scope.is_block_scope() && scope.block_scope) {\n                // TODO this is sometimes undefined during compression.\n                // But it should always have a value!\n                scope.block_scope.variables.forEach(function (variable) {\n                    block_scoped.add(variable.name);\n                });\n            }\n            if (scope instanceof AST_Catch) {\n                // TODO can we delete? AST_Catch is a block scope.\n                if (scope.argname) {\n                    block_scoped.add(scope.argname.name);\n                }\n            } else if (scope instanceof AST_IterationStatement) {\n                in_loop = [];\n            } else if (scope instanceof AST_SymbolRef) {\n                if (scope.fixed_value() instanceof AST_Scope) return false;\n            }\n        } while (!(scope instanceof AST_Scope));\n\n        var safe_to_inject = !(scope instanceof AST_Toplevel) || compressor.toplevel.vars;\n        var inline = compressor.option(\"inline\");\n        if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject)) return false;\n        if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject)) return false;\n        return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);\n    }\n\n    function append_var(decls, expressions, name, value) {\n        var def = name.definition();\n\n        // Name already exists, only when a function argument had the same name\n        const already_appended = scope.variables.has(name.name);\n        if (!already_appended) {\n            scope.variables.set(name.name, def);\n            scope.enclosed.push(def);\n            decls.push(make_node(AST_VarDef, name, {\n                name: name,\n                value: null\n            }));\n        }\n\n        var sym = make_node(AST_SymbolRef, name, name);\n        def.references.push(sym);\n        if (value) expressions.push(make_node(AST_Assign, self, {\n            operator: \"=\",\n            logical: false,\n            left: sym,\n            right: value.clone()\n        }));\n    }\n\n    function flatten_args(decls, expressions) {\n        var len = fn.argnames.length;\n        for (var i = self.args.length; --i >= len;) {\n            expressions.push(self.args[i]);\n        }\n        for (i = len; --i >= 0;) {\n            var name = fn.argnames[i];\n            var value = self.args[i];\n            if (has_flag(name, UNUSED) || !name.name || scope.conflicting_def(name.name)) {\n                if (value) expressions.push(value);\n            } else {\n                var symbol = make_node(AST_SymbolVar, name, name);\n                name.definition().orig.push(symbol);\n                if (!value && in_loop) value = make_node(AST_Undefined, self);\n                append_var(decls, expressions, symbol, value);\n            }\n        }\n        decls.reverse();\n        expressions.reverse();\n    }\n\n    function flatten_vars(decls, expressions) {\n        var pos = expressions.length;\n        for (var i = 0, lines = fn.body.length; i < lines; i++) {\n            var stat = fn.body[i];\n            if (!(stat instanceof AST_Var)) continue;\n            for (var j = 0, defs = stat.definitions.length; j < defs; j++) {\n                var var_def = stat.definitions[j];\n                var name = var_def.name;\n                append_var(decls, expressions, name, var_def.value);\n                if (in_loop && fn.argnames.every((argname) =>\n                    argname.name != name.name\n                )) {\n                    var def = fn.variables.get(name.name);\n                    var sym = make_node(AST_SymbolRef, name, name);\n                    def.references.push(sym);\n                    expressions.splice(pos++, 0, make_node(AST_Assign, var_def, {\n                        operator: \"=\",\n                        logical: false,\n                        left: sym,\n                        right: make_node(AST_Undefined, name)\n                    }));\n                }\n            }\n        }\n    }\n\n    function flatten_fn(returned_value) {\n        var decls = [];\n        var expressions = [];\n        flatten_args(decls, expressions);\n        flatten_vars(decls, expressions);\n        expressions.push(returned_value);\n\n        if (decls.length) {\n            const i = scope.body.indexOf(compressor.parent(level - 1)) + 1;\n            scope.body.splice(i, 0, make_node(AST_Var, fn, {\n                definitions: decls\n            }));\n        }\n\n        return expressions.map(exp => exp.clone(true));\n    }\n}\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassProperty,\n    AST_ClassStaticBlock,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Infinity,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_NaN,\n    AST_New,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_Sub,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolClassProperty,\n    AST_SymbolDeclaration,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_TemplateString,\n    AST_This,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n\n    TreeTransformer,\n    TreeWalker,\n    walk,\n    walk_abort,\n\n    _INLINE,\n    _NOINLINE,\n    _PURE\n} from \"../ast.js\";\nimport {\n    defaults,\n    HOP,\n    make_node,\n    makePredicate,\n    MAP,\n    remove,\n    return_false,\n    return_true,\n    regexp_source_fix,\n    has_annotation,\n    regexp_is_safe,\n} from \"../utils/index.js\";\nimport { first_in_statement } from \"../utils/first_in_statement.js\";\nimport { equivalent_to } from \"../equivalent-to.js\";\nimport {\n    is_basic_identifier_string,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n} from \"../parse.js\";\nimport { OutputStream } from \"../output.js\";\nimport { base54, format_mangler_options } from \"../scope.js\";\nimport \"../size.js\";\n\nimport \"./evaluate.js\";\nimport \"./drop-side-effect-free.js\";\nimport \"./drop-unused.js\";\nimport \"./reduce-vars.js\";\nimport {\n    is_undeclared_ref,\n    lazy_op,\n    is_nullish,\n    is_undefined,\n    is_lhs,\n    aborts,\n} from \"./inference.js\";\nimport {\n    SQUEEZED,\n    OPTIMIZED,\n    CLEAR_BETWEEN_PASSES,\n    TOP,\n    UNDEFINED,\n    UNUSED,\n    TRUTHY,\n    FALSY,\n\n    has_flag,\n    set_flag,\n    clear_flag,\n} from \"./compressor-flags.js\";\nimport {\n    make_sequence,\n    best_of,\n    best_of_expression,\n    make_node_from_constant,\n    merge_sequence,\n    get_simple_key,\n    has_break_or_continue,\n    maintain_this_binding,\n    is_empty,\n    is_identifier_atom,\n    is_reachable,\n    can_be_evicted_from_block,\n    as_statement_array,\n    retain_top_func,\n    is_func_expr,\n} from \"./common.js\";\nimport { tighten_body, trim_unreachable_code } from \"./tighten-body.js\";\nimport { inline_into_symbolref, inline_into_call } from \"./inline.js\";\n\nclass Compressor extends TreeWalker {\n    constructor(options, { false_by_default = false, mangle_options = false }) {\n        super();\n        if (options.defaults !== undefined && !options.defaults) false_by_default = true;\n        this.options = defaults(options, {\n            arguments     : false,\n            arrows        : !false_by_default,\n            booleans      : !false_by_default,\n            booleans_as_integers : false,\n            collapse_vars : !false_by_default,\n            comparisons   : !false_by_default,\n            computed_props: !false_by_default,\n            conditionals  : !false_by_default,\n            dead_code     : !false_by_default,\n            defaults      : true,\n            directives    : !false_by_default,\n            drop_console  : false,\n            drop_debugger : !false_by_default,\n            ecma          : 5,\n            evaluate      : !false_by_default,\n            expression    : false,\n            global_defs   : false,\n            hoist_funs    : false,\n            hoist_props   : !false_by_default,\n            hoist_vars    : false,\n            ie8           : false,\n            if_return     : !false_by_default,\n            inline        : !false_by_default,\n            join_vars     : !false_by_default,\n            keep_classnames: false,\n            keep_fargs    : true,\n            keep_fnames   : false,\n            keep_infinity : false,\n            loops         : !false_by_default,\n            module        : false,\n            negate_iife   : !false_by_default,\n            passes        : 1,\n            properties    : !false_by_default,\n            pure_getters  : !false_by_default && \"strict\",\n            pure_funcs    : null,\n            reduce_funcs  : !false_by_default,\n            reduce_vars   : !false_by_default,\n            sequences     : !false_by_default,\n            side_effects  : !false_by_default,\n            switches      : !false_by_default,\n            top_retain    : null,\n            toplevel      : !!(options && options[\"top_retain\"]),\n            typeofs       : !false_by_default,\n            unsafe        : false,\n            unsafe_arrows : false,\n            unsafe_comps  : false,\n            unsafe_Function: false,\n            unsafe_math   : false,\n            unsafe_symbols: false,\n            unsafe_methods: false,\n            unsafe_proto  : false,\n            unsafe_regexp : false,\n            unsafe_undefined: false,\n            unused        : !false_by_default,\n            warnings      : false  // legacy\n        }, true);\n        var global_defs = this.options[\"global_defs\"];\n        if (typeof global_defs == \"object\") for (var key in global_defs) {\n            if (key[0] === \"@\" && HOP(global_defs, key)) {\n                global_defs[key.slice(1)] = parse(global_defs[key], {\n                    expression: true\n                });\n            }\n        }\n        if (this.options[\"inline\"] === true) this.options[\"inline\"] = 3;\n        var pure_funcs = this.options[\"pure_funcs\"];\n        if (typeof pure_funcs == \"function\") {\n            this.pure_funcs = pure_funcs;\n        } else {\n            this.pure_funcs = pure_funcs ? function(node) {\n                return !pure_funcs.includes(node.expression.print_to_string());\n            } : return_true;\n        }\n        var top_retain = this.options[\"top_retain\"];\n        if (top_retain instanceof RegExp) {\n            this.top_retain = function(def) {\n                return top_retain.test(def.name);\n            };\n        } else if (typeof top_retain == \"function\") {\n            this.top_retain = top_retain;\n        } else if (top_retain) {\n            if (typeof top_retain == \"string\") {\n                top_retain = top_retain.split(/,/);\n            }\n            this.top_retain = function(def) {\n                return top_retain.includes(def.name);\n            };\n        }\n        if (this.options[\"module\"]) {\n            this.directives[\"use strict\"] = true;\n            this.options[\"toplevel\"] = true;\n        }\n        var toplevel = this.options[\"toplevel\"];\n        this.toplevel = typeof toplevel == \"string\" ? {\n            funcs: /funcs/.test(toplevel),\n            vars: /vars/.test(toplevel)\n        } : {\n            funcs: toplevel,\n            vars: toplevel\n        };\n        var sequences = this.options[\"sequences\"];\n        this.sequences_limit = sequences == 1 ? 800 : sequences | 0;\n        this.evaluated_regexps = new Map();\n        this._toplevel = undefined;\n        this.mangle_options = mangle_options\n            ? format_mangler_options(mangle_options)\n            : mangle_options;\n    }\n\n    option(key) {\n        return this.options[key];\n    }\n\n    exposed(def) {\n        if (def.export) return true;\n        if (def.global) for (var i = 0, len = def.orig.length; i < len; i++)\n            if (!this.toplevel[def.orig[i] instanceof AST_SymbolDefun ? \"funcs\" : \"vars\"])\n                return true;\n        return false;\n    }\n\n    in_boolean_context() {\n        if (!this.option(\"booleans\")) return false;\n        var self = this.self();\n        for (var i = 0, p; p = this.parent(i); i++) {\n            if (p instanceof AST_SimpleStatement\n                || p instanceof AST_Conditional && p.condition === self\n                || p instanceof AST_DWLoop && p.condition === self\n                || p instanceof AST_For && p.condition === self\n                || p instanceof AST_If && p.condition === self\n                || p instanceof AST_UnaryPrefix && p.operator == \"!\" && p.expression === self) {\n                return true;\n            }\n            if (\n                p instanceof AST_Binary\n                    && (\n                        p.operator == \"&&\"\n                        || p.operator == \"||\"\n                        || p.operator == \"??\"\n                    )\n                || p instanceof AST_Conditional\n                || p.tail_node() === self\n            ) {\n                self = p;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    get_toplevel() {\n        return this._toplevel;\n    }\n\n    compress(toplevel) {\n        toplevel = toplevel.resolve_defines(this);\n        this._toplevel = toplevel;\n        if (this.option(\"expression\")) {\n            this._toplevel.process_expression(true);\n        }\n        var passes = +this.options.passes || 1;\n        var min_count = 1 / 0;\n        var stopping = false;\n        var nth_identifier = this.mangle_options && this.mangle_options.nth_identifier || base54;\n        var mangle = { ie8: this.option(\"ie8\"), nth_identifier: nth_identifier };\n        for (var pass = 0; pass < passes; pass++) {\n            this._toplevel.figure_out_scope(mangle);\n            if (pass === 0 && this.option(\"drop_console\")) {\n                // must be run before reduce_vars and compress pass\n                this._toplevel = this._toplevel.drop_console();\n            }\n            if (pass > 0 || this.option(\"reduce_vars\")) {\n                this._toplevel.reset_opt_flags(this);\n            }\n            this._toplevel = this._toplevel.transform(this);\n            if (passes > 1) {\n                let count = 0;\n                walk(this._toplevel, () => { count++; });\n                if (count < min_count) {\n                    min_count = count;\n                    stopping = false;\n                } else if (stopping) {\n                    break;\n                } else {\n                    stopping = true;\n                }\n            }\n        }\n        if (this.option(\"expression\")) {\n            this._toplevel.process_expression(false);\n        }\n        toplevel = this._toplevel;\n        this._toplevel = undefined;\n        return toplevel;\n    }\n\n    before(node, descend) {\n        if (has_flag(node, SQUEEZED)) return node;\n        var was_scope = false;\n        if (node instanceof AST_Scope) {\n            node = node.hoist_properties(this);\n            node = node.hoist_declarations(this);\n            was_scope = true;\n        }\n        // Before https://github.com/mishoo/UglifyJS2/pull/1602 AST_Node.optimize()\n        // would call AST_Node.transform() if a different instance of AST_Node is\n        // produced after def_optimize().\n        // This corrupts TreeWalker.stack, which cause AST look-ups to malfunction.\n        // Migrate and defer all children's AST_Node.transform() to below, which\n        // will now happen after this parent AST_Node has been properly substituted\n        // thus gives a consistent AST snapshot.\n        descend(node, this);\n        // Existing code relies on how AST_Node.optimize() worked, and omitting the\n        // following replacement call would result in degraded efficiency of both\n        // output and performance.\n        descend(node, this);\n        var opt = node.optimize(this);\n        if (was_scope && opt instanceof AST_Scope) {\n            opt.drop_unused(this);\n            descend(opt, this);\n        }\n        if (opt === node) set_flag(opt, SQUEEZED);\n        return opt;\n    }\n}\n\nfunction def_optimize(node, optimizer) {\n    node.DEFMETHOD(\"optimize\", function(compressor) {\n        var self = this;\n        if (has_flag(self, OPTIMIZED)) return self;\n        if (compressor.has_directive(\"use asm\")) return self;\n        var opt = optimizer(self, compressor);\n        set_flag(opt, OPTIMIZED);\n        return opt;\n    });\n}\n\ndef_optimize(AST_Node, function(self) {\n    return self;\n});\n\nAST_Toplevel.DEFMETHOD(\"drop_console\", function() {\n    return this.transform(new TreeTransformer(function(self) {\n        if (self.TYPE == \"Call\") {\n            var exp = self.expression;\n            if (exp instanceof AST_PropAccess) {\n                var name = exp.expression;\n                while (name.expression) {\n                    name = name.expression;\n                }\n                if (is_undeclared_ref(name) && name.name == \"console\") {\n                    return make_node(AST_Undefined, self);\n                }\n            }\n        }\n    }));\n});\n\nAST_Node.DEFMETHOD(\"equivalent_to\", function(node) {\n    return equivalent_to(this, node);\n});\n\nAST_Scope.DEFMETHOD(\"process_expression\", function(insert, compressor) {\n    var self = this;\n    var tt = new TreeTransformer(function(node) {\n        if (insert && node instanceof AST_SimpleStatement) {\n            return make_node(AST_Return, node, {\n                value: node.body\n            });\n        }\n        if (!insert && node instanceof AST_Return) {\n            if (compressor) {\n                var value = node.value && node.value.drop_side_effect_free(compressor, true);\n                return value\n                    ? make_node(AST_SimpleStatement, node, { body: value })\n                    : make_node(AST_EmptyStatement, node);\n            }\n            return make_node(AST_SimpleStatement, node, {\n                body: node.value || make_node(AST_UnaryPrefix, node, {\n                    operator: \"void\",\n                    expression: make_node(AST_Number, node, {\n                        value: 0\n                    })\n                })\n            });\n        }\n        if (node instanceof AST_Class || node instanceof AST_Lambda && node !== self) {\n            return node;\n        }\n        if (node instanceof AST_Block) {\n            var index = node.body.length - 1;\n            if (index >= 0) {\n                node.body[index] = node.body[index].transform(tt);\n            }\n        } else if (node instanceof AST_If) {\n            node.body = node.body.transform(tt);\n            if (node.alternative) {\n                node.alternative = node.alternative.transform(tt);\n            }\n        } else if (node instanceof AST_With) {\n            node.body = node.body.transform(tt);\n        }\n        return node;\n    });\n    self.transform(tt);\n});\n\nAST_Toplevel.DEFMETHOD(\"reset_opt_flags\", function(compressor) {\n    const self = this;\n    const reduce_vars = compressor.option(\"reduce_vars\");\n\n    const preparation = new TreeWalker(function(node, descend) {\n        clear_flag(node, CLEAR_BETWEEN_PASSES);\n        if (reduce_vars) {\n            if (compressor.top_retain\n                && node instanceof AST_Defun  // Only functions are retained\n                && preparation.parent() === self\n            ) {\n                set_flag(node, TOP);\n            }\n            return node.reduce_vars(preparation, descend, compressor);\n        }\n    }, { walk_defun_first: true });\n    // Stack of look-up tables to keep track of whether a `SymbolDef` has been\n    // properly assigned before use:\n    // - `push()` & `pop()` when visiting conditional branches\n    preparation.safe_ids = Object.create(null);\n    preparation.in_loop = null;\n    preparation.loop_ids = new Map();\n    preparation.defs_to_safe_ids = new Map();\n    self.walk(preparation);\n});\n\nAST_Symbol.DEFMETHOD(\"fixed_value\", function() {\n    var fixed = this.thedef.fixed;\n    if (!fixed || fixed instanceof AST_Node) return fixed;\n    return fixed();\n});\n\nAST_SymbolRef.DEFMETHOD(\"is_immutable\", function() {\n    var orig = this.definition().orig;\n    return orig.length == 1 && orig[0] instanceof AST_SymbolLambda;\n});\n\nfunction find_variable(compressor, name) {\n    var scope, i = 0;\n    while (scope = compressor.parent(i++)) {\n        if (scope instanceof AST_Scope) break;\n        if (scope instanceof AST_Catch && scope.argname) {\n            scope = scope.argname.definition().scope;\n            break;\n        }\n    }\n    return scope.find_variable(name);\n}\n\nvar global_names = makePredicate(\"Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Math Number parseFloat parseInt RangeError ReferenceError RegExp Object setInterval setTimeout String SyntaxError TypeError unescape URIError\");\nAST_SymbolRef.DEFMETHOD(\"is_declared\", function(compressor) {\n    return !this.definition().undeclared\n        || compressor.option(\"unsafe\") && global_names.has(this.name);\n});\n\n/* -----[ optimizers ]----- */\n\nvar directives = new Set([\"use asm\", \"use strict\"]);\ndef_optimize(AST_Directive, function(self, compressor) {\n    if (compressor.option(\"directives\")\n        && (!directives.has(self.value) || compressor.has_directive(self.value) !== self)) {\n        return make_node(AST_EmptyStatement, self);\n    }\n    return self;\n});\n\ndef_optimize(AST_Debugger, function(self, compressor) {\n    if (compressor.option(\"drop_debugger\"))\n        return make_node(AST_EmptyStatement, self);\n    return self;\n});\n\ndef_optimize(AST_LabeledStatement, function(self, compressor) {\n    if (self.body instanceof AST_Break\n        && compressor.loopcontrol_target(self.body) === self.body) {\n        return make_node(AST_EmptyStatement, self);\n    }\n    return self.label.references.length == 0 ? self.body : self;\n});\n\ndef_optimize(AST_Block, function(self, compressor) {\n    tighten_body(self.body, compressor);\n    return self;\n});\n\nfunction can_be_extracted_from_if_block(node) {\n    return !(\n        node instanceof AST_Const\n        || node instanceof AST_Let\n        || node instanceof AST_Class\n    );\n}\n\ndef_optimize(AST_BlockStatement, function(self, compressor) {\n    tighten_body(self.body, compressor);\n    switch (self.body.length) {\n      case 1:\n        if (!compressor.has_directive(\"use strict\")\n            && compressor.parent() instanceof AST_If\n            && can_be_extracted_from_if_block(self.body[0])\n            || can_be_evicted_from_block(self.body[0])) {\n            return self.body[0];\n        }\n        break;\n      case 0: return make_node(AST_EmptyStatement, self);\n    }\n    return self;\n});\n\nfunction opt_AST_Lambda(self, compressor) {\n    tighten_body(self.body, compressor);\n    if (compressor.option(\"side_effects\")\n        && self.body.length == 1\n        && self.body[0] === compressor.has_directive(\"use strict\")) {\n        self.body.length = 0;\n    }\n    return self;\n}\ndef_optimize(AST_Lambda, opt_AST_Lambda);\n\nAST_Scope.DEFMETHOD(\"hoist_declarations\", function(compressor) {\n    var self = this;\n    if (compressor.has_directive(\"use asm\")) return self;\n    // Hoisting makes no sense in an arrow func\n    if (!Array.isArray(self.body)) return self;\n\n    var hoist_funs = compressor.option(\"hoist_funs\");\n    var hoist_vars = compressor.option(\"hoist_vars\");\n\n    if (hoist_funs || hoist_vars) {\n        var dirs = [];\n        var hoisted = [];\n        var vars = new Map(), vars_found = 0, var_decl = 0;\n        // let's count var_decl first, we seem to waste a lot of\n        // space if we hoist `var` when there's only one.\n        walk(self, node => {\n            if (node instanceof AST_Scope && node !== self)\n                return true;\n            if (node instanceof AST_Var) {\n                ++var_decl;\n                return true;\n            }\n        });\n        hoist_vars = hoist_vars && var_decl > 1;\n        var tt = new TreeTransformer(\n            function before(node) {\n                if (node !== self) {\n                    if (node instanceof AST_Directive) {\n                        dirs.push(node);\n                        return make_node(AST_EmptyStatement, node);\n                    }\n                    if (hoist_funs && node instanceof AST_Defun\n                        && !(tt.parent() instanceof AST_Export)\n                        && tt.parent() === self) {\n                        hoisted.push(node);\n                        return make_node(AST_EmptyStatement, node);\n                    }\n                    if (\n                        hoist_vars\n                        && node instanceof AST_Var\n                        && !node.definitions.some(def => def.name instanceof AST_Destructuring)\n                    ) {\n                        node.definitions.forEach(function(def) {\n                            vars.set(def.name.name, def);\n                            ++vars_found;\n                        });\n                        var seq = node.to_assignments(compressor);\n                        var p = tt.parent();\n                        if (p instanceof AST_ForIn && p.init === node) {\n                            if (seq == null) {\n                                var def = node.definitions[0].name;\n                                return make_node(AST_SymbolRef, def, def);\n                            }\n                            return seq;\n                        }\n                        if (p instanceof AST_For && p.init === node) {\n                            return seq;\n                        }\n                        if (!seq) return make_node(AST_EmptyStatement, node);\n                        return make_node(AST_SimpleStatement, node, {\n                            body: seq\n                        });\n                    }\n                    if (node instanceof AST_Scope)\n                        return node; // to avoid descending in nested scopes\n                }\n            }\n        );\n        self = self.transform(tt);\n        if (vars_found > 0) {\n            // collect only vars which don't show up in self's arguments list\n            var defs = [];\n            const is_lambda = self instanceof AST_Lambda;\n            const args_as_names = is_lambda ? self.args_as_names() : null;\n            vars.forEach((def, name) => {\n                if (is_lambda && args_as_names.some((x) => x.name === def.name.name)) {\n                    vars.delete(name);\n                } else {\n                    def = def.clone();\n                    def.value = null;\n                    defs.push(def);\n                    vars.set(name, def);\n                }\n            });\n            if (defs.length > 0) {\n                // try to merge in assignments\n                for (var i = 0; i < self.body.length;) {\n                    if (self.body[i] instanceof AST_SimpleStatement) {\n                        var expr = self.body[i].body, sym, assign;\n                        if (expr instanceof AST_Assign\n                            && expr.operator == \"=\"\n                            && (sym = expr.left) instanceof AST_Symbol\n                            && vars.has(sym.name)\n                        ) {\n                            var def = vars.get(sym.name);\n                            if (def.value) break;\n                            def.value = expr.right;\n                            remove(defs, def);\n                            defs.push(def);\n                            self.body.splice(i, 1);\n                            continue;\n                        }\n                        if (expr instanceof AST_Sequence\n                            && (assign = expr.expressions[0]) instanceof AST_Assign\n                            && assign.operator == \"=\"\n                            && (sym = assign.left) instanceof AST_Symbol\n                            && vars.has(sym.name)\n                        ) {\n                            var def = vars.get(sym.name);\n                            if (def.value) break;\n                            def.value = assign.right;\n                            remove(defs, def);\n                            defs.push(def);\n                            self.body[i].body = make_sequence(expr, expr.expressions.slice(1));\n                            continue;\n                        }\n                    }\n                    if (self.body[i] instanceof AST_EmptyStatement) {\n                        self.body.splice(i, 1);\n                        continue;\n                    }\n                    if (self.body[i] instanceof AST_BlockStatement) {\n                        self.body.splice(i, 1, ...self.body[i].body);\n                        continue;\n                    }\n                    break;\n                }\n                defs = make_node(AST_Var, self, {\n                    definitions: defs\n                });\n                hoisted.push(defs);\n            }\n        }\n        self.body = dirs.concat(hoisted, self.body);\n    }\n    return self;\n});\n\nAST_Scope.DEFMETHOD(\"hoist_properties\", function(compressor) {\n    var self = this;\n    if (!compressor.option(\"hoist_props\") || compressor.has_directive(\"use asm\")) return self;\n    var top_retain = self instanceof AST_Toplevel && compressor.top_retain || return_false;\n    var defs_by_id = new Map();\n    var hoister = new TreeTransformer(function(node, descend) {\n        if (node instanceof AST_VarDef) {\n            const sym = node.name;\n            let def;\n            let value;\n            if (sym.scope === self\n                && (def = sym.definition()).escaped != 1\n                && !def.assignments\n                && !def.direct_access\n                && !def.single_use\n                && !compressor.exposed(def)\n                && !top_retain(def)\n                && (value = sym.fixed_value()) === node.value\n                && value instanceof AST_Object\n                && !value.properties.some(prop =>\n                    prop instanceof AST_Expansion || prop.computed_key()\n                )\n            ) {\n                descend(node, this);\n                const defs = new Map();\n                const assignments = [];\n                value.properties.forEach(({ key, value }) => {\n                    const scope = hoister.find_scope();\n                    const symbol = self.create_symbol(sym.CTOR, {\n                        source: sym,\n                        scope,\n                        conflict_scopes: new Set([\n                            scope,\n                            ...sym.definition().references.map(ref => ref.scope)\n                        ]),\n                        tentative_name: sym.name + \"_\" + key\n                    });\n\n                    defs.set(String(key), symbol.definition());\n\n                    assignments.push(make_node(AST_VarDef, node, {\n                        name: symbol,\n                        value\n                    }));\n                });\n                defs_by_id.set(def.id, defs);\n                return MAP.splice(assignments);\n            }\n        } else if (node instanceof AST_PropAccess\n            && node.expression instanceof AST_SymbolRef\n        ) {\n            const defs = defs_by_id.get(node.expression.definition().id);\n            if (defs) {\n                const def = defs.get(String(get_simple_key(node.property)));\n                const sym = make_node(AST_SymbolRef, node, {\n                    name: def.name,\n                    scope: node.expression.scope,\n                    thedef: def\n                });\n                sym.reference({});\n                return sym;\n            }\n        }\n    });\n    return self.transform(hoister);\n});\n\ndef_optimize(AST_SimpleStatement, function(self, compressor) {\n    if (compressor.option(\"side_effects\")) {\n        var body = self.body;\n        var node = body.drop_side_effect_free(compressor, true);\n        if (!node) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        if (node !== body) {\n            return make_node(AST_SimpleStatement, self, { body: node });\n        }\n    }\n    return self;\n});\n\ndef_optimize(AST_While, function(self, compressor) {\n    return compressor.option(\"loops\") ? make_node(AST_For, self, self).optimize(compressor) : self;\n});\n\ndef_optimize(AST_Do, function(self, compressor) {\n    if (!compressor.option(\"loops\")) return self;\n    var cond = self.condition.tail_node().evaluate(compressor);\n    if (!(cond instanceof AST_Node)) {\n        if (cond) return make_node(AST_For, self, {\n            body: make_node(AST_BlockStatement, self.body, {\n                body: [\n                    self.body,\n                    make_node(AST_SimpleStatement, self.condition, {\n                        body: self.condition\n                    })\n                ]\n            })\n        }).optimize(compressor);\n        if (!has_break_or_continue(self, compressor.parent())) {\n            return make_node(AST_BlockStatement, self.body, {\n                body: [\n                    self.body,\n                    make_node(AST_SimpleStatement, self.condition, {\n                        body: self.condition\n                    })\n                ]\n            }).optimize(compressor);\n        }\n    }\n    return self;\n});\n\nfunction if_break_in_loop(self, compressor) {\n    var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;\n    if (compressor.option(\"dead_code\") && is_break(first)) {\n        var body = [];\n        if (self.init instanceof AST_Statement) {\n            body.push(self.init);\n        } else if (self.init) {\n            body.push(make_node(AST_SimpleStatement, self.init, {\n                body: self.init\n            }));\n        }\n        if (self.condition) {\n            body.push(make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition\n            }));\n        }\n        trim_unreachable_code(compressor, self.body, body);\n        return make_node(AST_BlockStatement, self, {\n            body: body\n        });\n    }\n    if (first instanceof AST_If) {\n        if (is_break(first.body)) {\n            if (self.condition) {\n                self.condition = make_node(AST_Binary, self.condition, {\n                    left: self.condition,\n                    operator: \"&&\",\n                    right: first.condition.negate(compressor),\n                });\n            } else {\n                self.condition = first.condition.negate(compressor);\n            }\n            drop_it(first.alternative);\n        } else if (is_break(first.alternative)) {\n            if (self.condition) {\n                self.condition = make_node(AST_Binary, self.condition, {\n                    left: self.condition,\n                    operator: \"&&\",\n                    right: first.condition,\n                });\n            } else {\n                self.condition = first.condition;\n            }\n            drop_it(first.body);\n        }\n    }\n    return self;\n\n    function is_break(node) {\n        return node instanceof AST_Break\n            && compressor.loopcontrol_target(node) === compressor.self();\n    }\n\n    function drop_it(rest) {\n        rest = as_statement_array(rest);\n        if (self.body instanceof AST_BlockStatement) {\n            self.body = self.body.clone();\n            self.body.body = rest.concat(self.body.body.slice(1));\n            self.body = self.body.transform(compressor);\n        } else {\n            self.body = make_node(AST_BlockStatement, self.body, {\n                body: rest\n            }).transform(compressor);\n        }\n        self = if_break_in_loop(self, compressor);\n    }\n}\n\ndef_optimize(AST_For, function(self, compressor) {\n    if (!compressor.option(\"loops\")) return self;\n    if (compressor.option(\"side_effects\") && self.init) {\n        self.init = self.init.drop_side_effect_free(compressor);\n    }\n    if (self.condition) {\n        var cond = self.condition.evaluate(compressor);\n        if (!(cond instanceof AST_Node)) {\n            if (cond) self.condition = null;\n            else if (!compressor.option(\"dead_code\")) {\n                var orig = self.condition;\n                self.condition = make_node_from_constant(cond, self.condition);\n                self.condition = best_of_expression(self.condition.transform(compressor), orig);\n            }\n        }\n        if (compressor.option(\"dead_code\")) {\n            if (cond instanceof AST_Node) cond = self.condition.tail_node().evaluate(compressor);\n            if (!cond) {\n                var body = [];\n                trim_unreachable_code(compressor, self.body, body);\n                if (self.init instanceof AST_Statement) {\n                    body.push(self.init);\n                } else if (self.init) {\n                    body.push(make_node(AST_SimpleStatement, self.init, {\n                        body: self.init\n                    }));\n                }\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n                return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n            }\n        }\n    }\n    return if_break_in_loop(self, compressor);\n});\n\ndef_optimize(AST_If, function(self, compressor) {\n    if (is_empty(self.alternative)) self.alternative = null;\n\n    if (!compressor.option(\"conditionals\")) return self;\n    // if condition can be statically determined, drop\n    // one of the blocks.  note, statically determined implies\n    // “has no side effects”; also it doesn't work for cases like\n    // `x && true`, though it probably should.\n    var cond = self.condition.evaluate(compressor);\n    if (!compressor.option(\"dead_code\") && !(cond instanceof AST_Node)) {\n        var orig = self.condition;\n        self.condition = make_node_from_constant(cond, orig);\n        self.condition = best_of_expression(self.condition.transform(compressor), orig);\n    }\n    if (compressor.option(\"dead_code\")) {\n        if (cond instanceof AST_Node) cond = self.condition.tail_node().evaluate(compressor);\n        if (!cond) {\n            var body = [];\n            trim_unreachable_code(compressor, self.body, body);\n            body.push(make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition\n            }));\n            if (self.alternative) body.push(self.alternative);\n            return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n        } else if (!(cond instanceof AST_Node)) {\n            var body = [];\n            body.push(make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition\n            }));\n            body.push(self.body);\n            if (self.alternative) {\n                trim_unreachable_code(compressor, self.alternative, body);\n            }\n            return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n        }\n    }\n    var negated = self.condition.negate(compressor);\n    var self_condition_length = self.condition.size();\n    var negated_length = negated.size();\n    var negated_is_best = negated_length < self_condition_length;\n    if (self.alternative && negated_is_best) {\n        negated_is_best = false; // because we already do the switch here.\n        // no need to swap values of self_condition_length and negated_length\n        // here because they are only used in an equality comparison later on.\n        self.condition = negated;\n        var tmp = self.body;\n        self.body = self.alternative || make_node(AST_EmptyStatement, self);\n        self.alternative = tmp;\n    }\n    if (is_empty(self.body) && is_empty(self.alternative)) {\n        return make_node(AST_SimpleStatement, self.condition, {\n            body: self.condition.clone()\n        }).optimize(compressor);\n    }\n    if (self.body instanceof AST_SimpleStatement\n        && self.alternative instanceof AST_SimpleStatement) {\n        return make_node(AST_SimpleStatement, self, {\n            body: make_node(AST_Conditional, self, {\n                condition   : self.condition,\n                consequent  : self.body.body,\n                alternative : self.alternative.body\n            })\n        }).optimize(compressor);\n    }\n    if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) {\n        if (self_condition_length === negated_length && !negated_is_best\n            && self.condition instanceof AST_Binary && self.condition.operator == \"||\") {\n            // although the code length of self.condition and negated are the same,\n            // negated does not require additional surrounding parentheses.\n            // see https://github.com/mishoo/UglifyJS2/issues/979\n            negated_is_best = true;\n        }\n        if (negated_is_best) return make_node(AST_SimpleStatement, self, {\n            body: make_node(AST_Binary, self, {\n                operator : \"||\",\n                left     : negated,\n                right    : self.body.body\n            })\n        }).optimize(compressor);\n        return make_node(AST_SimpleStatement, self, {\n            body: make_node(AST_Binary, self, {\n                operator : \"&&\",\n                left     : self.condition,\n                right    : self.body.body\n            })\n        }).optimize(compressor);\n    }\n    if (self.body instanceof AST_EmptyStatement\n        && self.alternative instanceof AST_SimpleStatement) {\n        return make_node(AST_SimpleStatement, self, {\n            body: make_node(AST_Binary, self, {\n                operator : \"||\",\n                left     : self.condition,\n                right    : self.alternative.body\n            })\n        }).optimize(compressor);\n    }\n    if (self.body instanceof AST_Exit\n        && self.alternative instanceof AST_Exit\n        && self.body.TYPE == self.alternative.TYPE) {\n        return make_node(self.body.CTOR, self, {\n            value: make_node(AST_Conditional, self, {\n                condition   : self.condition,\n                consequent  : self.body.value || make_node(AST_Undefined, self.body),\n                alternative : self.alternative.value || make_node(AST_Undefined, self.alternative)\n            }).transform(compressor)\n        }).optimize(compressor);\n    }\n    if (self.body instanceof AST_If\n        && !self.body.alternative\n        && !self.alternative) {\n        self = make_node(AST_If, self, {\n            condition: make_node(AST_Binary, self.condition, {\n                operator: \"&&\",\n                left: self.condition,\n                right: self.body.condition\n            }),\n            body: self.body.body,\n            alternative: null\n        });\n    }\n    if (aborts(self.body)) {\n        if (self.alternative) {\n            var alt = self.alternative;\n            self.alternative = null;\n            return make_node(AST_BlockStatement, self, {\n                body: [ self, alt ]\n            }).optimize(compressor);\n        }\n    }\n    if (aborts(self.alternative)) {\n        var body = self.body;\n        self.body = self.alternative;\n        self.condition = negated_is_best ? negated : self.condition.negate(compressor);\n        self.alternative = null;\n        return make_node(AST_BlockStatement, self, {\n            body: [ self, body ]\n        }).optimize(compressor);\n    }\n    return self;\n});\n\ndef_optimize(AST_Switch, function(self, compressor) {\n    if (!compressor.option(\"switches\")) return self;\n    var branch;\n    var value = self.expression.evaluate(compressor);\n    if (!(value instanceof AST_Node)) {\n        var orig = self.expression;\n        self.expression = make_node_from_constant(value, orig);\n        self.expression = best_of_expression(self.expression.transform(compressor), orig);\n    }\n    if (!compressor.option(\"dead_code\")) return self;\n    if (value instanceof AST_Node) {\n        value = self.expression.tail_node().evaluate(compressor);\n    }\n    var decl = [];\n    var body = [];\n    var default_branch;\n    var exact_match;\n    for (var i = 0, len = self.body.length; i < len && !exact_match; i++) {\n        branch = self.body[i];\n        if (branch instanceof AST_Default) {\n            if (!default_branch) {\n                default_branch = branch;\n            } else {\n                eliminate_branch(branch, body[body.length - 1]);\n            }\n        } else if (!(value instanceof AST_Node)) {\n            var exp = branch.expression.evaluate(compressor);\n            if (!(exp instanceof AST_Node) && exp !== value) {\n                eliminate_branch(branch, body[body.length - 1]);\n                continue;\n            }\n            if (exp instanceof AST_Node) exp = branch.expression.tail_node().evaluate(compressor);\n            if (exp === value) {\n                exact_match = branch;\n                if (default_branch) {\n                    var default_index = body.indexOf(default_branch);\n                    body.splice(default_index, 1);\n                    eliminate_branch(default_branch, body[default_index - 1]);\n                    default_branch = null;\n                }\n            }\n        }\n        body.push(branch);\n    }\n    while (i < len) eliminate_branch(self.body[i++], body[body.length - 1]);\n    self.body = body;\n\n    let default_or_exact = default_branch || exact_match;\n    default_branch = null;\n    exact_match = null;\n\n    // group equivalent branches so they will be located next to each other,\n    // that way the next micro-optimization will merge them.\n    // ** bail micro-optimization if not a simple switch case with breaks\n    if (body.every((branch, i) =>\n        (branch === default_or_exact || branch.expression instanceof AST_Constant)\n        && (branch.body.length === 0 || aborts(branch) || body.length - 1 === i))\n    ) {\n        for (let i = 0; i < body.length; i++) {\n            const branch = body[i];\n            for (let j = i + 1; j < body.length; j++) {\n                const next = body[j];\n                if (next.body.length === 0) continue;\n                const last_branch = j === (body.length - 1);\n                const equivalentBranch = branches_equivalent(next, branch, false);\n                if (equivalentBranch || (last_branch && branches_equivalent(next, branch, true))) {\n                    if (!equivalentBranch && last_branch) {\n                        next.body.push(make_node(AST_Break));\n                    }\n\n                    // let's find previous siblings with inert fallthrough...\n                    let x = j - 1;\n                    let fallthroughDepth = 0;\n                    while (x > i) {\n                        if (is_inert_body(body[x--])) {\n                            fallthroughDepth++;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    const plucked = body.splice(j - fallthroughDepth, 1 + fallthroughDepth);\n                    body.splice(i + 1, 0, ...plucked);\n                    i += plucked.length;\n                }\n            }\n        }\n    }\n\n    // merge equivalent branches in a row\n    for (let i = 0; i < body.length; i++) {\n        let branch = body[i];\n        if (branch.body.length === 0) continue;\n        if (!aborts(branch)) continue;\n\n        for (let j = i + 1; j < body.length; i++, j++) {\n            let next = body[j];\n            if (next.body.length === 0) continue;\n            if (\n                branches_equivalent(next, branch, false)\n                || (j === body.length - 1 && branches_equivalent(next, branch, true))\n            ) {\n                branch.body = [];\n                branch = next;\n                continue;\n            }\n            break;\n        }\n    }\n\n    // Prune any empty branches at the end of the switch statement.\n    {\n        let i = body.length - 1;\n        for (; i >= 0; i--) {\n            let bbody = body[i].body;\n            if (is_break(bbody[bbody.length - 1], compressor)) bbody.pop();\n            if (!is_inert_body(body[i])) break;\n        }\n        // i now points to the index of a branch that contains a body. By incrementing, it's\n        // pointing to the first branch that's empty.\n        i++;\n        if (!default_or_exact || body.indexOf(default_or_exact) >= i) {\n            // The default behavior is to do nothing. We can take advantage of that to\n            // remove all case expressions that are side-effect free that also do\n            // nothing, since they'll default to doing nothing. But we can't remove any\n            // case expressions before one that would side-effect, since they may cause\n            // the side-effect to be skipped.\n            for (let j = body.length - 1; j >= i; j--) {\n                let branch = body[j];\n                if (branch === default_or_exact) {\n                    default_or_exact = null;\n                    body.pop();\n                } else if (!branch.expression.has_side_effects(compressor)) {\n                    body.pop();\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n\n    // Prune side-effect free branches that fall into default.\n    DEFAULT: if (default_or_exact) {\n        let default_index = body.indexOf(default_or_exact);\n        let default_body_index = default_index;\n        for (; default_body_index < body.length - 1; default_body_index++) {\n            if (!is_inert_body(body[default_body_index])) break;\n        }\n        if (default_body_index < body.length - 1) {\n            break DEFAULT;\n        }\n\n        let side_effect_index = body.length - 1;\n        for (; side_effect_index >= 0; side_effect_index--) {\n            let branch = body[side_effect_index];\n            if (branch === default_or_exact) continue;\n            if (branch.expression.has_side_effects(compressor)) break;\n        }\n        // If the default behavior comes after any side-effect case expressions,\n        // then we can fold all side-effect free cases into the default branch.\n        // If the side-effect case is after the default, then any side-effect\n        // free cases could prevent the side-effect from occurring.\n        if (default_body_index > side_effect_index) {\n            let prev_body_index = default_index - 1;\n            for (; prev_body_index >= 0; prev_body_index--) {\n                if (!is_inert_body(body[prev_body_index])) break;\n            }\n            let before = Math.max(side_effect_index, prev_body_index) + 1;\n            let after = default_index;\n            if (side_effect_index > default_index) {\n                // If the default falls into the same body as a side-effect\n                // case, then we need preserve that case and only prune the\n                // cases after it.\n                after = side_effect_index;\n                body[side_effect_index].body = body[default_body_index].body;\n            } else {\n                // The default will be the last branch.\n                default_or_exact.body = body[default_body_index].body;\n            }\n\n            // Prune everything after the default (or last side-effect case)\n            // until the next case with a body.\n            body.splice(after + 1, default_body_index - after);\n            // Prune everything before the default that falls into it.\n            body.splice(before, default_index - before);\n        }\n    }\n\n    // See if we can remove the switch entirely if all cases (the default) fall into the same case body.\n    DEFAULT: if (default_or_exact) {\n        let i = body.findIndex(branch => !is_inert_body(branch));\n        let caseBody;\n        // `i` is equal to one of the following:\n        // - `-1`, there is no body in the switch statement.\n        // - `body.length - 1`, all cases fall into the same body.\n        // - anything else, there are multiple bodies in the switch.\n        if (i === body.length - 1) {\n            // All cases fall into the case body.\n            let branch = body[i];\n            if (has_nested_break(self)) break DEFAULT;\n\n            // This is the last case body, and we've already pruned any breaks, so it's\n            // safe to hoist.\n            caseBody = make_node(AST_BlockStatement, branch, {\n                body: branch.body\n            });\n            branch.body = [];\n        } else if (i !== -1) {\n            // If there are multiple bodies, then we cannot optimize anything.\n            break DEFAULT;\n        }\n\n        let sideEffect = body.find(branch => {\n            return (\n                branch !== default_or_exact\n                && branch.expression.has_side_effects(compressor)\n            );\n        });\n        // If no cases cause a side-effect, we can eliminate the switch entirely.\n        if (!sideEffect) {\n            return make_node(AST_BlockStatement, self, {\n                body: decl.concat(\n                    statement(self.expression),\n                    default_or_exact.expression ? statement(default_or_exact.expression) : [],\n                    caseBody || []\n                )\n            }).optimize(compressor);\n        }\n\n        // If we're this far, either there was no body or all cases fell into the same body.\n        // If there was no body, then we don't need a default branch (because the default is\n        // do nothing). If there was a body, we'll extract it to after the switch, so the\n        // switch's new default is to do nothing and we can still prune it.\n        const default_index = body.indexOf(default_or_exact);\n        body.splice(default_index, 1);\n        default_or_exact = null;\n\n        if (caseBody) {\n            // Recurse into switch statement one more time so that we can append the case body\n            // outside of the switch. This recursion will only happen once since we've pruned\n            // the default case.\n            return make_node(AST_BlockStatement, self, {\n                body: decl.concat(self, caseBody)\n            }).optimize(compressor);\n        }\n        // If we fall here, there is a default branch somewhere, there are no case bodies,\n        // and there's a side-effect somewhere. Just let the below paths take care of it.\n    }\n\n    if (body.length > 0) {\n        body[0].body = decl.concat(body[0].body);\n    }\n\n    if (body.length == 0) {\n        return make_node(AST_BlockStatement, self, {\n            body: decl.concat(statement(self.expression))\n        }).optimize(compressor);\n    }\n    if (body.length == 1 && !has_nested_break(self)) {\n        // This is the last case body, and we've already pruned any breaks, so it's\n        // safe to hoist.\n        let branch = body[0];\n        return make_node(AST_If, self, {\n            condition: make_node(AST_Binary, self, {\n                operator: \"===\",\n                left: self.expression,\n                right: branch.expression,\n            }),\n            body: make_node(AST_BlockStatement, branch, {\n                body: branch.body\n            }),\n            alternative: null\n        }).optimize(compressor);\n    }\n    if (body.length === 2 && default_or_exact && !has_nested_break(self)) {\n        let branch = body[0] === default_or_exact ? body[1] : body[0];\n        let exact_exp = default_or_exact.expression && statement(default_or_exact.expression);\n        if (aborts(body[0])) {\n            // Only the first branch body could have a break (at the last statement)\n            let first = body[0];\n            if (is_break(first.body[first.body.length - 1], compressor)) {\n                first.body.pop();\n            }\n            return make_node(AST_If, self, {\n                condition: make_node(AST_Binary, self, {\n                    operator: \"===\",\n                    left: self.expression,\n                    right: branch.expression,\n                }),\n                body: make_node(AST_BlockStatement, branch, {\n                    body: branch.body\n                }),\n                alternative: make_node(AST_BlockStatement, default_or_exact, {\n                    body: [].concat(\n                        exact_exp || [],\n                        default_or_exact.body\n                    )\n                })\n            }).optimize(compressor);\n        }\n        let operator = \"===\";\n        let consequent = make_node(AST_BlockStatement, branch, {\n            body: branch.body,\n        });\n        let always = make_node(AST_BlockStatement, default_or_exact, {\n            body: [].concat(\n                exact_exp || [],\n                default_or_exact.body\n            )\n        });\n        if (body[0] === default_or_exact) {\n            operator = \"!==\";\n            let tmp = always;\n            always = consequent;\n            consequent = tmp;\n        }\n        return make_node(AST_BlockStatement, self, {\n            body: [\n                make_node(AST_If, self, {\n                    condition: make_node(AST_Binary, self, {\n                        operator: operator,\n                        left: self.expression,\n                        right: branch.expression,\n                    }),\n                    body: consequent,\n                    alternative: null\n                })\n            ].concat(always)\n        }).optimize(compressor);\n    }\n    return self;\n\n    function eliminate_branch(branch, prev) {\n        if (prev && !aborts(prev)) {\n            prev.body = prev.body.concat(branch.body);\n        } else {\n            trim_unreachable_code(compressor, branch, decl);\n        }\n    }\n    function branches_equivalent(branch, prev, insertBreak) {\n        let bbody = branch.body;\n        let pbody = prev.body;\n        if (insertBreak) {\n            bbody = bbody.concat(make_node(AST_Break));\n        }\n        if (bbody.length !== pbody.length) return false;\n        let bblock = make_node(AST_BlockStatement, branch, { body: bbody });\n        let pblock = make_node(AST_BlockStatement, prev, { body: pbody });\n        return bblock.equivalent_to(pblock);\n    }\n    function statement(expression) {\n        return make_node(AST_SimpleStatement, expression, {\n            body: expression\n        });\n    }\n    function has_nested_break(root) {\n        let has_break = false;\n        let tw = new TreeWalker(node => {\n            if (has_break) return true;\n            if (node instanceof AST_Lambda) return true;\n            if (node instanceof AST_SimpleStatement) return true;\n            if (!is_break(node, tw)) return;\n            let parent = tw.parent();\n            if (\n                parent instanceof AST_SwitchBranch\n                && parent.body[parent.body.length - 1] === node\n            ) {\n                return;\n            }\n            has_break = true;\n        });\n        root.walk(tw);\n        return has_break;\n    }\n    function is_break(node, stack) {\n        return node instanceof AST_Break\n            && stack.loopcontrol_target(node) === self;\n    }\n    function is_inert_body(branch) {\n        return !aborts(branch) && !make_node(AST_BlockStatement, branch, {\n            body: branch.body\n        }).has_side_effects(compressor);\n    }\n});\n\ndef_optimize(AST_Try, function(self, compressor) {\n    if (self.bcatch && self.bfinally && self.bfinally.body.every(is_empty)) self.bfinally = null;\n\n    if (compressor.option(\"dead_code\") && self.body.body.every(is_empty)) {\n        var body = [];\n        if (self.bcatch) {\n            trim_unreachable_code(compressor, self.bcatch, body);\n        }\n        if (self.bfinally) body.push(...self.bfinally.body);\n        return make_node(AST_BlockStatement, self, {\n            body: body\n        }).optimize(compressor);\n    }\n    return self;\n});\n\nAST_Definitions.DEFMETHOD(\"remove_initializers\", function() {\n    var decls = [];\n    this.definitions.forEach(function(def) {\n        if (def.name instanceof AST_SymbolDeclaration) {\n            def.value = null;\n            decls.push(def);\n        } else {\n            walk(def.name, node => {\n                if (node instanceof AST_SymbolDeclaration) {\n                    decls.push(make_node(AST_VarDef, def, {\n                        name: node,\n                        value: null\n                    }));\n                }\n            });\n        }\n    });\n    this.definitions = decls;\n});\n\nAST_Definitions.DEFMETHOD(\"to_assignments\", function(compressor) {\n    var reduce_vars = compressor.option(\"reduce_vars\");\n    var assignments = [];\n\n    for (const def of this.definitions) {\n        if (def.value) {\n            var name = make_node(AST_SymbolRef, def.name, def.name);\n            assignments.push(make_node(AST_Assign, def, {\n                operator : \"=\",\n                logical: false,\n                left     : name,\n                right    : def.value\n            }));\n            if (reduce_vars) name.definition().fixed = false;\n        }\n        const thedef = def.name.definition();\n        thedef.eliminated++;\n        thedef.replaced--;\n    }\n\n    if (assignments.length == 0) return null;\n    return make_sequence(this, assignments);\n});\n\ndef_optimize(AST_Definitions, function(self) {\n    if (self.definitions.length == 0) {\n        return make_node(AST_EmptyStatement, self);\n    }\n    return self;\n});\n\ndef_optimize(AST_VarDef, function(self, compressor) {\n    if (\n        self.name instanceof AST_SymbolLet\n        && self.value != null\n        && is_undefined(self.value, compressor)\n    ) {\n        self.value = null;\n    }\n    return self;\n});\n\ndef_optimize(AST_Import, function(self) {\n    return self;\n});\n\ndef_optimize(AST_Call, function(self, compressor) {\n    var exp = self.expression;\n    var fn = exp;\n    inline_array_like_spread(self.args);\n    var simple_args = self.args.every((arg) =>\n        !(arg instanceof AST_Expansion)\n    );\n\n    if (compressor.option(\"reduce_vars\")\n        && fn instanceof AST_SymbolRef\n        && !has_annotation(self, _NOINLINE)\n    ) {\n        const fixed = fn.fixed_value();\n        if (!retain_top_func(fixed, compressor)) {\n            fn = fixed;\n        }\n    }\n\n    var is_func = fn instanceof AST_Lambda;\n\n    if (is_func && fn.pinned()) return self;\n\n    if (compressor.option(\"unused\")\n        && simple_args\n        && is_func\n        && !fn.uses_arguments) {\n        var pos = 0, last = 0;\n        for (var i = 0, len = self.args.length; i < len; i++) {\n            if (fn.argnames[i] instanceof AST_Expansion) {\n                if (has_flag(fn.argnames[i].expression, UNUSED)) while (i < len) {\n                    var node = self.args[i++].drop_side_effect_free(compressor);\n                    if (node) {\n                        self.args[pos++] = node;\n                    }\n                } else while (i < len) {\n                    self.args[pos++] = self.args[i++];\n                }\n                last = pos;\n                break;\n            }\n            var trim = i >= fn.argnames.length;\n            if (trim || has_flag(fn.argnames[i], UNUSED)) {\n                var node = self.args[i].drop_side_effect_free(compressor);\n                if (node) {\n                    self.args[pos++] = node;\n                } else if (!trim) {\n                    self.args[pos++] = make_node(AST_Number, self.args[i], {\n                        value: 0\n                    });\n                    continue;\n                }\n            } else {\n                self.args[pos++] = self.args[i];\n            }\n            last = pos;\n        }\n        self.args.length = last;\n    }\n\n    if (compressor.option(\"unsafe\")) {\n        if (exp instanceof AST_Dot && exp.start.value === \"Array\" && exp.property === \"from\" && self.args.length === 1) {\n            const [argument] = self.args;\n            if (argument instanceof AST_Array) {\n                return make_node(AST_Array, argument, {\n                    elements: argument.elements\n                }).optimize(compressor);\n            }\n        }\n        if (is_undeclared_ref(exp)) switch (exp.name) {\n          case \"Array\":\n            if (self.args.length != 1) {\n                return make_node(AST_Array, self, {\n                    elements: self.args\n                }).optimize(compressor);\n            } else if (self.args[0] instanceof AST_Number && self.args[0].value <= 11) {\n                const elements = [];\n                for (let i = 0; i < self.args[0].value; i++) elements.push(new AST_Hole);\n                return new AST_Array({ elements });\n            }\n            break;\n          case \"Object\":\n            if (self.args.length == 0) {\n                return make_node(AST_Object, self, {\n                    properties: []\n                });\n            }\n            break;\n          case \"String\":\n            if (self.args.length == 0) return make_node(AST_String, self, {\n                value: \"\"\n            });\n            if (self.args.length <= 1) return make_node(AST_Binary, self, {\n                left: self.args[0],\n                operator: \"+\",\n                right: make_node(AST_String, self, { value: \"\" })\n            }).optimize(compressor);\n            break;\n          case \"Number\":\n            if (self.args.length == 0) return make_node(AST_Number, self, {\n                value: 0\n            });\n            if (self.args.length == 1 && compressor.option(\"unsafe_math\")) {\n                return make_node(AST_UnaryPrefix, self, {\n                    expression: self.args[0],\n                    operator: \"+\"\n                }).optimize(compressor);\n            }\n            break;\n          case \"Symbol\":\n            if (self.args.length == 1 && self.args[0] instanceof AST_String && compressor.option(\"unsafe_symbols\"))\n                self.args.length = 0;\n                break;\n          case \"Boolean\":\n            if (self.args.length == 0) return make_node(AST_False, self);\n            if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                expression: make_node(AST_UnaryPrefix, self, {\n                    expression: self.args[0],\n                    operator: \"!\"\n                }),\n                operator: \"!\"\n            }).optimize(compressor);\n            break;\n          case \"RegExp\":\n            var params = [];\n            if (self.args.length >= 1\n                && self.args.length <= 2\n                && self.args.every((arg) => {\n                    var value = arg.evaluate(compressor);\n                    params.push(value);\n                    return arg !== value;\n                })\n                && regexp_is_safe(params[0])\n            ) {\n                let [ source, flags ] = params;\n                source = regexp_source_fix(new RegExp(source).source);\n                const rx = make_node(AST_RegExp, self, {\n                    value: { source, flags }\n                });\n                if (rx._eval(compressor) !== rx) {\n                    return rx;\n                }\n            }\n            break;\n        } else if (exp instanceof AST_Dot) switch(exp.property) {\n          case \"toString\":\n            if (self.args.length == 0 && !exp.expression.may_throw_on_access(compressor)) {\n                return make_node(AST_Binary, self, {\n                    left: make_node(AST_String, self, { value: \"\" }),\n                    operator: \"+\",\n                    right: exp.expression\n                }).optimize(compressor);\n            }\n            break;\n          case \"join\":\n            if (exp.expression instanceof AST_Array) EXIT: {\n                var separator;\n                if (self.args.length > 0) {\n                    separator = self.args[0].evaluate(compressor);\n                    if (separator === self.args[0]) break EXIT; // not a constant\n                }\n                var elements = [];\n                var consts = [];\n                for (var i = 0, len = exp.expression.elements.length; i < len; i++) {\n                    var el = exp.expression.elements[i];\n                    if (el instanceof AST_Expansion) break EXIT;\n                    var value = el.evaluate(compressor);\n                    if (value !== el) {\n                        consts.push(value);\n                    } else {\n                        if (consts.length > 0) {\n                            elements.push(make_node(AST_String, self, {\n                                value: consts.join(separator)\n                            }));\n                            consts.length = 0;\n                        }\n                        elements.push(el);\n                    }\n                }\n                if (consts.length > 0) {\n                    elements.push(make_node(AST_String, self, {\n                        value: consts.join(separator)\n                    }));\n                }\n                if (elements.length == 0) return make_node(AST_String, self, { value: \"\" });\n                if (elements.length == 1) {\n                    if (elements[0].is_string(compressor)) {\n                        return elements[0];\n                    }\n                    return make_node(AST_Binary, elements[0], {\n                        operator : \"+\",\n                        left     : make_node(AST_String, self, { value: \"\" }),\n                        right    : elements[0]\n                    });\n                }\n                if (separator == \"\") {\n                    var first;\n                    if (elements[0].is_string(compressor)\n                        || elements[1].is_string(compressor)) {\n                        first = elements.shift();\n                    } else {\n                        first = make_node(AST_String, self, { value: \"\" });\n                    }\n                    return elements.reduce(function(prev, el) {\n                        return make_node(AST_Binary, el, {\n                            operator : \"+\",\n                            left     : prev,\n                            right    : el\n                        });\n                    }, first).optimize(compressor);\n                }\n                // need this awkward cloning to not affect original element\n                // best_of will decide which one to get through.\n                var node = self.clone();\n                node.expression = node.expression.clone();\n                node.expression.expression = node.expression.expression.clone();\n                node.expression.expression.elements = elements;\n                return best_of(compressor, self, node);\n            }\n            break;\n          case \"charAt\":\n            if (exp.expression.is_string(compressor)) {\n                var arg = self.args[0];\n                var index = arg ? arg.evaluate(compressor) : 0;\n                if (index !== arg) {\n                    return make_node(AST_Sub, exp, {\n                        expression: exp.expression,\n                        property: make_node_from_constant(index | 0, arg || exp)\n                    }).optimize(compressor);\n                }\n            }\n            break;\n          case \"apply\":\n            if (self.args.length == 2 && self.args[1] instanceof AST_Array) {\n                var args = self.args[1].elements.slice();\n                args.unshift(self.args[0]);\n                return make_node(AST_Call, self, {\n                    expression: make_node(AST_Dot, exp, {\n                        expression: exp.expression,\n                        optional: false,\n                        property: \"call\"\n                    }),\n                    args: args\n                }).optimize(compressor);\n            }\n            break;\n          case \"call\":\n            var func = exp.expression;\n            if (func instanceof AST_SymbolRef) {\n                func = func.fixed_value();\n            }\n            if (func instanceof AST_Lambda && !func.contains_this()) {\n                return (self.args.length ? make_sequence(this, [\n                    self.args[0],\n                    make_node(AST_Call, self, {\n                        expression: exp.expression,\n                        args: self.args.slice(1)\n                    })\n                ]) : make_node(AST_Call, self, {\n                    expression: exp.expression,\n                    args: []\n                })).optimize(compressor);\n            }\n            break;\n        }\n    }\n\n    if (compressor.option(\"unsafe_Function\")\n        && is_undeclared_ref(exp)\n        && exp.name == \"Function\") {\n        // new Function() => function(){}\n        if (self.args.length == 0) return make_node(AST_Function, self, {\n            argnames: [],\n            body: []\n        }).optimize(compressor);\n        var nth_identifier = compressor.mangle_options && compressor.mangle_options.nth_identifier || base54;\n        if (self.args.every((x) => x instanceof AST_String)) {\n            // quite a corner-case, but we can handle it:\n            //   https://github.com/mishoo/UglifyJS2/issues/203\n            // if the code argument is a constant, then we can minify it.\n            try {\n                var code = \"n(function(\" + self.args.slice(0, -1).map(function(arg) {\n                    return arg.value;\n                }).join(\",\") + \"){\" + self.args[self.args.length - 1].value + \"})\";\n                var ast = parse(code);\n                var mangle = { ie8: compressor.option(\"ie8\"), nth_identifier: nth_identifier };\n                ast.figure_out_scope(mangle);\n                var comp = new Compressor(compressor.options, {\n                    mangle_options: compressor.mangle_options\n                });\n                ast = ast.transform(comp);\n                ast.figure_out_scope(mangle);\n                ast.compute_char_frequency(mangle);\n                ast.mangle_names(mangle);\n                var fun;\n                walk(ast, node => {\n                    if (is_func_expr(node)) {\n                        fun = node;\n                        return walk_abort;\n                    }\n                });\n                var code = OutputStream();\n                AST_BlockStatement.prototype._codegen.call(fun, fun, code);\n                self.args = [\n                    make_node(AST_String, self, {\n                        value: fun.argnames.map(function(arg) {\n                            return arg.print_to_string();\n                        }).join(\",\")\n                    }),\n                    make_node(AST_String, self.args[self.args.length - 1], {\n                        value: code.get().replace(/^{|}$/g, \"\")\n                    })\n                ];\n                return self;\n            } catch (ex) {\n                if (!(ex instanceof JS_Parse_Error)) {\n                    throw ex;\n                }\n\n                // Otherwise, it crashes at runtime. Or maybe it's nonstandard syntax.\n            }\n        }\n    }\n\n    return inline_into_call(self, fn, compressor);\n});\n\ndef_optimize(AST_New, function(self, compressor) {\n    if (\n        compressor.option(\"unsafe\") &&\n        is_undeclared_ref(self.expression) &&\n        [\"Object\", \"RegExp\", \"Function\", \"Error\", \"Array\"].includes(self.expression.name)\n    ) return make_node(AST_Call, self, self).transform(compressor);\n    return self;\n});\n\ndef_optimize(AST_Sequence, function(self, compressor) {\n    if (!compressor.option(\"side_effects\")) return self;\n    var expressions = [];\n    filter_for_side_effects();\n    var end = expressions.length - 1;\n    trim_right_for_undefined();\n    if (end == 0) {\n        self = maintain_this_binding(compressor.parent(), compressor.self(), expressions[0]);\n        if (!(self instanceof AST_Sequence)) self = self.optimize(compressor);\n        return self;\n    }\n    self.expressions = expressions;\n    return self;\n\n    function filter_for_side_effects() {\n        var first = first_in_statement(compressor);\n        var last = self.expressions.length - 1;\n        self.expressions.forEach(function(expr, index) {\n            if (index < last) expr = expr.drop_side_effect_free(compressor, first);\n            if (expr) {\n                merge_sequence(expressions, expr);\n                first = false;\n            }\n        });\n    }\n\n    function trim_right_for_undefined() {\n        while (end > 0 && is_undefined(expressions[end], compressor)) end--;\n        if (end < expressions.length - 1) {\n            expressions[end] = make_node(AST_UnaryPrefix, self, {\n                operator   : \"void\",\n                expression : expressions[end]\n            });\n            expressions.length = end + 1;\n        }\n    }\n});\n\nAST_Unary.DEFMETHOD(\"lift_sequences\", function(compressor) {\n    if (compressor.option(\"sequences\")) {\n        if (this.expression instanceof AST_Sequence) {\n            var x = this.expression.expressions.slice();\n            var e = this.clone();\n            e.expression = x.pop();\n            x.push(e);\n            return make_sequence(this, x).optimize(compressor);\n        }\n    }\n    return this;\n});\n\ndef_optimize(AST_UnaryPostfix, function(self, compressor) {\n    return self.lift_sequences(compressor);\n});\n\ndef_optimize(AST_UnaryPrefix, function(self, compressor) {\n    var e = self.expression;\n    if (\n        self.operator == \"delete\" &&\n        !(\n            e instanceof AST_SymbolRef ||\n            e instanceof AST_PropAccess ||\n            e instanceof AST_Chain ||\n            is_identifier_atom(e)\n        )\n    ) {\n        return make_sequence(self, [e, make_node(AST_True, self)]).optimize(compressor);\n    }\n    var seq = self.lift_sequences(compressor);\n    if (seq !== self) {\n        return seq;\n    }\n    if (compressor.option(\"side_effects\") && self.operator == \"void\") {\n        e = e.drop_side_effect_free(compressor);\n        if (e) {\n            self.expression = e;\n            return self;\n        } else {\n            return make_node(AST_Undefined, self).optimize(compressor);\n        }\n    }\n    if (compressor.in_boolean_context()) {\n        switch (self.operator) {\n          case \"!\":\n            if (e instanceof AST_UnaryPrefix && e.operator == \"!\") {\n                // !!foo ==> foo, if we're in boolean context\n                return e.expression;\n            }\n            if (e instanceof AST_Binary) {\n                self = best_of(compressor, self, e.negate(compressor, first_in_statement(compressor)));\n            }\n            break;\n          case \"typeof\":\n            // typeof always returns a non-empty string, thus it's\n            // always true in booleans\n            // And we don't need to check if it's undeclared, because in typeof, that's OK\n            return (e instanceof AST_SymbolRef ? make_node(AST_True, self) : make_sequence(self, [\n                e,\n                make_node(AST_True, self)\n            ])).optimize(compressor);\n        }\n    }\n    if (self.operator == \"-\" && e instanceof AST_Infinity) {\n        e = e.transform(compressor);\n    }\n    if (e instanceof AST_Binary\n        && (self.operator == \"+\" || self.operator == \"-\")\n        && (e.operator == \"*\" || e.operator == \"/\" || e.operator == \"%\")) {\n        return make_node(AST_Binary, self, {\n            operator: e.operator,\n            left: make_node(AST_UnaryPrefix, e.left, {\n                operator: self.operator,\n                expression: e.left\n            }),\n            right: e.right\n        });\n    }\n    // avoids infinite recursion of numerals\n    if (self.operator != \"-\"\n        || !(e instanceof AST_Number || e instanceof AST_Infinity || e instanceof AST_BigInt)) {\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n    }\n    return self;\n});\n\nAST_Binary.DEFMETHOD(\"lift_sequences\", function(compressor) {\n    if (compressor.option(\"sequences\")) {\n        if (this.left instanceof AST_Sequence) {\n            var x = this.left.expressions.slice();\n            var e = this.clone();\n            e.left = x.pop();\n            x.push(e);\n            return make_sequence(this, x).optimize(compressor);\n        }\n        if (this.right instanceof AST_Sequence && !this.left.has_side_effects(compressor)) {\n            var assign = this.operator == \"=\" && this.left instanceof AST_SymbolRef;\n            var x = this.right.expressions;\n            var last = x.length - 1;\n            for (var i = 0; i < last; i++) {\n                if (!assign && x[i].has_side_effects(compressor)) break;\n            }\n            if (i == last) {\n                x = x.slice();\n                var e = this.clone();\n                e.right = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            } else if (i > 0) {\n                var e = this.clone();\n                e.right = make_sequence(this.right, x.slice(i));\n                x = x.slice(0, i);\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n        }\n    }\n    return this;\n});\n\nvar commutativeOperators = makePredicate(\"== === != !== * & | ^\");\nfunction is_object(node) {\n    return node instanceof AST_Array\n        || node instanceof AST_Lambda\n        || node instanceof AST_Object\n        || node instanceof AST_Class;\n}\n\ndef_optimize(AST_Binary, function(self, compressor) {\n    function reversible() {\n        return self.left.is_constant()\n            || self.right.is_constant()\n            || !self.left.has_side_effects(compressor)\n                && !self.right.has_side_effects(compressor);\n    }\n    function reverse(op) {\n        if (reversible()) {\n            if (op) self.operator = op;\n            var tmp = self.left;\n            self.left = self.right;\n            self.right = tmp;\n        }\n    }\n    if (commutativeOperators.has(self.operator)) {\n        if (self.right.is_constant()\n            && !self.left.is_constant()) {\n            // if right is a constant, whatever side effects the\n            // left side might have could not influence the\n            // result.  hence, force switch.\n\n            if (!(self.left instanceof AST_Binary\n                  && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                reverse();\n            }\n        }\n    }\n    self = self.lift_sequences(compressor);\n    if (compressor.option(\"comparisons\")) switch (self.operator) {\n      case \"===\":\n      case \"!==\":\n        var is_strict_comparison = true;\n        if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||\n            (self.left.is_number(compressor) && self.right.is_number(compressor)) ||\n            (self.left.is_boolean() && self.right.is_boolean()) ||\n            self.left.equivalent_to(self.right)) {\n            self.operator = self.operator.substr(0, 2);\n        }\n        // XXX: intentionally falling down to the next case\n      case \"==\":\n      case \"!=\":\n        // void 0 == x => null == x\n        if (!is_strict_comparison && is_undefined(self.left, compressor)) {\n            self.left = make_node(AST_Null, self.left);\n        } else if (compressor.option(\"typeofs\")\n            // \"undefined\" == typeof x => undefined === x\n            && self.left instanceof AST_String\n            && self.left.value == \"undefined\"\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"typeof\") {\n            var expr = self.right.expression;\n            if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor)\n                : !(expr instanceof AST_PropAccess && compressor.option(\"ie8\"))) {\n                self.right = expr;\n                self.left = make_node(AST_Undefined, self.left).optimize(compressor);\n                if (self.operator.length == 2) self.operator += \"=\";\n            }\n        } else if (self.left instanceof AST_SymbolRef\n            // obj !== obj => false\n            && self.right instanceof AST_SymbolRef\n            && self.left.definition() === self.right.definition()\n            && is_object(self.left.fixed_value())) {\n            return make_node(self.operator[0] == \"=\" ? AST_True : AST_False, self);\n        }\n        break;\n      case \"&&\":\n      case \"||\":\n        var lhs = self.left;\n        if (lhs.operator == self.operator) {\n            lhs = lhs.right;\n        }\n        if (lhs instanceof AST_Binary\n            && lhs.operator == (self.operator == \"&&\" ? \"!==\" : \"===\")\n            && self.right instanceof AST_Binary\n            && lhs.operator == self.right.operator\n            && (is_undefined(lhs.left, compressor) && self.right.left instanceof AST_Null\n                || lhs.left instanceof AST_Null && is_undefined(self.right.left, compressor))\n            && !lhs.right.has_side_effects(compressor)\n            && lhs.right.equivalent_to(self.right.right)) {\n            var combined = make_node(AST_Binary, self, {\n                operator: lhs.operator.slice(0, -1),\n                left: make_node(AST_Null, self),\n                right: lhs.right\n            });\n            if (lhs !== self.left) {\n                combined = make_node(AST_Binary, self, {\n                    operator: self.operator,\n                    left: self.left.left,\n                    right: combined\n                });\n            }\n            return combined;\n        }\n        break;\n    }\n    if (self.operator == \"+\" && compressor.in_boolean_context()) {\n        var ll = self.left.evaluate(compressor);\n        var rr = self.right.evaluate(compressor);\n        if (ll && typeof ll == \"string\") {\n            return make_sequence(self, [\n                self.right,\n                make_node(AST_True, self)\n            ]).optimize(compressor);\n        }\n        if (rr && typeof rr == \"string\") {\n            return make_sequence(self, [\n                self.left,\n                make_node(AST_True, self)\n            ]).optimize(compressor);\n        }\n    }\n    if (compressor.option(\"comparisons\") && self.is_boolean()) {\n        if (!(compressor.parent() instanceof AST_Binary)\n            || compressor.parent() instanceof AST_Assign) {\n            var negated = make_node(AST_UnaryPrefix, self, {\n                operator: \"!\",\n                expression: self.negate(compressor, first_in_statement(compressor))\n            });\n            self = best_of(compressor, self, negated);\n        }\n        if (compressor.option(\"unsafe_comps\")) {\n            switch (self.operator) {\n              case \"<\": reverse(\">\"); break;\n              case \"<=\": reverse(\">=\"); break;\n            }\n        }\n    }\n    if (self.operator == \"+\") {\n        if (self.right instanceof AST_String\n            && self.right.getValue() == \"\"\n            && self.left.is_string(compressor)) {\n            return self.left;\n        }\n        if (self.left instanceof AST_String\n            && self.left.getValue() == \"\"\n            && self.right.is_string(compressor)) {\n            return self.right;\n        }\n        if (self.left instanceof AST_Binary\n            && self.left.operator == \"+\"\n            && self.left.left instanceof AST_String\n            && self.left.left.getValue() == \"\"\n            && self.right.is_string(compressor)) {\n            self.left = self.left.right;\n            return self;\n        }\n    }\n    if (compressor.option(\"evaluate\")) {\n        switch (self.operator) {\n          case \"&&\":\n            var ll = has_flag(self.left, TRUTHY)\n                ? true\n                : has_flag(self.left, FALSY)\n                    ? false\n                    : self.left.evaluate(compressor);\n            if (!ll) {\n                return maintain_this_binding(compressor.parent(), compressor.self(), self.left).optimize(compressor);\n            } else if (!(ll instanceof AST_Node)) {\n                return make_sequence(self, [ self.left, self.right ]).optimize(compressor);\n            }\n            var rr = self.right.evaluate(compressor);\n            if (!rr) {\n                if (compressor.in_boolean_context()) {\n                    return make_sequence(self, [\n                        self.left,\n                        make_node(AST_False, self)\n                    ]).optimize(compressor);\n                } else {\n                    set_flag(self, FALSY);\n                }\n            } else if (!(rr instanceof AST_Node)) {\n                var parent = compressor.parent();\n                if (parent.operator == \"&&\" && parent.left === compressor.self() || compressor.in_boolean_context()) {\n                    return self.left.optimize(compressor);\n                }\n            }\n            // x || false && y ---> x ? y : false\n            if (self.left.operator == \"||\") {\n                var lr = self.left.right.evaluate(compressor);\n                if (!lr) return make_node(AST_Conditional, self, {\n                    condition: self.left.left,\n                    consequent: self.right,\n                    alternative: self.left.right\n                }).optimize(compressor);\n            }\n            break;\n          case \"||\":\n            var ll = has_flag(self.left, TRUTHY)\n              ? true\n              : has_flag(self.left, FALSY)\n                ? false\n                : self.left.evaluate(compressor);\n            if (!ll) {\n                return make_sequence(self, [ self.left, self.right ]).optimize(compressor);\n            } else if (!(ll instanceof AST_Node)) {\n                return maintain_this_binding(compressor.parent(), compressor.self(), self.left).optimize(compressor);\n            }\n            var rr = self.right.evaluate(compressor);\n            if (!rr) {\n                var parent = compressor.parent();\n                if (parent.operator == \"||\" && parent.left === compressor.self() || compressor.in_boolean_context()) {\n                    return self.left.optimize(compressor);\n                }\n            } else if (!(rr instanceof AST_Node)) {\n                if (compressor.in_boolean_context()) {\n                    return make_sequence(self, [\n                        self.left,\n                        make_node(AST_True, self)\n                    ]).optimize(compressor);\n                } else {\n                    set_flag(self, TRUTHY);\n                }\n            }\n            if (self.left.operator == \"&&\") {\n                var lr = self.left.right.evaluate(compressor);\n                if (lr && !(lr instanceof AST_Node)) return make_node(AST_Conditional, self, {\n                    condition: self.left.left,\n                    consequent: self.left.right,\n                    alternative: self.right\n                }).optimize(compressor);\n            }\n            break;\n          case \"??\":\n            if (is_nullish(self.left, compressor)) {\n                return self.right;\n            }\n\n            var ll = self.left.evaluate(compressor);\n            if (!(ll instanceof AST_Node)) {\n                // if we know the value for sure we can simply compute right away.\n                return ll == null ? self.right : self.left;\n            }\n\n            if (compressor.in_boolean_context()) {\n                const rr = self.right.evaluate(compressor);\n                if (!(rr instanceof AST_Node) && !rr) {\n                    return self.left;\n                }\n            }\n        }\n        var associative = true;\n        switch (self.operator) {\n          case \"+\":\n            // (x + \"foo\") + \"bar\" => x + \"foobar\"\n            if (self.right instanceof AST_Constant\n                && self.left instanceof AST_Binary\n                && self.left.operator == \"+\"\n                && self.left.is_string(compressor)) {\n                var binary = make_node(AST_Binary, self, {\n                    operator: \"+\",\n                    left: self.left.right,\n                    right: self.right,\n                });\n                var r = binary.optimize(compressor);\n                if (binary !== r) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: self.left.left,\n                        right: r\n                    });\n                }\n            }\n            // (x + \"foo\") + (\"bar\" + y) => (x + \"foobar\") + y\n            if (self.left instanceof AST_Binary\n                && self.left.operator == \"+\"\n                && self.left.is_string(compressor)\n                && self.right instanceof AST_Binary\n                && self.right.operator == \"+\"\n                && self.right.is_string(compressor)) {\n                var binary = make_node(AST_Binary, self, {\n                    operator: \"+\",\n                    left: self.left.right,\n                    right: self.right.left,\n                });\n                var m = binary.optimize(compressor);\n                if (binary !== m) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_Binary, self.left, {\n                            operator: \"+\",\n                            left: self.left.left,\n                            right: m\n                        }),\n                        right: self.right.right\n                    });\n                }\n            }\n            // a + -b => a - b\n            if (self.right instanceof AST_UnaryPrefix\n                && self.right.operator == \"-\"\n                && self.left.is_number(compressor)) {\n                self = make_node(AST_Binary, self, {\n                    operator: \"-\",\n                    left: self.left,\n                    right: self.right.expression\n                });\n                break;\n            }\n            // -a + b => b - a\n            if (self.left instanceof AST_UnaryPrefix\n                && self.left.operator == \"-\"\n                && reversible()\n                && self.right.is_number(compressor)) {\n                self = make_node(AST_Binary, self, {\n                    operator: \"-\",\n                    left: self.right,\n                    right: self.left.expression\n                });\n                break;\n            }\n            // `foo${bar}baz` + 1 => `foo${bar}baz1`\n            if (self.left instanceof AST_TemplateString) {\n                var l = self.left;\n                var r = self.right.evaluate(compressor);\n                if (r != self.right) {\n                    l.segments[l.segments.length - 1].value += String(r);\n                    return l;\n                }\n            }\n            // 1 + `foo${bar}baz` => `1foo${bar}baz`\n            if (self.right instanceof AST_TemplateString) {\n                var r = self.right;\n                var l = self.left.evaluate(compressor);\n                if (l != self.left) {\n                    r.segments[0].value = String(l) + r.segments[0].value;\n                    return r;\n                }\n            }\n            // `1${bar}2` + `foo${bar}baz` => `1${bar}2foo${bar}baz`\n            if (self.left instanceof AST_TemplateString\n                && self.right instanceof AST_TemplateString) {\n                var l = self.left;\n                var segments = l.segments;\n                var r = self.right;\n                segments[segments.length - 1].value += r.segments[0].value;\n                for (var i = 1; i < r.segments.length; i++) {\n                    segments.push(r.segments[i]);\n                }\n                return l;\n            }\n          case \"*\":\n            associative = compressor.option(\"unsafe_math\");\n          case \"&\":\n          case \"|\":\n          case \"^\":\n            // a + +b => +b + a\n            if (self.left.is_number(compressor)\n                && self.right.is_number(compressor)\n                && reversible()\n                && !(self.left instanceof AST_Binary\n                    && self.left.operator != self.operator\n                    && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                var reversed = make_node(AST_Binary, self, {\n                    operator: self.operator,\n                    left: self.right,\n                    right: self.left\n                });\n                if (self.right instanceof AST_Constant\n                    && !(self.left instanceof AST_Constant)) {\n                    self = best_of(compressor, reversed, self);\n                } else {\n                    self = best_of(compressor, self, reversed);\n                }\n            }\n            if (associative && self.is_number(compressor)) {\n                // a + (b + c) => (a + b) + c\n                if (self.right instanceof AST_Binary\n                    && self.right.operator == self.operator) {\n                    self = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: make_node(AST_Binary, self.left, {\n                            operator: self.operator,\n                            left: self.left,\n                            right: self.right.left,\n                            start: self.left.start,\n                            end: self.right.left.end\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // (n + 2) + 3 => 5 + n\n                // (2 * n) * 3 => 6 + n\n                if (self.right instanceof AST_Constant\n                    && self.left instanceof AST_Binary\n                    && self.left.operator == self.operator) {\n                    if (self.left.left instanceof AST_Constant) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: self.left.left,\n                                right: self.right,\n                                start: self.left.left.start,\n                                end: self.right.end\n                            }),\n                            right: self.left.right\n                        });\n                    } else if (self.left.right instanceof AST_Constant) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: self.left.right,\n                                right: self.right,\n                                start: self.left.right.start,\n                                end: self.right.end\n                            }),\n                            right: self.left.left\n                        });\n                    }\n                }\n                // (a | 1) | (2 | d) => (3 | a) | b\n                if (self.left instanceof AST_Binary\n                    && self.left.operator == self.operator\n                    && self.left.right instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == self.operator\n                    && self.right.left instanceof AST_Constant) {\n                    self = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: make_node(AST_Binary, self.left, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left.left, {\n                                operator: self.operator,\n                                left: self.left.right,\n                                right: self.right.left,\n                                start: self.left.right.start,\n                                end: self.right.left.end\n                            }),\n                            right: self.left.left\n                        }),\n                        right: self.right.right\n                    });\n                }\n            }\n        }\n    }\n    // x && (y && z)  ==>  x && y && z\n    // x || (y || z)  ==>  x || y || z\n    // x + (\"y\" + z)  ==>  x + \"y\" + z\n    // \"x\" + (y + \"z\")==>  \"x\" + y + \"z\"\n    if (self.right instanceof AST_Binary\n        && self.right.operator == self.operator\n        && (lazy_op.has(self.operator)\n            || (self.operator == \"+\"\n                && (self.right.left.is_string(compressor)\n                    || (self.left.is_string(compressor)\n                        && self.right.right.is_string(compressor)))))\n    ) {\n        self.left = make_node(AST_Binary, self.left, {\n            operator : self.operator,\n            left     : self.left.transform(compressor),\n            right    : self.right.left.transform(compressor)\n        });\n        self.right = self.right.right.transform(compressor);\n        return self.transform(compressor);\n    }\n    var ev = self.evaluate(compressor);\n    if (ev !== self) {\n        ev = make_node_from_constant(ev, self).optimize(compressor);\n        return best_of(compressor, ev, self);\n    }\n    return self;\n});\n\ndef_optimize(AST_SymbolExport, function(self) {\n    return self;\n});\n\ndef_optimize(AST_SymbolRef, function(self, compressor) {\n    if (\n        !compressor.option(\"ie8\")\n        && is_undeclared_ref(self)\n        && !compressor.find_parent(AST_With)\n    ) {\n        switch (self.name) {\n          case \"undefined\":\n            return make_node(AST_Undefined, self).optimize(compressor);\n          case \"NaN\":\n            return make_node(AST_NaN, self).optimize(compressor);\n          case \"Infinity\":\n            return make_node(AST_Infinity, self).optimize(compressor);\n        }\n    }\n\n    const parent = compressor.parent();\n    if (compressor.option(\"reduce_vars\") && is_lhs(self, parent) !== self) {\n        return inline_into_symbolref(self, compressor);\n    } else {\n        return self;\n    }\n});\n\nfunction is_atomic(lhs, self) {\n    return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;\n}\n\ndef_optimize(AST_Undefined, function(self, compressor) {\n    if (compressor.option(\"unsafe_undefined\")) {\n        var undef = find_variable(compressor, \"undefined\");\n        if (undef) {\n            var ref = make_node(AST_SymbolRef, self, {\n                name   : \"undefined\",\n                scope  : undef.scope,\n                thedef : undef\n            });\n            set_flag(ref, UNDEFINED);\n            return ref;\n        }\n    }\n    var lhs = is_lhs(compressor.self(), compressor.parent());\n    if (lhs && is_atomic(lhs, self)) return self;\n    return make_node(AST_UnaryPrefix, self, {\n        operator: \"void\",\n        expression: make_node(AST_Number, self, {\n            value: 0\n        })\n    });\n});\n\ndef_optimize(AST_Infinity, function(self, compressor) {\n    var lhs = is_lhs(compressor.self(), compressor.parent());\n    if (lhs && is_atomic(lhs, self)) return self;\n    if (\n        compressor.option(\"keep_infinity\")\n        && !(lhs && !is_atomic(lhs, self))\n        && !find_variable(compressor, \"Infinity\")\n    ) {\n        return self;\n    }\n    return make_node(AST_Binary, self, {\n        operator: \"/\",\n        left: make_node(AST_Number, self, {\n            value: 1\n        }),\n        right: make_node(AST_Number, self, {\n            value: 0\n        })\n    });\n});\n\ndef_optimize(AST_NaN, function(self, compressor) {\n    var lhs = is_lhs(compressor.self(), compressor.parent());\n    if (lhs && !is_atomic(lhs, self)\n        || find_variable(compressor, \"NaN\")) {\n        return make_node(AST_Binary, self, {\n            operator: \"/\",\n            left: make_node(AST_Number, self, {\n                value: 0\n            }),\n            right: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    }\n    return self;\n});\n\nconst ASSIGN_OPS = makePredicate(\"+ - / * % >> << >>> | ^ &\");\nconst ASSIGN_OPS_COMMUTATIVE = makePredicate(\"* | ^ &\");\ndef_optimize(AST_Assign, function(self, compressor) {\n    if (self.logical) {\n        return self.lift_sequences(compressor);\n    }\n\n    var def;\n    // x = x ---> x\n    if (\n        self.operator === \"=\"\n        && self.left instanceof AST_SymbolRef\n        && self.left.name !== \"arguments\"\n        && !(def = self.left.definition()).undeclared\n        && self.right.equivalent_to(self.left)\n    ) {\n        return self.right;\n    }\n\n    if (compressor.option(\"dead_code\")\n        && self.left instanceof AST_SymbolRef\n        && (def = self.left.definition()).scope === compressor.find_parent(AST_Lambda)) {\n        var level = 0, node, parent = self;\n        do {\n            node = parent;\n            parent = compressor.parent(level++);\n            if (parent instanceof AST_Exit) {\n                if (in_try(level, parent)) break;\n                if (is_reachable(def.scope, [ def ])) break;\n                if (self.operator == \"=\") return self.right;\n                def.fixed = false;\n                return make_node(AST_Binary, self, {\n                    operator: self.operator.slice(0, -1),\n                    left: self.left,\n                    right: self.right\n                }).optimize(compressor);\n            }\n        } while (parent instanceof AST_Binary && parent.right === node\n            || parent instanceof AST_Sequence && parent.tail_node() === node);\n    }\n    self = self.lift_sequences(compressor);\n\n    if (self.operator == \"=\" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) {\n        // x = expr1 OP expr2\n        if (self.right.left instanceof AST_SymbolRef\n            && self.right.left.name == self.left.name\n            && ASSIGN_OPS.has(self.right.operator)) {\n            // x = x - 2  --->  x -= 2\n            self.operator = self.right.operator + \"=\";\n            self.right = self.right.right;\n        } else if (self.right.right instanceof AST_SymbolRef\n            && self.right.right.name == self.left.name\n            && ASSIGN_OPS_COMMUTATIVE.has(self.right.operator)\n            && !self.right.left.has_side_effects(compressor)) {\n            // x = 2 & x  --->  x &= 2\n            self.operator = self.right.operator + \"=\";\n            self.right = self.right.left;\n        }\n    }\n    return self;\n\n    function in_try(level, node) {\n        function may_assignment_throw() {\n            const right = self.right;\n            self.right = make_node(AST_Null, right);\n            const may_throw = node.may_throw(compressor);\n            self.right = right;\n\n            return may_throw;\n        }\n\n        var stop_at = self.left.definition().scope.get_defun_scope();\n        var parent;\n        while ((parent = compressor.parent(level++)) !== stop_at) {\n            if (parent instanceof AST_Try) {\n                if (parent.bfinally) return true;\n                if (parent.bcatch && may_assignment_throw()) return true;\n            }\n        }\n    }\n});\n\ndef_optimize(AST_DefaultAssign, function(self, compressor) {\n    if (!compressor.option(\"evaluate\")) {\n        return self;\n    }\n    var evaluateRight = self.right.evaluate(compressor);\n\n    // `[x = undefined] = foo` ---> `[x] = foo`\n    // `(arg = undefined) => ...` ---> `(arg) => ...` (unless `keep_fargs`)\n    if (\n        evaluateRight === undefined &&\n        (compressor.parent() instanceof AST_Lambda\n            ? compressor.option(\"keep_fargs\") === false\n            : true)\n    ) {\n        self = self.left;\n    } else if (evaluateRight !== self.right) {\n        evaluateRight = make_node_from_constant(evaluateRight, self.right);\n        self.right = best_of_expression(evaluateRight, self.right);\n    }\n\n    return self;\n});\n\nfunction is_nullish_check(check, check_subject, compressor) {\n    if (check_subject.may_throw(compressor)) return false;\n\n    let nullish_side;\n\n    // foo == null\n    if (\n        check instanceof AST_Binary\n        && check.operator === \"==\"\n        // which side is nullish?\n        && (\n            (nullish_side = is_nullish(check.left, compressor) && check.left)\n            || (nullish_side = is_nullish(check.right, compressor) && check.right)\n        )\n        // is the other side the same as the check_subject\n        && (\n            nullish_side === check.left\n                ? check.right\n                : check.left\n        ).equivalent_to(check_subject)\n    ) {\n        return true;\n    }\n\n    // foo === null || foo === undefined\n    if (check instanceof AST_Binary && check.operator === \"||\") {\n        let null_cmp;\n        let undefined_cmp;\n\n        const find_comparison = cmp => {\n            if (!(\n                cmp instanceof AST_Binary\n                && (cmp.operator === \"===\" || cmp.operator === \"==\")\n            )) {\n                return false;\n            }\n\n            let found = 0;\n            let defined_side;\n\n            if (cmp.left instanceof AST_Null) {\n                found++;\n                null_cmp = cmp;\n                defined_side = cmp.right;\n            }\n            if (cmp.right instanceof AST_Null) {\n                found++;\n                null_cmp = cmp;\n                defined_side = cmp.left;\n            }\n            if (is_undefined(cmp.left, compressor)) {\n                found++;\n                undefined_cmp = cmp;\n                defined_side = cmp.right;\n            }\n            if (is_undefined(cmp.right, compressor)) {\n                found++;\n                undefined_cmp = cmp;\n                defined_side = cmp.left;\n            }\n\n            if (found !== 1) {\n                return false;\n            }\n\n            if (!defined_side.equivalent_to(check_subject)) {\n                return false;\n            }\n\n            return true;\n        };\n\n        if (!find_comparison(check.left)) return false;\n        if (!find_comparison(check.right)) return false;\n\n        if (null_cmp && undefined_cmp && null_cmp !== undefined_cmp) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\ndef_optimize(AST_Conditional, function(self, compressor) {\n    if (!compressor.option(\"conditionals\")) return self;\n    // This looks like lift_sequences(), should probably be under \"sequences\"\n    if (self.condition instanceof AST_Sequence) {\n        var expressions = self.condition.expressions.slice();\n        self.condition = expressions.pop();\n        expressions.push(self);\n        return make_sequence(self, expressions);\n    }\n    var cond = self.condition.evaluate(compressor);\n    if (cond !== self.condition) {\n        if (cond) {\n            return maintain_this_binding(compressor.parent(), compressor.self(), self.consequent);\n        } else {\n            return maintain_this_binding(compressor.parent(), compressor.self(), self.alternative);\n        }\n    }\n    var negated = cond.negate(compressor, first_in_statement(compressor));\n    if (best_of(compressor, cond, negated) === negated) {\n        self = make_node(AST_Conditional, self, {\n            condition: negated,\n            consequent: self.alternative,\n            alternative: self.consequent\n        });\n    }\n    var condition = self.condition;\n    var consequent = self.consequent;\n    var alternative = self.alternative;\n    // x?x:y --> x||y\n    if (condition instanceof AST_SymbolRef\n        && consequent instanceof AST_SymbolRef\n        && condition.definition() === consequent.definition()) {\n        return make_node(AST_Binary, self, {\n            operator: \"||\",\n            left: condition,\n            right: alternative\n        });\n    }\n    // if (foo) exp = something; else exp = something_else;\n    //                   |\n    //                   v\n    // exp = foo ? something : something_else;\n    if (\n        consequent instanceof AST_Assign\n        && alternative instanceof AST_Assign\n        && consequent.operator === alternative.operator\n        && consequent.logical === alternative.logical\n        && consequent.left.equivalent_to(alternative.left)\n        && (!self.condition.has_side_effects(compressor)\n            || consequent.operator == \"=\"\n                && !consequent.left.has_side_effects(compressor))\n    ) {\n        return make_node(AST_Assign, self, {\n            operator: consequent.operator,\n            left: consequent.left,\n            logical: consequent.logical,\n            right: make_node(AST_Conditional, self, {\n                condition: self.condition,\n                consequent: consequent.right,\n                alternative: alternative.right\n            })\n        });\n    }\n    // x ? y(a) : y(b) --> y(x ? a : b)\n    var arg_index;\n    if (consequent instanceof AST_Call\n        && alternative.TYPE === consequent.TYPE\n        && consequent.args.length > 0\n        && consequent.args.length == alternative.args.length\n        && consequent.expression.equivalent_to(alternative.expression)\n        && !self.condition.has_side_effects(compressor)\n        && !consequent.expression.has_side_effects(compressor)\n        && typeof (arg_index = single_arg_diff()) == \"number\") {\n        var node = consequent.clone();\n        node.args[arg_index] = make_node(AST_Conditional, self, {\n            condition: self.condition,\n            consequent: consequent.args[arg_index],\n            alternative: alternative.args[arg_index]\n        });\n        return node;\n    }\n    // a ? b : c ? b : d --> (a || c) ? b : d\n    if (alternative instanceof AST_Conditional\n        && consequent.equivalent_to(alternative.consequent)) {\n        return make_node(AST_Conditional, self, {\n            condition: make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: alternative.condition\n            }),\n            consequent: consequent,\n            alternative: alternative.alternative\n        }).optimize(compressor);\n    }\n\n    // a == null ? b : a -> a ?? b\n    if (\n        compressor.option(\"ecma\") >= 2020 &&\n        is_nullish_check(condition, alternative, compressor)\n    ) {\n        return make_node(AST_Binary, self, {\n            operator: \"??\",\n            left: alternative,\n            right: consequent\n        }).optimize(compressor);\n    }\n\n    // a ? b : (c, b) --> (a || c), b\n    if (alternative instanceof AST_Sequence\n        && consequent.equivalent_to(alternative.expressions[alternative.expressions.length - 1])) {\n        return make_sequence(self, [\n            make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: make_sequence(self, alternative.expressions.slice(0, -1))\n            }),\n            consequent\n        ]).optimize(compressor);\n    }\n    // a ? b : (c && b) --> (a || c) && b\n    if (alternative instanceof AST_Binary\n        && alternative.operator == \"&&\"\n        && consequent.equivalent_to(alternative.right)) {\n        return make_node(AST_Binary, self, {\n            operator: \"&&\",\n            left: make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: alternative.left\n            }),\n            right: consequent\n        }).optimize(compressor);\n    }\n    // x?y?z:a:a --> x&&y?z:a\n    if (consequent instanceof AST_Conditional\n        && consequent.alternative.equivalent_to(alternative)) {\n        return make_node(AST_Conditional, self, {\n            condition: make_node(AST_Binary, self, {\n                left: self.condition,\n                operator: \"&&\",\n                right: consequent.condition\n            }),\n            consequent: consequent.consequent,\n            alternative: alternative\n        });\n    }\n    // x ? y : y --> x, y\n    if (consequent.equivalent_to(alternative)) {\n        return make_sequence(self, [\n            self.condition,\n            consequent\n        ]).optimize(compressor);\n    }\n    // x ? y || z : z --> x && y || z\n    if (consequent instanceof AST_Binary\n        && consequent.operator == \"||\"\n        && consequent.right.equivalent_to(alternative)) {\n        return make_node(AST_Binary, self, {\n            operator: \"||\",\n            left: make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: self.condition,\n                right: consequent.left\n            }),\n            right: alternative\n        }).optimize(compressor);\n    }\n\n    const in_bool = compressor.in_boolean_context();\n    if (is_true(self.consequent)) {\n        if (is_false(self.alternative)) {\n            // c ? true : false ---> !!c\n            return booleanize(self.condition);\n        }\n        // c ? true : x ---> !!c || x\n        return make_node(AST_Binary, self, {\n            operator: \"||\",\n            left: booleanize(self.condition),\n            right: self.alternative\n        });\n    }\n    if (is_false(self.consequent)) {\n        if (is_true(self.alternative)) {\n            // c ? false : true ---> !c\n            return booleanize(self.condition.negate(compressor));\n        }\n        // c ? false : x ---> !c && x\n        return make_node(AST_Binary, self, {\n            operator: \"&&\",\n            left: booleanize(self.condition.negate(compressor)),\n            right: self.alternative\n        });\n    }\n    if (is_true(self.alternative)) {\n        // c ? x : true ---> !c || x\n        return make_node(AST_Binary, self, {\n            operator: \"||\",\n            left: booleanize(self.condition.negate(compressor)),\n            right: self.consequent\n        });\n    }\n    if (is_false(self.alternative)) {\n        // c ? x : false ---> !!c && x\n        return make_node(AST_Binary, self, {\n            operator: \"&&\",\n            left: booleanize(self.condition),\n            right: self.consequent\n        });\n    }\n\n    return self;\n\n    function booleanize(node) {\n        if (node.is_boolean()) return node;\n        // !!expression\n        return make_node(AST_UnaryPrefix, node, {\n            operator: \"!\",\n            expression: node.negate(compressor)\n        });\n    }\n\n    // AST_True or !0\n    function is_true(node) {\n        return node instanceof AST_True\n            || in_bool\n                && node instanceof AST_Constant\n                && node.getValue()\n            || (node instanceof AST_UnaryPrefix\n                && node.operator == \"!\"\n                && node.expression instanceof AST_Constant\n                && !node.expression.getValue());\n    }\n    // AST_False or !1\n    function is_false(node) {\n        return node instanceof AST_False\n            || in_bool\n                && node instanceof AST_Constant\n                && !node.getValue()\n            || (node instanceof AST_UnaryPrefix\n                && node.operator == \"!\"\n                && node.expression instanceof AST_Constant\n                && node.expression.getValue());\n    }\n\n    function single_arg_diff() {\n        var a = consequent.args;\n        var b = alternative.args;\n        for (var i = 0, len = a.length; i < len; i++) {\n            if (a[i] instanceof AST_Expansion) return;\n            if (!a[i].equivalent_to(b[i])) {\n                if (b[i] instanceof AST_Expansion) return;\n                for (var j = i + 1; j < len; j++) {\n                    if (a[j] instanceof AST_Expansion) return;\n                    if (!a[j].equivalent_to(b[j])) return;\n                }\n                return i;\n            }\n        }\n    }\n});\n\ndef_optimize(AST_Boolean, function(self, compressor) {\n    if (compressor.in_boolean_context()) return make_node(AST_Number, self, {\n        value: +self.value\n    });\n    var p = compressor.parent();\n    if (compressor.option(\"booleans_as_integers\")) {\n        if (p instanceof AST_Binary && (p.operator == \"===\" || p.operator == \"!==\")) {\n            p.operator = p.operator.replace(/=$/, \"\");\n        }\n        return make_node(AST_Number, self, {\n            value: +self.value\n        });\n    }\n    if (compressor.option(\"booleans\")) {\n        if (p instanceof AST_Binary && (p.operator == \"==\"\n                                        || p.operator == \"!=\")) {\n            return make_node(AST_Number, self, {\n                value: +self.value\n            });\n        }\n        return make_node(AST_UnaryPrefix, self, {\n            operator: \"!\",\n            expression: make_node(AST_Number, self, {\n                value: 1 - self.value\n            })\n        });\n    }\n    return self;\n});\n\nfunction safe_to_flatten(value, compressor) {\n    if (value instanceof AST_SymbolRef) {\n        value = value.fixed_value();\n    }\n    if (!value) return false;\n    if (!(value instanceof AST_Lambda || value instanceof AST_Class)) return true;\n    if (!(value instanceof AST_Lambda && value.contains_this())) return true;\n    return compressor.parent() instanceof AST_New;\n}\n\nAST_PropAccess.DEFMETHOD(\"flatten_object\", function(key, compressor) {\n    if (!compressor.option(\"properties\")) return;\n    if (key === \"__proto__\") return;\n\n    var arrows = compressor.option(\"unsafe_arrows\") && compressor.option(\"ecma\") >= 2015;\n    var expr = this.expression;\n    if (expr instanceof AST_Object) {\n        var props = expr.properties;\n\n        for (var i = props.length; --i >= 0;) {\n            var prop = props[i];\n\n            if (\"\" + (prop instanceof AST_ConciseMethod ? prop.key.name : prop.key) == key) {\n                const all_props_flattenable = props.every((p) =>\n                    (p instanceof AST_ObjectKeyVal\n                        || arrows && p instanceof AST_ConciseMethod && !p.is_generator\n                    )\n                    && !p.computed_key()\n                );\n\n                if (!all_props_flattenable) return;\n                if (!safe_to_flatten(prop.value, compressor)) return;\n\n                return make_node(AST_Sub, this, {\n                    expression: make_node(AST_Array, expr, {\n                        elements: props.map(function(prop) {\n                            var v = prop.value;\n                            if (v instanceof AST_Accessor) {\n                                v = make_node(AST_Function, v, v);\n                            }\n\n                            var k = prop.key;\n                            if (k instanceof AST_Node && !(k instanceof AST_SymbolMethod)) {\n                                return make_sequence(prop, [ k, v ]);\n                            }\n\n                            return v;\n                        })\n                    }),\n                    property: make_node(AST_Number, this, {\n                        value: i\n                    })\n                });\n            }\n        }\n    }\n});\n\ndef_optimize(AST_Sub, function(self, compressor) {\n    var expr = self.expression;\n    var prop = self.property;\n    if (compressor.option(\"properties\")) {\n        var key = prop.evaluate(compressor);\n        if (key !== prop) {\n            if (typeof key == \"string\") {\n                if (key == \"undefined\") {\n                    key = undefined;\n                } else {\n                    var value = parseFloat(key);\n                    if (value.toString() == key) {\n                        key = value;\n                    }\n                }\n            }\n            prop = self.property = best_of_expression(prop, make_node_from_constant(key, prop).transform(compressor));\n            var property = \"\" + key;\n            if (is_basic_identifier_string(property)\n                && property.length <= prop.size() + 1) {\n                return make_node(AST_Dot, self, {\n                    expression: expr,\n                    optional: self.optional,\n                    property: property,\n                    quote: prop.quote,\n                }).optimize(compressor);\n            }\n        }\n    }\n    var fn;\n    OPT_ARGUMENTS: if (compressor.option(\"arguments\")\n        && expr instanceof AST_SymbolRef\n        && expr.name == \"arguments\"\n        && expr.definition().orig.length == 1\n        && (fn = expr.scope) instanceof AST_Lambda\n        && fn.uses_arguments\n        && !(fn instanceof AST_Arrow)\n        && prop instanceof AST_Number) {\n        var index = prop.getValue();\n        var params = new Set();\n        var argnames = fn.argnames;\n        for (var n = 0; n < argnames.length; n++) {\n            if (!(argnames[n] instanceof AST_SymbolFunarg)) {\n                break OPT_ARGUMENTS; // destructuring parameter - bail\n            }\n            var param = argnames[n].name;\n            if (params.has(param)) {\n                break OPT_ARGUMENTS; // duplicate parameter - bail\n            }\n            params.add(param);\n        }\n        var argname = fn.argnames[index];\n        if (argname && compressor.has_directive(\"use strict\")) {\n            var def = argname.definition();\n            if (!compressor.option(\"reduce_vars\") || def.assignments || def.orig.length > 1) {\n                argname = null;\n            }\n        } else if (!argname && !compressor.option(\"keep_fargs\") && index < fn.argnames.length + 5) {\n            while (index >= fn.argnames.length) {\n                argname = fn.create_symbol(AST_SymbolFunarg, {\n                    source: fn,\n                    scope: fn,\n                    tentative_name: \"argument_\" + fn.argnames.length,\n                });\n                fn.argnames.push(argname);\n            }\n        }\n        if (argname) {\n            var sym = make_node(AST_SymbolRef, self, argname);\n            sym.reference({});\n            clear_flag(argname, UNUSED);\n            return sym;\n        }\n    }\n    if (is_lhs(self, compressor.parent())) return self;\n    if (key !== prop) {\n        var sub = self.flatten_object(property, compressor);\n        if (sub) {\n            expr = self.expression = sub.expression;\n            prop = self.property = sub.property;\n        }\n    }\n    if (compressor.option(\"properties\") && compressor.option(\"side_effects\")\n        && prop instanceof AST_Number && expr instanceof AST_Array) {\n        var index = prop.getValue();\n        var elements = expr.elements;\n        var retValue = elements[index];\n        FLATTEN: if (safe_to_flatten(retValue, compressor)) {\n            var flatten = true;\n            var values = [];\n            for (var i = elements.length; --i > index;) {\n                var value = elements[i].drop_side_effect_free(compressor);\n                if (value) {\n                    values.unshift(value);\n                    if (flatten && value.has_side_effects(compressor)) flatten = false;\n                }\n            }\n            if (retValue instanceof AST_Expansion) break FLATTEN;\n            retValue = retValue instanceof AST_Hole ? make_node(AST_Undefined, retValue) : retValue;\n            if (!flatten) values.unshift(retValue);\n            while (--i >= 0) {\n                var value = elements[i];\n                if (value instanceof AST_Expansion) break FLATTEN;\n                value = value.drop_side_effect_free(compressor);\n                if (value) values.unshift(value);\n                else index--;\n            }\n            if (flatten) {\n                values.push(retValue);\n                return make_sequence(self, values).optimize(compressor);\n            } else return make_node(AST_Sub, self, {\n                expression: make_node(AST_Array, expr, {\n                    elements: values\n                }),\n                property: make_node(AST_Number, prop, {\n                    value: index\n                })\n            });\n        }\n    }\n    var ev = self.evaluate(compressor);\n    if (ev !== self) {\n        ev = make_node_from_constant(ev, self).optimize(compressor);\n        return best_of(compressor, ev, self);\n    }\n    return self;\n});\n\ndef_optimize(AST_Chain, function (self, compressor) {\n    if (is_nullish(self.expression, compressor)) {\n        let parent = compressor.parent();\n        // It's valid to delete a nullish optional chain, but if we optimized\n        // this to `delete undefined` then it would appear to be a syntax error\n        // when we try to optimize the delete. Thankfully, `delete 0` is fine.\n        if (parent instanceof AST_UnaryPrefix && parent.operator === \"delete\") {\n            return make_node_from_constant(0, self);\n        }\n        return make_node(AST_Undefined, self);\n    }\n    return self;\n});\n\nAST_Lambda.DEFMETHOD(\"contains_this\", function() {\n    return walk(this, node => {\n        if (node instanceof AST_This) return walk_abort;\n        if (\n            node !== this\n            && node instanceof AST_Scope\n            && !(node instanceof AST_Arrow)\n        ) {\n            return true;\n        }\n    });\n});\n\ndef_optimize(AST_Dot, function(self, compressor) {\n    const parent = compressor.parent();\n    if (is_lhs(self, parent)) return self;\n    if (compressor.option(\"unsafe_proto\")\n        && self.expression instanceof AST_Dot\n        && self.expression.property == \"prototype\") {\n        var exp = self.expression.expression;\n        if (is_undeclared_ref(exp)) switch (exp.name) {\n          case \"Array\":\n            self.expression = make_node(AST_Array, self.expression, {\n                elements: []\n            });\n            break;\n          case \"Function\":\n            self.expression = make_node(AST_Function, self.expression, {\n                argnames: [],\n                body: []\n            });\n            break;\n          case \"Number\":\n            self.expression = make_node(AST_Number, self.expression, {\n                value: 0\n            });\n            break;\n          case \"Object\":\n            self.expression = make_node(AST_Object, self.expression, {\n                properties: []\n            });\n            break;\n          case \"RegExp\":\n            self.expression = make_node(AST_RegExp, self.expression, {\n                value: { source: \"t\", flags: \"\" }\n            });\n            break;\n          case \"String\":\n            self.expression = make_node(AST_String, self.expression, {\n                value: \"\"\n            });\n            break;\n        }\n    }\n    if (!(parent instanceof AST_Call) || !has_annotation(parent, _NOINLINE)) {\n        const sub = self.flatten_object(self.property, compressor);\n        if (sub) return sub.optimize(compressor);\n    }\n\n    if (self.expression instanceof AST_PropAccess\n        && parent instanceof AST_PropAccess) {\n        return self;\n    }\n\n    let ev = self.evaluate(compressor);\n    if (ev !== self) {\n        ev = make_node_from_constant(ev, self).optimize(compressor);\n        return best_of(compressor, ev, self);\n    }\n    return self;\n});\n\nfunction literals_in_boolean_context(self, compressor) {\n    if (compressor.in_boolean_context()) {\n        return best_of(compressor, self, make_sequence(self, [\n            self,\n            make_node(AST_True, self)\n        ]).optimize(compressor));\n    }\n    return self;\n}\n\nfunction inline_array_like_spread(elements) {\n    for (var i = 0; i < elements.length; i++) {\n        var el = elements[i];\n        if (el instanceof AST_Expansion) {\n            var expr = el.expression;\n            if (\n                expr instanceof AST_Array\n                && !expr.elements.some(elm => elm instanceof AST_Hole)\n            ) {\n                elements.splice(i, 1, ...expr.elements);\n                // Step back one, as the element at i is now new.\n                i--;\n            }\n            // In array-like spread, spreading a non-iterable value is TypeError.\n            // We therefore can’t optimize anything else, unlike with object spread.\n        }\n    }\n}\n\ndef_optimize(AST_Array, function(self, compressor) {\n    var optimized = literals_in_boolean_context(self, compressor);\n    if (optimized !== self) {\n        return optimized;\n    }\n    inline_array_like_spread(self.elements);\n    return self;\n});\n\nfunction inline_object_prop_spread(props, compressor) {\n    for (var i = 0; i < props.length; i++) {\n        var prop = props[i];\n        if (prop instanceof AST_Expansion) {\n            const expr = prop.expression;\n            if (\n                expr instanceof AST_Object\n                && expr.properties.every(prop => prop instanceof AST_ObjectKeyVal)\n            ) {\n                props.splice(i, 1, ...expr.properties);\n                // Step back one, as the property at i is now new.\n                i--;\n            } else if (expr instanceof AST_Constant\n                && !(expr instanceof AST_String)) {\n                // Unlike array-like spread, in object spread, spreading a\n                // non-iterable value silently does nothing; it is thus safe\n                // to remove. AST_String is the only iterable AST_Constant.\n                props.splice(i, 1);\n                i--;\n            } else if (is_nullish(expr, compressor)) {\n                // Likewise, null and undefined can be silently removed.\n                props.splice(i, 1);\n                i--;\n            }\n        }\n    }\n}\n\ndef_optimize(AST_Object, function(self, compressor) {\n    var optimized = literals_in_boolean_context(self, compressor);\n    if (optimized !== self) {\n        return optimized;\n    }\n    inline_object_prop_spread(self.properties, compressor);\n    return self;\n});\n\ndef_optimize(AST_RegExp, literals_in_boolean_context);\n\ndef_optimize(AST_Return, function(self, compressor) {\n    if (self.value && is_undefined(self.value, compressor)) {\n        self.value = null;\n    }\n    return self;\n});\n\ndef_optimize(AST_Arrow, opt_AST_Lambda);\n\ndef_optimize(AST_Function, function(self, compressor) {\n    self = opt_AST_Lambda(self, compressor);\n    if (compressor.option(\"unsafe_arrows\")\n        && compressor.option(\"ecma\") >= 2015\n        && !self.name\n        && !self.is_generator\n        && !self.uses_arguments\n        && !self.pinned()) {\n        const uses_this = walk(self, node => {\n            if (node instanceof AST_This) return walk_abort;\n        });\n        if (!uses_this) return make_node(AST_Arrow, self, self).optimize(compressor);\n    }\n    return self;\n});\n\ndef_optimize(AST_Class, function(self) {\n    // HACK to avoid compress failure.\n    // AST_Class is not really an AST_Scope/AST_Block as it lacks a body.\n    return self;\n});\n\ndef_optimize(AST_ClassStaticBlock, function(self, compressor) {\n    tighten_body(self.body, compressor);\n    return self;\n});\n\ndef_optimize(AST_Yield, function(self, compressor) {\n    if (self.expression && !self.is_star && is_undefined(self.expression, compressor)) {\n        self.expression = null;\n    }\n    return self;\n});\n\ndef_optimize(AST_TemplateString, function(self, compressor) {\n    if (\n        !compressor.option(\"evaluate\")\n        || compressor.parent() instanceof AST_PrefixedTemplateString\n    ) {\n        return self;\n    }\n\n    var segments = [];\n    for (var i = 0; i < self.segments.length; i++) {\n        var segment = self.segments[i];\n        if (segment instanceof AST_Node) {\n            var result = segment.evaluate(compressor);\n            // Evaluate to constant value\n            // Constant value shorter than ${segment}\n            if (result !== segment && (result + \"\").length <= segment.size() + \"${}\".length) {\n                // There should always be a previous and next segment if segment is a node\n                segments[segments.length - 1].value = segments[segments.length - 1].value + result + self.segments[++i].value;\n                continue;\n            }\n            // `before ${`innerBefore ${any} innerAfter`} after` => `before innerBefore ${any} innerAfter after`\n            // TODO:\n            // `before ${'test' + foo} after` => `before innerBefore ${any} innerAfter after`\n            // `before ${foo + 'test} after` => `before innerBefore ${any} innerAfter after`\n            if (segment instanceof AST_TemplateString) {\n                var inners = segment.segments;\n                segments[segments.length - 1].value += inners[0].value;\n                for (var j = 1; j < inners.length; j++) {\n                    segment = inners[j];\n                    segments.push(segment);\n                }\n                continue;\n            }\n        }\n        segments.push(segment);\n    }\n    self.segments = segments;\n\n    // `foo` => \"foo\"\n    if (segments.length == 1) {\n        return make_node(AST_String, self, segments[0]);\n    }\n\n    if (\n        segments.length === 3\n        && segments[1] instanceof AST_Node\n        && (\n            segments[1].is_string(compressor)\n            || segments[1].is_number(compressor)\n            || is_nullish(segments[1], compressor)\n            || compressor.option(\"unsafe\")\n        )\n    ) {\n        // `foo${bar}` => \"foo\" + bar\n        if (segments[2].value === \"\") {\n            return make_node(AST_Binary, self, {\n                operator: \"+\",\n                left: make_node(AST_String, self, {\n                    value: segments[0].value,\n                }),\n                right: segments[1],\n            });\n        }\n        // `${bar}baz` => bar + \"baz\"\n        if (segments[0].value === \"\") {\n            return make_node(AST_Binary, self, {\n                operator: \"+\",\n                left: segments[1],\n                right: make_node(AST_String, self, {\n                    value: segments[2].value,\n                }),\n            });\n        }\n    }\n    return self;\n});\n\ndef_optimize(AST_PrefixedTemplateString, function(self) {\n    return self;\n});\n\n// [\"p\"]:1 ---> p:1\n// [42]:1 ---> 42:1\nfunction lift_key(self, compressor) {\n    if (!compressor.option(\"computed_props\")) return self;\n    // save a comparison in the typical case\n    if (!(self.key instanceof AST_Constant)) return self;\n    // allow certain acceptable props as not all AST_Constants are true constants\n    if (self.key instanceof AST_String || self.key instanceof AST_Number) {\n        if (self.key.value === \"__proto__\") return self;\n        if (self.key.value == \"constructor\"\n            && compressor.parent() instanceof AST_Class) return self;\n        if (self instanceof AST_ObjectKeyVal) {\n            self.quote = self.key.quote;\n            self.key = self.key.value;\n        } else if (self instanceof AST_ClassProperty) {\n            self.quote = self.key.quote;\n            self.key = make_node(AST_SymbolClassProperty, self.key, {\n                name: self.key.value\n            });\n        } else {\n            self.quote = self.key.quote;\n            self.key = make_node(AST_SymbolMethod, self.key, {\n                name: self.key.value\n            });\n        }\n    }\n    return self;\n}\n\ndef_optimize(AST_ObjectProperty, lift_key);\n\ndef_optimize(AST_ConciseMethod, function(self, compressor) {\n    lift_key(self, compressor);\n    // p(){return x;} ---> p:()=>x\n    if (compressor.option(\"arrows\")\n        && compressor.parent() instanceof AST_Object\n        && !self.is_generator\n        && !self.value.uses_arguments\n        && !self.value.pinned()\n        && self.value.body.length == 1\n        && self.value.body[0] instanceof AST_Return\n        && self.value.body[0].value\n        && !self.value.contains_this()) {\n        var arrow = make_node(AST_Arrow, self.value, self.value);\n        arrow.async = self.async;\n        arrow.is_generator = self.is_generator;\n        return make_node(AST_ObjectKeyVal, self, {\n            key: self.key instanceof AST_SymbolMethod ? self.key.name : self.key,\n            value: arrow,\n            quote: self.quote,\n        });\n    }\n    return self;\n});\n\ndef_optimize(AST_ObjectKeyVal, function(self, compressor) {\n    lift_key(self, compressor);\n    // p:function(){} ---> p(){}\n    // p:function*(){} ---> *p(){}\n    // p:async function(){} ---> async p(){}\n    // p:()=>{} ---> p(){}\n    // p:async()=>{} ---> async p(){}\n    var unsafe_methods = compressor.option(\"unsafe_methods\");\n    if (unsafe_methods\n        && compressor.option(\"ecma\") >= 2015\n        && (!(unsafe_methods instanceof RegExp) || unsafe_methods.test(self.key + \"\"))) {\n        var key = self.key;\n        var value = self.value;\n        var is_arrow_with_block = value instanceof AST_Arrow\n            && Array.isArray(value.body)\n            && !value.contains_this();\n        if ((is_arrow_with_block || value instanceof AST_Function) && !value.name) {\n            return make_node(AST_ConciseMethod, self, {\n                async: value.async,\n                is_generator: value.is_generator,\n                key: key instanceof AST_Node ? key : make_node(AST_SymbolMethod, self, {\n                    name: key,\n                }),\n                value: make_node(AST_Accessor, value, value),\n                quote: self.quote,\n            });\n        }\n    }\n    return self;\n});\n\ndef_optimize(AST_Destructuring, function(self, compressor) {\n    if (compressor.option(\"pure_getters\") == true\n        && compressor.option(\"unused\")\n        && !self.is_array\n        && Array.isArray(self.names)\n        && !is_destructuring_export_decl(compressor)\n        && !(self.names[self.names.length - 1] instanceof AST_Expansion)) {\n        var keep = [];\n        for (var i = 0; i < self.names.length; i++) {\n            var elem = self.names[i];\n            if (!(elem instanceof AST_ObjectKeyVal\n                && typeof elem.key == \"string\"\n                && elem.value instanceof AST_SymbolDeclaration\n                && !should_retain(compressor, elem.value.definition()))) {\n                keep.push(elem);\n            }\n        }\n        if (keep.length != self.names.length) {\n            self.names = keep;\n        }\n    }\n    return self;\n\n    function is_destructuring_export_decl(compressor) {\n        var ancestors = [/^VarDef$/, /^(Const|Let|Var)$/, /^Export$/];\n        for (var a = 0, p = 0, len = ancestors.length; a < len; p++) {\n            var parent = compressor.parent(p);\n            if (!parent) return false;\n            if (a === 0 && parent.TYPE == \"Destructuring\") continue;\n            if (!ancestors[a].test(parent.TYPE)) {\n                return false;\n            }\n            a++;\n        }\n        return true;\n    }\n\n    function should_retain(compressor, def) {\n        if (def.references.length) return true;\n        if (!def.global) return false;\n        if (compressor.toplevel.vars) {\n             if (compressor.top_retain) {\n                 return compressor.top_retain(def);\n             }\n             return false;\n        }\n        return true;\n    }\n});\n\nexport {\n    Compressor,\n};\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {SourceMapConsumer, SourceMapGenerator} from \"@jridgewell/source-map\";\nimport {defaults, HOP} from \"./utils/index.js\";\n\n// a small wrapper around source-map and @jridgewell/source-map\nasync function SourceMap(options) {\n    options = defaults(options, {\n        file : null,\n        root : null,\n        orig : null,\n        files: {},\n    });\n\n    var orig_map;\n    var generator = new SourceMapGenerator({\n        file       : options.file,\n        sourceRoot : options.root\n    });\n\n    let sourcesContent = {__proto__: null};\n    let files = options.files;\n    for (var name in files) if (HOP(files, name)) {\n        sourcesContent[name] = files[name];\n    }\n    if (options.orig) {\n        // We support both @jridgewell/source-map (which has a sync\n        // SourceMapConsumer) and source-map (which has an async\n        // SourceMapConsumer).\n        orig_map = await new SourceMapConsumer(options.orig);\n        if (orig_map.sourcesContent) {\n            orig_map.sources.forEach(function(source, i) {\n                var content = orig_map.sourcesContent[i];\n                if (content) {\n                    sourcesContent[source] = content;\n                }\n            });\n        }\n    }\n\n    function add(source, gen_line, gen_col, orig_line, orig_col, name) {\n        let generatedPos = { line: gen_line, column: gen_col };\n\n        if (orig_map) {\n            var info = orig_map.originalPositionFor({\n                line: orig_line,\n                column: orig_col\n            });\n            if (info.source === null) {\n                generator.addMapping({\n                    generated: generatedPos,\n                    original: null,\n                    source: null,\n                    name: null\n                });\n                return;\n            }\n            source = info.source;\n            orig_line = info.line;\n            orig_col = info.column;\n            name = info.name || name;\n        }\n        generator.addMapping({\n            generated : generatedPos,\n            original  : { line: orig_line, column: orig_col },\n            source    : source,\n            name      : name\n        });\n        generator.setSourceContent(source, sourcesContent[source]);\n    }\n\n    function clean(map) {\n        const allNull = map.sourcesContent && map.sourcesContent.every(c => c == null);\n        if (allNull) delete map.sourcesContent;\n        if (map.file === undefined) delete map.file;\n        if (map.sourceRoot === undefined) delete map.sourceRoot;\n        return map;\n    }\n\n    function getDecoded() {\n        if (!generator.toDecodedMap) return null;\n        return clean(generator.toDecodedMap());\n    }\n\n    function getEncoded() {\n        return clean(generator.toJSON());\n    }\n\n    function destroy() {\n        // @jridgewell/source-map's SourceMapConsumer does not need to be\n        // manually freed.\n        if (orig_map && orig_map.destroy) orig_map.destroy();\n    }\n\n    return {\n        add,\n        getDecoded,\n        getEncoded,\n        destroy,\n    };\n}\n\nexport {\n    SourceMap,\n};\n", "export var domprops = [\n    \"$&\",\n    \"$'\",\n    \"$*\",\n    \"$+\",\n    \"$1\",\n    \"$2\",\n    \"$3\",\n    \"$4\",\n    \"$5\",\n    \"$6\",\n    \"$7\",\n    \"$8\",\n    \"$9\",\n    \"$_\",\n    \"$`\",\n    \"$input\",\n    \"-moz-animation\",\n    \"-moz-animation-delay\",\n    \"-moz-animation-direction\",\n    \"-moz-animation-duration\",\n    \"-moz-animation-fill-mode\",\n    \"-moz-animation-iteration-count\",\n    \"-moz-animation-name\",\n    \"-moz-animation-play-state\",\n    \"-moz-animation-timing-function\",\n    \"-moz-appearance\",\n    \"-moz-backface-visibility\",\n    \"-moz-border-end\",\n    \"-moz-border-end-color\",\n    \"-moz-border-end-style\",\n    \"-moz-border-end-width\",\n    \"-moz-border-image\",\n    \"-moz-border-start\",\n    \"-moz-border-start-color\",\n    \"-moz-border-start-style\",\n    \"-moz-border-start-width\",\n    \"-moz-box-align\",\n    \"-moz-box-direction\",\n    \"-moz-box-flex\",\n    \"-moz-box-ordinal-group\",\n    \"-moz-box-orient\",\n    \"-moz-box-pack\",\n    \"-moz-box-sizing\",\n    \"-moz-float-edge\",\n    \"-moz-font-feature-settings\",\n    \"-moz-font-language-override\",\n    \"-moz-force-broken-image-icon\",\n    \"-moz-hyphens\",\n    \"-moz-image-region\",\n    \"-moz-margin-end\",\n    \"-moz-margin-start\",\n    \"-moz-orient\",\n    \"-moz-osx-font-smoothing\",\n    \"-moz-outline-radius\",\n    \"-moz-outline-radius-bottomleft\",\n    \"-moz-outline-radius-bottomright\",\n    \"-moz-outline-radius-topleft\",\n    \"-moz-outline-radius-topright\",\n    \"-moz-padding-end\",\n    \"-moz-padding-start\",\n    \"-moz-perspective\",\n    \"-moz-perspective-origin\",\n    \"-moz-tab-size\",\n    \"-moz-text-size-adjust\",\n    \"-moz-transform\",\n    \"-moz-transform-origin\",\n    \"-moz-transform-style\",\n    \"-moz-transition\",\n    \"-moz-transition-delay\",\n    \"-moz-transition-duration\",\n    \"-moz-transition-property\",\n    \"-moz-transition-timing-function\",\n    \"-moz-user-focus\",\n    \"-moz-user-input\",\n    \"-moz-user-modify\",\n    \"-moz-user-select\",\n    \"-moz-window-dragging\",\n    \"-webkit-align-content\",\n    \"-webkit-align-items\",\n    \"-webkit-align-self\",\n    \"-webkit-animation\",\n    \"-webkit-animation-delay\",\n    \"-webkit-animation-direction\",\n    \"-webkit-animation-duration\",\n    \"-webkit-animation-fill-mode\",\n    \"-webkit-animation-iteration-count\",\n    \"-webkit-animation-name\",\n    \"-webkit-animation-play-state\",\n    \"-webkit-animation-timing-function\",\n    \"-webkit-appearance\",\n    \"-webkit-backface-visibility\",\n    \"-webkit-background-clip\",\n    \"-webkit-background-origin\",\n    \"-webkit-background-size\",\n    \"-webkit-border-bottom-left-radius\",\n    \"-webkit-border-bottom-right-radius\",\n    \"-webkit-border-image\",\n    \"-webkit-border-radius\",\n    \"-webkit-border-top-left-radius\",\n    \"-webkit-border-top-right-radius\",\n    \"-webkit-box-align\",\n    \"-webkit-box-direction\",\n    \"-webkit-box-flex\",\n    \"-webkit-box-ordinal-group\",\n    \"-webkit-box-orient\",\n    \"-webkit-box-pack\",\n    \"-webkit-box-shadow\",\n    \"-webkit-box-sizing\",\n    \"-webkit-filter\",\n    \"-webkit-flex\",\n    \"-webkit-flex-basis\",\n    \"-webkit-flex-direction\",\n    \"-webkit-flex-flow\",\n    \"-webkit-flex-grow\",\n    \"-webkit-flex-shrink\",\n    \"-webkit-flex-wrap\",\n    \"-webkit-justify-content\",\n    \"-webkit-line-clamp\",\n    \"-webkit-mask\",\n    \"-webkit-mask-clip\",\n    \"-webkit-mask-composite\",\n    \"-webkit-mask-image\",\n    \"-webkit-mask-origin\",\n    \"-webkit-mask-position\",\n    \"-webkit-mask-position-x\",\n    \"-webkit-mask-position-y\",\n    \"-webkit-mask-repeat\",\n    \"-webkit-mask-size\",\n    \"-webkit-order\",\n    \"-webkit-perspective\",\n    \"-webkit-perspective-origin\",\n    \"-webkit-text-fill-color\",\n    \"-webkit-text-size-adjust\",\n    \"-webkit-text-stroke\",\n    \"-webkit-text-stroke-color\",\n    \"-webkit-text-stroke-width\",\n    \"-webkit-transform\",\n    \"-webkit-transform-origin\",\n    \"-webkit-transform-style\",\n    \"-webkit-transition\",\n    \"-webkit-transition-delay\",\n    \"-webkit-transition-duration\",\n    \"-webkit-transition-property\",\n    \"-webkit-transition-timing-function\",\n    \"-webkit-user-select\",\n    \"0\",\n    \"1\",\n    \"10\",\n    \"11\",\n    \"12\",\n    \"13\",\n    \"14\",\n    \"15\",\n    \"16\",\n    \"17\",\n    \"18\",\n    \"19\",\n    \"2\",\n    \"20\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"@@iterator\",\n    \"ABORT_ERR\",\n    \"ACTIVE\",\n    \"ACTIVE_ATTRIBUTES\",\n    \"ACTIVE_TEXTURE\",\n    \"ACTIVE_UNIFORMS\",\n    \"ACTIVE_UNIFORM_BLOCKS\",\n    \"ADDITION\",\n    \"ALIASED_LINE_WIDTH_RANGE\",\n    \"ALIASED_POINT_SIZE_RANGE\",\n    \"ALLOW_KEYBOARD_INPUT\",\n    \"ALLPASS\",\n    \"ALPHA\",\n    \"ALPHA_BITS\",\n    \"ALREADY_SIGNALED\",\n    \"ALT_MASK\",\n    \"ALWAYS\",\n    \"ANY_SAMPLES_PASSED\",\n    \"ANY_SAMPLES_PASSED_CONSERVATIVE\",\n    \"ANY_TYPE\",\n    \"ANY_UNORDERED_NODE_TYPE\",\n    \"ARRAY_BUFFER\",\n    \"ARRAY_BUFFER_BINDING\",\n    \"ATTACHED_SHADERS\",\n    \"ATTRIBUTE_NODE\",\n    \"AT_TARGET\",\n    \"AbortController\",\n    \"AbortSignal\",\n    \"AbsoluteOrientationSensor\",\n    \"AbstractRange\",\n    \"Accelerometer\",\n    \"AddSearchProvider\",\n    \"AggregateError\",\n    \"AnalyserNode\",\n    \"Animation\",\n    \"AnimationEffect\",\n    \"AnimationEvent\",\n    \"AnimationPlaybackEvent\",\n    \"AnimationTimeline\",\n    \"AnonXMLHttpRequest\",\n    \"Any\",\n    \"ApplicationCache\",\n    \"ApplicationCacheErrorEvent\",\n    \"Array\",\n    \"ArrayBuffer\",\n    \"ArrayType\",\n    \"Atomics\",\n    \"Attr\",\n    \"Audio\",\n    \"AudioBuffer\",\n    \"AudioBufferSourceNode\",\n    \"AudioContext\",\n    \"AudioDestinationNode\",\n    \"AudioListener\",\n    \"AudioNode\",\n    \"AudioParam\",\n    \"AudioParamMap\",\n    \"AudioProcessingEvent\",\n    \"AudioScheduledSourceNode\",\n    \"AudioStreamTrack\",\n    \"AudioWorklet\",\n    \"AudioWorkletNode\",\n    \"AuthenticatorAssertionResponse\",\n    \"AuthenticatorAttestationResponse\",\n    \"AuthenticatorResponse\",\n    \"AutocompleteErrorEvent\",\n    \"BACK\",\n    \"BAD_BOUNDARYPOINTS_ERR\",\n    \"BAD_REQUEST\",\n    \"BANDPASS\",\n    \"BLEND\",\n    \"BLEND_COLOR\",\n    \"BLEND_DST_ALPHA\",\n    \"BLEND_DST_RGB\",\n    \"BLEND_EQUATION\",\n    \"BLEND_EQUATION_ALPHA\",\n    \"BLEND_EQUATION_RGB\",\n    \"BLEND_SRC_ALPHA\",\n    \"BLEND_SRC_RGB\",\n    \"BLUE_BITS\",\n    \"BLUR\",\n    \"BOOL\",\n    \"BOOLEAN_TYPE\",\n    \"BOOL_VEC2\",\n    \"BOOL_VEC3\",\n    \"BOOL_VEC4\",\n    \"BOTH\",\n    \"BROWSER_DEFAULT_WEBGL\",\n    \"BUBBLING_PHASE\",\n    \"BUFFER_SIZE\",\n    \"BUFFER_USAGE\",\n    \"BYTE\",\n    \"BYTES_PER_ELEMENT\",\n    \"BackgroundFetchManager\",\n    \"BackgroundFetchRecord\",\n    \"BackgroundFetchRegistration\",\n    \"BarProp\",\n    \"BarcodeDetector\",\n    \"BaseAudioContext\",\n    \"BaseHref\",\n    \"BatteryManager\",\n    \"BeforeInstallPromptEvent\",\n    \"BeforeLoadEvent\",\n    \"BeforeUnloadEvent\",\n    \"BigInt\",\n    \"BigInt64Array\",\n    \"BigUint64Array\",\n    \"BiquadFilterNode\",\n    \"Blob\",\n    \"BlobEvent\",\n    \"Bluetooth\",\n    \"BluetoothCharacteristicProperties\",\n    \"BluetoothDevice\",\n    \"BluetoothRemoteGATTCharacteristic\",\n    \"BluetoothRemoteGATTDescriptor\",\n    \"BluetoothRemoteGATTServer\",\n    \"BluetoothRemoteGATTService\",\n    \"BluetoothUUID\",\n    \"Boolean\",\n    \"BroadcastChannel\",\n    \"ByteLengthQueuingStrategy\",\n    \"CAPTURING_PHASE\",\n    \"CCW\",\n    \"CDATASection\",\n    \"CDATA_SECTION_NODE\",\n    \"CHANGE\",\n    \"CHARSET_RULE\",\n    \"CHECKING\",\n    \"CLAMP_TO_EDGE\",\n    \"CLICK\",\n    \"CLOSED\",\n    \"CLOSING\",\n    \"COLOR\",\n    \"COLOR_ATTACHMENT0\",\n    \"COLOR_ATTACHMENT1\",\n    \"COLOR_ATTACHMENT10\",\n    \"COLOR_ATTACHMENT11\",\n    \"COLOR_ATTACHMENT12\",\n    \"COLOR_ATTACHMENT13\",\n    \"COLOR_ATTACHMENT14\",\n    \"COLOR_ATTACHMENT15\",\n    \"COLOR_ATTACHMENT2\",\n    \"COLOR_ATTACHMENT3\",\n    \"COLOR_ATTACHMENT4\",\n    \"COLOR_ATTACHMENT5\",\n    \"COLOR_ATTACHMENT6\",\n    \"COLOR_ATTACHMENT7\",\n    \"COLOR_ATTACHMENT8\",\n    \"COLOR_ATTACHMENT9\",\n    \"COLOR_BUFFER_BIT\",\n    \"COLOR_CLEAR_VALUE\",\n    \"COLOR_WRITEMASK\",\n    \"COMMENT_NODE\",\n    \"COMPARE_REF_TO_TEXTURE\",\n    \"COMPILE_STATUS\",\n    \"COMPLETION_STATUS_KHR\",\n    \"COMPRESSED_RGBA_S3TC_DXT1_EXT\",\n    \"COMPRESSED_RGBA_S3TC_DXT3_EXT\",\n    \"COMPRESSED_RGBA_S3TC_DXT5_EXT\",\n    \"COMPRESSED_RGB_S3TC_DXT1_EXT\",\n    \"COMPRESSED_TEXTURE_FORMATS\",\n    \"CONDITION_SATISFIED\",\n    \"CONFIGURATION_UNSUPPORTED\",\n    \"CONNECTING\",\n    \"CONSTANT_ALPHA\",\n    \"CONSTANT_COLOR\",\n    \"CONSTRAINT_ERR\",\n    \"CONTEXT_LOST_WEBGL\",\n    \"CONTROL_MASK\",\n    \"COPY_READ_BUFFER\",\n    \"COPY_READ_BUFFER_BINDING\",\n    \"COPY_WRITE_BUFFER\",\n    \"COPY_WRITE_BUFFER_BINDING\",\n    \"COUNTER_STYLE_RULE\",\n    \"CSS\",\n    \"CSS2Properties\",\n    \"CSSAnimation\",\n    \"CSSCharsetRule\",\n    \"CSSConditionRule\",\n    \"CSSCounterStyleRule\",\n    \"CSSFontFaceRule\",\n    \"CSSFontFeatureValuesRule\",\n    \"CSSGroupingRule\",\n    \"CSSImageValue\",\n    \"CSSImportRule\",\n    \"CSSKeyframeRule\",\n    \"CSSKeyframesRule\",\n    \"CSSKeywordValue\",\n    \"CSSMathInvert\",\n    \"CSSMathMax\",\n    \"CSSMathMin\",\n    \"CSSMathNegate\",\n    \"CSSMathProduct\",\n    \"CSSMathSum\",\n    \"CSSMathValue\",\n    \"CSSMatrixComponent\",\n    \"CSSMediaRule\",\n    \"CSSMozDocumentRule\",\n    \"CSSNameSpaceRule\",\n    \"CSSNamespaceRule\",\n    \"CSSNumericArray\",\n    \"CSSNumericValue\",\n    \"CSSPageRule\",\n    \"CSSPerspective\",\n    \"CSSPositionValue\",\n    \"CSSPrimitiveValue\",\n    \"CSSRotate\",\n    \"CSSRule\",\n    \"CSSRuleList\",\n    \"CSSScale\",\n    \"CSSSkew\",\n    \"CSSSkewX\",\n    \"CSSSkewY\",\n    \"CSSStyleDeclaration\",\n    \"CSSStyleRule\",\n    \"CSSStyleSheet\",\n    \"CSSStyleValue\",\n    \"CSSSupportsRule\",\n    \"CSSTransformComponent\",\n    \"CSSTransformValue\",\n    \"CSSTransition\",\n    \"CSSTranslate\",\n    \"CSSUnitValue\",\n    \"CSSUnknownRule\",\n    \"CSSUnparsedValue\",\n    \"CSSValue\",\n    \"CSSValueList\",\n    \"CSSVariableReferenceValue\",\n    \"CSSVariablesDeclaration\",\n    \"CSSVariablesRule\",\n    \"CSSViewportRule\",\n    \"CSS_ATTR\",\n    \"CSS_CM\",\n    \"CSS_COUNTER\",\n    \"CSS_CUSTOM\",\n    \"CSS_DEG\",\n    \"CSS_DIMENSION\",\n    \"CSS_EMS\",\n    \"CSS_EXS\",\n    \"CSS_FILTER_BLUR\",\n    \"CSS_FILTER_BRIGHTNESS\",\n    \"CSS_FILTER_CONTRAST\",\n    \"CSS_FILTER_CUSTOM\",\n    \"CSS_FILTER_DROP_SHADOW\",\n    \"CSS_FILTER_GRAYSCALE\",\n    \"CSS_FILTER_HUE_ROTATE\",\n    \"CSS_FILTER_INVERT\",\n    \"CSS_FILTER_OPACITY\",\n    \"CSS_FILTER_REFERENCE\",\n    \"CSS_FILTER_SATURATE\",\n    \"CSS_FILTER_SEPIA\",\n    \"CSS_GRAD\",\n    \"CSS_HZ\",\n    \"CSS_IDENT\",\n    \"CSS_IN\",\n    \"CSS_INHERIT\",\n    \"CSS_KHZ\",\n    \"CSS_MATRIX\",\n    \"CSS_MATRIX3D\",\n    \"CSS_MM\",\n    \"CSS_MS\",\n    \"CSS_NUMBER\",\n    \"CSS_PC\",\n    \"CSS_PERCENTAGE\",\n    \"CSS_PERSPECTIVE\",\n    \"CSS_PRIMITIVE_VALUE\",\n    \"CSS_PT\",\n    \"CSS_PX\",\n    \"CSS_RAD\",\n    \"CSS_RECT\",\n    \"CSS_RGBCOLOR\",\n    \"CSS_ROTATE\",\n    \"CSS_ROTATE3D\",\n    \"CSS_ROTATEX\",\n    \"CSS_ROTATEY\",\n    \"CSS_ROTATEZ\",\n    \"CSS_S\",\n    \"CSS_SCALE\",\n    \"CSS_SCALE3D\",\n    \"CSS_SCALEX\",\n    \"CSS_SCALEY\",\n    \"CSS_SCALEZ\",\n    \"CSS_SKEW\",\n    \"CSS_SKEWX\",\n    \"CSS_SKEWY\",\n    \"CSS_STRING\",\n    \"CSS_TRANSLATE\",\n    \"CSS_TRANSLATE3D\",\n    \"CSS_TRANSLATEX\",\n    \"CSS_TRANSLATEY\",\n    \"CSS_TRANSLATEZ\",\n    \"CSS_UNKNOWN\",\n    \"CSS_URI\",\n    \"CSS_VALUE_LIST\",\n    \"CSS_VH\",\n    \"CSS_VMAX\",\n    \"CSS_VMIN\",\n    \"CSS_VW\",\n    \"CULL_FACE\",\n    \"CULL_FACE_MODE\",\n    \"CURRENT_PROGRAM\",\n    \"CURRENT_QUERY\",\n    \"CURRENT_VERTEX_ATTRIB\",\n    \"CUSTOM\",\n    \"CW\",\n    \"Cache\",\n    \"CacheStorage\",\n    \"CanvasCaptureMediaStream\",\n    \"CanvasCaptureMediaStreamTrack\",\n    \"CanvasGradient\",\n    \"CanvasPattern\",\n    \"CanvasRenderingContext2D\",\n    \"CaretPosition\",\n    \"ChannelMergerNode\",\n    \"ChannelSplitterNode\",\n    \"CharacterData\",\n    \"ClientRect\",\n    \"ClientRectList\",\n    \"Clipboard\",\n    \"ClipboardEvent\",\n    \"ClipboardItem\",\n    \"CloseEvent\",\n    \"Collator\",\n    \"CommandEvent\",\n    \"Comment\",\n    \"CompileError\",\n    \"CompositionEvent\",\n    \"CompressionStream\",\n    \"Console\",\n    \"ConstantSourceNode\",\n    \"Controllers\",\n    \"ConvolverNode\",\n    \"CountQueuingStrategy\",\n    \"Counter\",\n    \"Credential\",\n    \"CredentialsContainer\",\n    \"Crypto\",\n    \"CryptoKey\",\n    \"CustomElementRegistry\",\n    \"CustomEvent\",\n    \"DATABASE_ERR\",\n    \"DATA_CLONE_ERR\",\n    \"DATA_ERR\",\n    \"DBLCLICK\",\n    \"DECR\",\n    \"DECR_WRAP\",\n    \"DELETE_STATUS\",\n    \"DEPTH\",\n    \"DEPTH24_STENCIL8\",\n    \"DEPTH32F_STENCIL8\",\n    \"DEPTH_ATTACHMENT\",\n    \"DEPTH_BITS\",\n    \"DEPTH_BUFFER_BIT\",\n    \"DEPTH_CLEAR_VALUE\",\n    \"DEPTH_COMPONENT\",\n    \"DEPTH_COMPONENT16\",\n    \"DEPTH_COMPONENT24\",\n    \"DEPTH_COMPONENT32F\",\n    \"DEPTH_FUNC\",\n    \"DEPTH_RANGE\",\n    \"DEPTH_STENCIL\",\n    \"DEPTH_STENCIL_ATTACHMENT\",\n    \"DEPTH_TEST\",\n    \"DEPTH_WRITEMASK\",\n    \"DEVICE_INELIGIBLE\",\n    \"DIRECTION_DOWN\",\n    \"DIRECTION_LEFT\",\n    \"DIRECTION_RIGHT\",\n    \"DIRECTION_UP\",\n    \"DISABLED\",\n    \"DISPATCH_REQUEST_ERR\",\n    \"DITHER\",\n    \"DOCUMENT_FRAGMENT_NODE\",\n    \"DOCUMENT_NODE\",\n    \"DOCUMENT_POSITION_CONTAINED_BY\",\n    \"DOCUMENT_POSITION_CONTAINS\",\n    \"DOCUMENT_POSITION_DISCONNECTED\",\n    \"DOCUMENT_POSITION_FOLLOWING\",\n    \"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\",\n    \"DOCUMENT_POSITION_PRECEDING\",\n    \"DOCUMENT_TYPE_NODE\",\n    \"DOMCursor\",\n    \"DOMError\",\n    \"DOMException\",\n    \"DOMImplementation\",\n    \"DOMImplementationLS\",\n    \"DOMMatrix\",\n    \"DOMMatrixReadOnly\",\n    \"DOMParser\",\n    \"DOMPoint\",\n    \"DOMPointReadOnly\",\n    \"DOMQuad\",\n    \"DOMRect\",\n    \"DOMRectList\",\n    \"DOMRectReadOnly\",\n    \"DOMRequest\",\n    \"DOMSTRING_SIZE_ERR\",\n    \"DOMSettableTokenList\",\n    \"DOMStringList\",\n    \"DOMStringMap\",\n    \"DOMTokenList\",\n    \"DOMTransactionEvent\",\n    \"DOM_DELTA_LINE\",\n    \"DOM_DELTA_PAGE\",\n    \"DOM_DELTA_PIXEL\",\n    \"DOM_INPUT_METHOD_DROP\",\n    \"DOM_INPUT_METHOD_HANDWRITING\",\n    \"DOM_INPUT_METHOD_IME\",\n    \"DOM_INPUT_METHOD_KEYBOARD\",\n    \"DOM_INPUT_METHOD_MULTIMODAL\",\n    \"DOM_INPUT_METHOD_OPTION\",\n    \"DOM_INPUT_METHOD_PASTE\",\n    \"DOM_INPUT_METHOD_SCRIPT\",\n    \"DOM_INPUT_METHOD_UNKNOWN\",\n    \"DOM_INPUT_METHOD_VOICE\",\n    \"DOM_KEY_LOCATION_JOYSTICK\",\n    \"DOM_KEY_LOCATION_LEFT\",\n    \"DOM_KEY_LOCATION_MOBILE\",\n    \"DOM_KEY_LOCATION_NUMPAD\",\n    \"DOM_KEY_LOCATION_RIGHT\",\n    \"DOM_KEY_LOCATION_STANDARD\",\n    \"DOM_VK_0\",\n    \"DOM_VK_1\",\n    \"DOM_VK_2\",\n    \"DOM_VK_3\",\n    \"DOM_VK_4\",\n    \"DOM_VK_5\",\n    \"DOM_VK_6\",\n    \"DOM_VK_7\",\n    \"DOM_VK_8\",\n    \"DOM_VK_9\",\n    \"DOM_VK_A\",\n    \"DOM_VK_ACCEPT\",\n    \"DOM_VK_ADD\",\n    \"DOM_VK_ALT\",\n    \"DOM_VK_ALTGR\",\n    \"DOM_VK_AMPERSAND\",\n    \"DOM_VK_ASTERISK\",\n    \"DOM_VK_AT\",\n    \"DOM_VK_ATTN\",\n    \"DOM_VK_B\",\n    \"DOM_VK_BACKSPACE\",\n    \"DOM_VK_BACK_QUOTE\",\n    \"DOM_VK_BACK_SLASH\",\n    \"DOM_VK_BACK_SPACE\",\n    \"DOM_VK_C\",\n    \"DOM_VK_CANCEL\",\n    \"DOM_VK_CAPS_LOCK\",\n    \"DOM_VK_CIRCUMFLEX\",\n    \"DOM_VK_CLEAR\",\n    \"DOM_VK_CLOSE_BRACKET\",\n    \"DOM_VK_CLOSE_CURLY_BRACKET\",\n    \"DOM_VK_CLOSE_PAREN\",\n    \"DOM_VK_COLON\",\n    \"DOM_VK_COMMA\",\n    \"DOM_VK_CONTEXT_MENU\",\n    \"DOM_VK_CONTROL\",\n    \"DOM_VK_CONVERT\",\n    \"DOM_VK_CRSEL\",\n    \"DOM_VK_CTRL\",\n    \"DOM_VK_D\",\n    \"DOM_VK_DECIMAL\",\n    \"DOM_VK_DELETE\",\n    \"DOM_VK_DIVIDE\",\n    \"DOM_VK_DOLLAR\",\n    \"DOM_VK_DOUBLE_QUOTE\",\n    \"DOM_VK_DOWN\",\n    \"DOM_VK_E\",\n    \"DOM_VK_EISU\",\n    \"DOM_VK_END\",\n    \"DOM_VK_ENTER\",\n    \"DOM_VK_EQUALS\",\n    \"DOM_VK_EREOF\",\n    \"DOM_VK_ESCAPE\",\n    \"DOM_VK_EXCLAMATION\",\n    \"DOM_VK_EXECUTE\",\n    \"DOM_VK_EXSEL\",\n    \"DOM_VK_F\",\n    \"DOM_VK_F1\",\n    \"DOM_VK_F10\",\n    \"DOM_VK_F11\",\n    \"DOM_VK_F12\",\n    \"DOM_VK_F13\",\n    \"DOM_VK_F14\",\n    \"DOM_VK_F15\",\n    \"DOM_VK_F16\",\n    \"DOM_VK_F17\",\n    \"DOM_VK_F18\",\n    \"DOM_VK_F19\",\n    \"DOM_VK_F2\",\n    \"DOM_VK_F20\",\n    \"DOM_VK_F21\",\n    \"DOM_VK_F22\",\n    \"DOM_VK_F23\",\n    \"DOM_VK_F24\",\n    \"DOM_VK_F25\",\n    \"DOM_VK_F26\",\n    \"DOM_VK_F27\",\n    \"DOM_VK_F28\",\n    \"DOM_VK_F29\",\n    \"DOM_VK_F3\",\n    \"DOM_VK_F30\",\n    \"DOM_VK_F31\",\n    \"DOM_VK_F32\",\n    \"DOM_VK_F33\",\n    \"DOM_VK_F34\",\n    \"DOM_VK_F35\",\n    \"DOM_VK_F36\",\n    \"DOM_VK_F4\",\n    \"DOM_VK_F5\",\n    \"DOM_VK_F6\",\n    \"DOM_VK_F7\",\n    \"DOM_VK_F8\",\n    \"DOM_VK_F9\",\n    \"DOM_VK_FINAL\",\n    \"DOM_VK_FRONT\",\n    \"DOM_VK_G\",\n    \"DOM_VK_GREATER_THAN\",\n    \"DOM_VK_H\",\n    \"DOM_VK_HANGUL\",\n    \"DOM_VK_HANJA\",\n    \"DOM_VK_HASH\",\n    \"DOM_VK_HELP\",\n    \"DOM_VK_HK_TOGGLE\",\n    \"DOM_VK_HOME\",\n    \"DOM_VK_HYPHEN_MINUS\",\n    \"DOM_VK_I\",\n    \"DOM_VK_INSERT\",\n    \"DOM_VK_J\",\n    \"DOM_VK_JUNJA\",\n    \"DOM_VK_K\",\n    \"DOM_VK_KANA\",\n    \"DOM_VK_KANJI\",\n    \"DOM_VK_L\",\n    \"DOM_VK_LEFT\",\n    \"DOM_VK_LEFT_TAB\",\n    \"DOM_VK_LESS_THAN\",\n    \"DOM_VK_M\",\n    \"DOM_VK_META\",\n    \"DOM_VK_MODECHANGE\",\n    \"DOM_VK_MULTIPLY\",\n    \"DOM_VK_N\",\n    \"DOM_VK_NONCONVERT\",\n    \"DOM_VK_NUMPAD0\",\n    \"DOM_VK_NUMPAD1\",\n    \"DOM_VK_NUMPAD2\",\n    \"DOM_VK_NUMPAD3\",\n    \"DOM_VK_NUMPAD4\",\n    \"DOM_VK_NUMPAD5\",\n    \"DOM_VK_NUMPAD6\",\n    \"DOM_VK_NUMPAD7\",\n    \"DOM_VK_NUMPAD8\",\n    \"DOM_VK_NUMPAD9\",\n    \"DOM_VK_NUM_LOCK\",\n    \"DOM_VK_O\",\n    \"DOM_VK_OEM_1\",\n    \"DOM_VK_OEM_102\",\n    \"DOM_VK_OEM_2\",\n    \"DOM_VK_OEM_3\",\n    \"DOM_VK_OEM_4\",\n    \"DOM_VK_OEM_5\",\n    \"DOM_VK_OEM_6\",\n    \"DOM_VK_OEM_7\",\n    \"DOM_VK_OEM_8\",\n    \"DOM_VK_OEM_COMMA\",\n    \"DOM_VK_OEM_MINUS\",\n    \"DOM_VK_OEM_PERIOD\",\n    \"DOM_VK_OEM_PLUS\",\n    \"DOM_VK_OPEN_BRACKET\",\n    \"DOM_VK_OPEN_CURLY_BRACKET\",\n    \"DOM_VK_OPEN_PAREN\",\n    \"DOM_VK_P\",\n    \"DOM_VK_PA1\",\n    \"DOM_VK_PAGEDOWN\",\n    \"DOM_VK_PAGEUP\",\n    \"DOM_VK_PAGE_DOWN\",\n    \"DOM_VK_PAGE_UP\",\n    \"DOM_VK_PAUSE\",\n    \"DOM_VK_PERCENT\",\n    \"DOM_VK_PERIOD\",\n    \"DOM_VK_PIPE\",\n    \"DOM_VK_PLAY\",\n    \"DOM_VK_PLUS\",\n    \"DOM_VK_PRINT\",\n    \"DOM_VK_PRINTSCREEN\",\n    \"DOM_VK_PROCESSKEY\",\n    \"DOM_VK_PROPERITES\",\n    \"DOM_VK_Q\",\n    \"DOM_VK_QUESTION_MARK\",\n    \"DOM_VK_QUOTE\",\n    \"DOM_VK_R\",\n    \"DOM_VK_REDO\",\n    \"DOM_VK_RETURN\",\n    \"DOM_VK_RIGHT\",\n    \"DOM_VK_S\",\n    \"DOM_VK_SCROLL_LOCK\",\n    \"DOM_VK_SELECT\",\n    \"DOM_VK_SEMICOLON\",\n    \"DOM_VK_SEPARATOR\",\n    \"DOM_VK_SHIFT\",\n    \"DOM_VK_SLASH\",\n    \"DOM_VK_SLEEP\",\n    \"DOM_VK_SPACE\",\n    \"DOM_VK_SUBTRACT\",\n    \"DOM_VK_T\",\n    \"DOM_VK_TAB\",\n    \"DOM_VK_TILDE\",\n    \"DOM_VK_U\",\n    \"DOM_VK_UNDERSCORE\",\n    \"DOM_VK_UNDO\",\n    \"DOM_VK_UNICODE\",\n    \"DOM_VK_UP\",\n    \"DOM_VK_V\",\n    \"DOM_VK_VOLUME_DOWN\",\n    \"DOM_VK_VOLUME_MUTE\",\n    \"DOM_VK_VOLUME_UP\",\n    \"DOM_VK_W\",\n    \"DOM_VK_WIN\",\n    \"DOM_VK_WINDOW\",\n    \"DOM_VK_WIN_ICO_00\",\n    \"DOM_VK_WIN_ICO_CLEAR\",\n    \"DOM_VK_WIN_ICO_HELP\",\n    \"DOM_VK_WIN_OEM_ATTN\",\n    \"DOM_VK_WIN_OEM_AUTO\",\n    \"DOM_VK_WIN_OEM_BACKTAB\",\n    \"DOM_VK_WIN_OEM_CLEAR\",\n    \"DOM_VK_WIN_OEM_COPY\",\n    \"DOM_VK_WIN_OEM_CUSEL\",\n    \"DOM_VK_WIN_OEM_ENLW\",\n    \"DOM_VK_WIN_OEM_FINISH\",\n    \"DOM_VK_WIN_OEM_FJ_JISHO\",\n    \"DOM_VK_WIN_OEM_FJ_LOYA\",\n    \"DOM_VK_WIN_OEM_FJ_MASSHOU\",\n    \"DOM_VK_WIN_OEM_FJ_ROYA\",\n    \"DOM_VK_WIN_OEM_FJ_TOUROKU\",\n    \"DOM_VK_WIN_OEM_JUMP\",\n    \"DOM_VK_WIN_OEM_PA1\",\n    \"DOM_VK_WIN_OEM_PA2\",\n    \"DOM_VK_WIN_OEM_PA3\",\n    \"DOM_VK_WIN_OEM_RESET\",\n    \"DOM_VK_WIN_OEM_WSCTRL\",\n    \"DOM_VK_X\",\n    \"DOM_VK_XF86XK_ADD_FAVORITE\",\n    \"DOM_VK_XF86XK_APPLICATION_LEFT\",\n    \"DOM_VK_XF86XK_APPLICATION_RIGHT\",\n    \"DOM_VK_XF86XK_AUDIO_CYCLE_TRACK\",\n    \"DOM_VK_XF86XK_AUDIO_FORWARD\",\n    \"DOM_VK_XF86XK_AUDIO_LOWER_VOLUME\",\n    \"DOM_VK_XF86XK_AUDIO_MEDIA\",\n    \"DOM_VK_XF86XK_AUDIO_MUTE\",\n    \"DOM_VK_XF86XK_AUDIO_NEXT\",\n    \"DOM_VK_XF86XK_AUDIO_PAUSE\",\n    \"DOM_VK_XF86XK_AUDIO_PLAY\",\n    \"DOM_VK_XF86XK_AUDIO_PREV\",\n    \"DOM_VK_XF86XK_AUDIO_RAISE_VOLUME\",\n    \"DOM_VK_XF86XK_AUDIO_RANDOM_PLAY\",\n    \"DOM_VK_XF86XK_AUDIO_RECORD\",\n    \"DOM_VK_XF86XK_AUDIO_REPEAT\",\n    \"DOM_VK_XF86XK_AUDIO_REWIND\",\n    \"DOM_VK_XF86XK_AUDIO_STOP\",\n    \"DOM_VK_XF86XK_AWAY\",\n    \"DOM_VK_XF86XK_BACK\",\n    \"DOM_VK_XF86XK_BACK_FORWARD\",\n    \"DOM_VK_XF86XK_BATTERY\",\n    \"DOM_VK_XF86XK_BLUE\",\n    \"DOM_VK_XF86XK_BLUETOOTH\",\n    \"DOM_VK_XF86XK_BOOK\",\n    \"DOM_VK_XF86XK_BRIGHTNESS_ADJUST\",\n    \"DOM_VK_XF86XK_CALCULATOR\",\n    \"DOM_VK_XF86XK_CALENDAR\",\n    \"DOM_VK_XF86XK_CD\",\n    \"DOM_VK_XF86XK_CLOSE\",\n    \"DOM_VK_XF86XK_COMMUNITY\",\n    \"DOM_VK_XF86XK_CONTRAST_ADJUST\",\n    \"DOM_VK_XF86XK_COPY\",\n    \"DOM_VK_XF86XK_CUT\",\n    \"DOM_VK_XF86XK_CYCLE_ANGLE\",\n    \"DOM_VK_XF86XK_DISPLAY\",\n    \"DOM_VK_XF86XK_DOCUMENTS\",\n    \"DOM_VK_XF86XK_DOS\",\n    \"DOM_VK_XF86XK_EJECT\",\n    \"DOM_VK_XF86XK_EXCEL\",\n    \"DOM_VK_XF86XK_EXPLORER\",\n    \"DOM_VK_XF86XK_FAVORITES\",\n    \"DOM_VK_XF86XK_FINANCE\",\n    \"DOM_VK_XF86XK_FORWARD\",\n    \"DOM_VK_XF86XK_FRAME_BACK\",\n    \"DOM_VK_XF86XK_FRAME_FORWARD\",\n    \"DOM_VK_XF86XK_GAME\",\n    \"DOM_VK_XF86XK_GO\",\n    \"DOM_VK_XF86XK_GREEN\",\n    \"DOM_VK_XF86XK_HIBERNATE\",\n    \"DOM_VK_XF86XK_HISTORY\",\n    \"DOM_VK_XF86XK_HOME_PAGE\",\n    \"DOM_VK_XF86XK_HOT_LINKS\",\n    \"DOM_VK_XF86XK_I_TOUCH\",\n    \"DOM_VK_XF86XK_KBD_BRIGHTNESS_DOWN\",\n    \"DOM_VK_XF86XK_KBD_BRIGHTNESS_UP\",\n    \"DOM_VK_XF86XK_KBD_LIGHT_ON_OFF\",\n    \"DOM_VK_XF86XK_LAUNCH0\",\n    \"DOM_VK_XF86XK_LAUNCH1\",\n    \"DOM_VK_XF86XK_LAUNCH2\",\n    \"DOM_VK_XF86XK_LAUNCH3\",\n    \"DOM_VK_XF86XK_LAUNCH4\",\n    \"DOM_VK_XF86XK_LAUNCH5\",\n    \"DOM_VK_XF86XK_LAUNCH6\",\n    \"DOM_VK_XF86XK_LAUNCH7\",\n    \"DOM_VK_XF86XK_LAUNCH8\",\n    \"DOM_VK_XF86XK_LAUNCH9\",\n    \"DOM_VK_XF86XK_LAUNCH_A\",\n    \"DOM_VK_XF86XK_LAUNCH_B\",\n    \"DOM_VK_XF86XK_LAUNCH_C\",\n    \"DOM_VK_XF86XK_LAUNCH_D\",\n    \"DOM_VK_XF86XK_LAUNCH_E\",\n    \"DOM_VK_XF86XK_LAUNCH_F\",\n    \"DOM_VK_XF86XK_LIGHT_BULB\",\n    \"DOM_VK_XF86XK_LOG_OFF\",\n    \"DOM_VK_XF86XK_MAIL\",\n    \"DOM_VK_XF86XK_MAIL_FORWARD\",\n    \"DOM_VK_XF86XK_MARKET\",\n    \"DOM_VK_XF86XK_MEETING\",\n    \"DOM_VK_XF86XK_MEMO\",\n    \"DOM_VK_XF86XK_MENU_KB\",\n    \"DOM_VK_XF86XK_MENU_PB\",\n    \"DOM_VK_XF86XK_MESSENGER\",\n    \"DOM_VK_XF86XK_MON_BRIGHTNESS_DOWN\",\n    \"DOM_VK_XF86XK_MON_BRIGHTNESS_UP\",\n    \"DOM_VK_XF86XK_MUSIC\",\n    \"DOM_VK_XF86XK_MY_COMPUTER\",\n    \"DOM_VK_XF86XK_MY_SITES\",\n    \"DOM_VK_XF86XK_NEW\",\n    \"DOM_VK_XF86XK_NEWS\",\n    \"DOM_VK_XF86XK_OFFICE_HOME\",\n    \"DOM_VK_XF86XK_OPEN\",\n    \"DOM_VK_XF86XK_OPEN_URL\",\n    \"DOM_VK_XF86XK_OPTION\",\n    \"DOM_VK_XF86XK_PASTE\",\n    \"DOM_VK_XF86XK_PHONE\",\n    \"DOM_VK_XF86XK_PICTURES\",\n    \"DOM_VK_XF86XK_POWER_DOWN\",\n    \"DOM_VK_XF86XK_POWER_OFF\",\n    \"DOM_VK_XF86XK_RED\",\n    \"DOM_VK_XF86XK_REFRESH\",\n    \"DOM_VK_XF86XK_RELOAD\",\n    \"DOM_VK_XF86XK_REPLY\",\n    \"DOM_VK_XF86XK_ROCKER_DOWN\",\n    \"DOM_VK_XF86XK_ROCKER_ENTER\",\n    \"DOM_VK_XF86XK_ROCKER_UP\",\n    \"DOM_VK_XF86XK_ROTATE_WINDOWS\",\n    \"DOM_VK_XF86XK_ROTATION_KB\",\n    \"DOM_VK_XF86XK_ROTATION_PB\",\n    \"DOM_VK_XF86XK_SAVE\",\n    \"DOM_VK_XF86XK_SCREEN_SAVER\",\n    \"DOM_VK_XF86XK_SCROLL_CLICK\",\n    \"DOM_VK_XF86XK_SCROLL_DOWN\",\n    \"DOM_VK_XF86XK_SCROLL_UP\",\n    \"DOM_VK_XF86XK_SEARCH\",\n    \"DOM_VK_XF86XK_SEND\",\n    \"DOM_VK_XF86XK_SHOP\",\n    \"DOM_VK_XF86XK_SPELL\",\n    \"DOM_VK_XF86XK_SPLIT_SCREEN\",\n    \"DOM_VK_XF86XK_STANDBY\",\n    \"DOM_VK_XF86XK_START\",\n    \"DOM_VK_XF86XK_STOP\",\n    \"DOM_VK_XF86XK_SUBTITLE\",\n    \"DOM_VK_XF86XK_SUPPORT\",\n    \"DOM_VK_XF86XK_SUSPEND\",\n    \"DOM_VK_XF86XK_TASK_PANE\",\n    \"DOM_VK_XF86XK_TERMINAL\",\n    \"DOM_VK_XF86XK_TIME\",\n    \"DOM_VK_XF86XK_TOOLS\",\n    \"DOM_VK_XF86XK_TOP_MENU\",\n    \"DOM_VK_XF86XK_TO_DO_LIST\",\n    \"DOM_VK_XF86XK_TRAVEL\",\n    \"DOM_VK_XF86XK_USER1KB\",\n    \"DOM_VK_XF86XK_USER2KB\",\n    \"DOM_VK_XF86XK_USER_PB\",\n    \"DOM_VK_XF86XK_UWB\",\n    \"DOM_VK_XF86XK_VENDOR_HOME\",\n    \"DOM_VK_XF86XK_VIDEO\",\n    \"DOM_VK_XF86XK_VIEW\",\n    \"DOM_VK_XF86XK_WAKE_UP\",\n    \"DOM_VK_XF86XK_WEB_CAM\",\n    \"DOM_VK_XF86XK_WHEEL_BUTTON\",\n    \"DOM_VK_XF86XK_WLAN\",\n    \"DOM_VK_XF86XK_WORD\",\n    \"DOM_VK_XF86XK_WWW\",\n    \"DOM_VK_XF86XK_XFER\",\n    \"DOM_VK_XF86XK_YELLOW\",\n    \"DOM_VK_XF86XK_ZOOM_IN\",\n    \"DOM_VK_XF86XK_ZOOM_OUT\",\n    \"DOM_VK_Y\",\n    \"DOM_VK_Z\",\n    \"DOM_VK_ZOOM\",\n    \"DONE\",\n    \"DONT_CARE\",\n    \"DOWNLOADING\",\n    \"DRAGDROP\",\n    \"DRAW_BUFFER0\",\n    \"DRAW_BUFFER1\",\n    \"DRAW_BUFFER10\",\n    \"DRAW_BUFFER11\",\n    \"DRAW_BUFFER12\",\n    \"DRAW_BUFFER13\",\n    \"DRAW_BUFFER14\",\n    \"DRAW_BUFFER15\",\n    \"DRAW_BUFFER2\",\n    \"DRAW_BUFFER3\",\n    \"DRAW_BUFFER4\",\n    \"DRAW_BUFFER5\",\n    \"DRAW_BUFFER6\",\n    \"DRAW_BUFFER7\",\n    \"DRAW_BUFFER8\",\n    \"DRAW_BUFFER9\",\n    \"DRAW_FRAMEBUFFER\",\n    \"DRAW_FRAMEBUFFER_BINDING\",\n    \"DST_ALPHA\",\n    \"DST_COLOR\",\n    \"DYNAMIC_COPY\",\n    \"DYNAMIC_DRAW\",\n    \"DYNAMIC_READ\",\n    \"DataChannel\",\n    \"DataTransfer\",\n    \"DataTransferItem\",\n    \"DataTransferItemList\",\n    \"DataView\",\n    \"Date\",\n    \"DateTimeFormat\",\n    \"DecompressionStream\",\n    \"DelayNode\",\n    \"DeprecationReportBody\",\n    \"DesktopNotification\",\n    \"DesktopNotificationCenter\",\n    \"DeviceLightEvent\",\n    \"DeviceMotionEvent\",\n    \"DeviceMotionEventAcceleration\",\n    \"DeviceMotionEventRotationRate\",\n    \"DeviceOrientationEvent\",\n    \"DeviceProximityEvent\",\n    \"DeviceStorage\",\n    \"DeviceStorageChangeEvent\",\n    \"Directory\",\n    \"DisplayNames\",\n    \"Document\",\n    \"DocumentFragment\",\n    \"DocumentTimeline\",\n    \"DocumentType\",\n    \"DragEvent\",\n    \"DynamicsCompressorNode\",\n    \"E\",\n    \"ELEMENT_ARRAY_BUFFER\",\n    \"ELEMENT_ARRAY_BUFFER_BINDING\",\n    \"ELEMENT_NODE\",\n    \"EMPTY\",\n    \"ENCODING_ERR\",\n    \"ENDED\",\n    \"END_TO_END\",\n    \"END_TO_START\",\n    \"ENTITY_NODE\",\n    \"ENTITY_REFERENCE_NODE\",\n    \"EPSILON\",\n    \"EQUAL\",\n    \"EQUALPOWER\",\n    \"ERROR\",\n    \"EXPONENTIAL_DISTANCE\",\n    \"Element\",\n    \"ElementInternals\",\n    \"ElementQuery\",\n    \"EnterPictureInPictureEvent\",\n    \"Entity\",\n    \"EntityReference\",\n    \"Error\",\n    \"ErrorEvent\",\n    \"EvalError\",\n    \"Event\",\n    \"EventException\",\n    \"EventSource\",\n    \"EventTarget\",\n    \"External\",\n    \"FASTEST\",\n    \"FIDOSDK\",\n    \"FILTER_ACCEPT\",\n    \"FILTER_INTERRUPT\",\n    \"FILTER_REJECT\",\n    \"FILTER_SKIP\",\n    \"FINISHED_STATE\",\n    \"FIRST_ORDERED_NODE_TYPE\",\n    \"FLOAT\",\n    \"FLOAT_32_UNSIGNED_INT_24_8_REV\",\n    \"FLOAT_MAT2\",\n    \"FLOAT_MAT2x3\",\n    \"FLOAT_MAT2x4\",\n    \"FLOAT_MAT3\",\n    \"FLOAT_MAT3x2\",\n    \"FLOAT_MAT3x4\",\n    \"FLOAT_MAT4\",\n    \"FLOAT_MAT4x2\",\n    \"FLOAT_MAT4x3\",\n    \"FLOAT_VEC2\",\n    \"FLOAT_VEC3\",\n    \"FLOAT_VEC4\",\n    \"FOCUS\",\n    \"FONT_FACE_RULE\",\n    \"FONT_FEATURE_VALUES_RULE\",\n    \"FRAGMENT_SHADER\",\n    \"FRAGMENT_SHADER_DERIVATIVE_HINT\",\n    \"FRAGMENT_SHADER_DERIVATIVE_HINT_OES\",\n    \"FRAMEBUFFER\",\n    \"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE\",\n    \"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE\",\n    \"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING\",\n    \"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\",\n    \"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE\",\n    \"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE\",\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\",\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\",\n    \"FRAMEBUFFER_ATTACHMENT_RED_SIZE\",\n    \"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\",\n    \"FRAMEBUFFER_BINDING\",\n    \"FRAMEBUFFER_COMPLETE\",\n    \"FRAMEBUFFER_DEFAULT\",\n    \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\",\n    \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\",\n    \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\",\n    \"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE\",\n    \"FRAMEBUFFER_UNSUPPORTED\",\n    \"FRONT\",\n    \"FRONT_AND_BACK\",\n    \"FRONT_FACE\",\n    \"FUNC_ADD\",\n    \"FUNC_REVERSE_SUBTRACT\",\n    \"FUNC_SUBTRACT\",\n    \"FeaturePolicy\",\n    \"FeaturePolicyViolationReportBody\",\n    \"FederatedCredential\",\n    \"Feed\",\n    \"FeedEntry\",\n    \"File\",\n    \"FileError\",\n    \"FileList\",\n    \"FileReader\",\n    \"FileSystem\",\n    \"FileSystemDirectoryEntry\",\n    \"FileSystemDirectoryReader\",\n    \"FileSystemEntry\",\n    \"FileSystemFileEntry\",\n    \"FinalizationRegistry\",\n    \"FindInPage\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"FocusEvent\",\n    \"FontFace\",\n    \"FontFaceSet\",\n    \"FontFaceSetLoadEvent\",\n    \"FormData\",\n    \"FormDataEvent\",\n    \"FragmentDirective\",\n    \"Function\",\n    \"GENERATE_MIPMAP_HINT\",\n    \"GEQUAL\",\n    \"GREATER\",\n    \"GREEN_BITS\",\n    \"GainNode\",\n    \"Gamepad\",\n    \"GamepadAxisMoveEvent\",\n    \"GamepadButton\",\n    \"GamepadButtonEvent\",\n    \"GamepadEvent\",\n    \"GamepadHapticActuator\",\n    \"GamepadPose\",\n    \"Geolocation\",\n    \"GeolocationCoordinates\",\n    \"GeolocationPosition\",\n    \"GeolocationPositionError\",\n    \"GestureEvent\",\n    \"Global\",\n    \"Gyroscope\",\n    \"HALF_FLOAT\",\n    \"HAVE_CURRENT_DATA\",\n    \"HAVE_ENOUGH_DATA\",\n    \"HAVE_FUTURE_DATA\",\n    \"HAVE_METADATA\",\n    \"HAVE_NOTHING\",\n    \"HEADERS_RECEIVED\",\n    \"HIDDEN\",\n    \"HIERARCHY_REQUEST_ERR\",\n    \"HIGHPASS\",\n    \"HIGHSHELF\",\n    \"HIGH_FLOAT\",\n    \"HIGH_INT\",\n    \"HORIZONTAL\",\n    \"HORIZONTAL_AXIS\",\n    \"HRTF\",\n    \"HTMLAllCollection\",\n    \"HTMLAnchorElement\",\n    \"HTMLAppletElement\",\n    \"HTMLAreaElement\",\n    \"HTMLAudioElement\",\n    \"HTMLBRElement\",\n    \"HTMLBaseElement\",\n    \"HTMLBaseFontElement\",\n    \"HTMLBlockquoteElement\",\n    \"HTMLBodyElement\",\n    \"HTMLButtonElement\",\n    \"HTMLCanvasElement\",\n    \"HTMLCollection\",\n    \"HTMLCommandElement\",\n    \"HTMLContentElement\",\n    \"HTMLDListElement\",\n    \"HTMLDataElement\",\n    \"HTMLDataListElement\",\n    \"HTMLDetailsElement\",\n    \"HTMLDialogElement\",\n    \"HTMLDirectoryElement\",\n    \"HTMLDivElement\",\n    \"HTMLDocument\",\n    \"HTMLElement\",\n    \"HTMLEmbedElement\",\n    \"HTMLFieldSetElement\",\n    \"HTMLFontElement\",\n    \"HTMLFormControlsCollection\",\n    \"HTMLFormElement\",\n    \"HTMLFrameElement\",\n    \"HTMLFrameSetElement\",\n    \"HTMLHRElement\",\n    \"HTMLHeadElement\",\n    \"HTMLHeadingElement\",\n    \"HTMLHtmlElement\",\n    \"HTMLIFrameElement\",\n    \"HTMLImageElement\",\n    \"HTMLInputElement\",\n    \"HTMLIsIndexElement\",\n    \"HTMLKeygenElement\",\n    \"HTMLLIElement\",\n    \"HTMLLabelElement\",\n    \"HTMLLegendElement\",\n    \"HTMLLinkElement\",\n    \"HTMLMapElement\",\n    \"HTMLMarqueeElement\",\n    \"HTMLMediaElement\",\n    \"HTMLMenuElement\",\n    \"HTMLMenuItemElement\",\n    \"HTMLMetaElement\",\n    \"HTMLMeterElement\",\n    \"HTMLModElement\",\n    \"HTMLOListElement\",\n    \"HTMLObjectElement\",\n    \"HTMLOptGroupElement\",\n    \"HTMLOptionElement\",\n    \"HTMLOptionsCollection\",\n    \"HTMLOutputElement\",\n    \"HTMLParagraphElement\",\n    \"HTMLParamElement\",\n    \"HTMLPictureElement\",\n    \"HTMLPreElement\",\n    \"HTMLProgressElement\",\n    \"HTMLPropertiesCollection\",\n    \"HTMLQuoteElement\",\n    \"HTMLScriptElement\",\n    \"HTMLSelectElement\",\n    \"HTMLShadowElement\",\n    \"HTMLSlotElement\",\n    \"HTMLSourceElement\",\n    \"HTMLSpanElement\",\n    \"HTMLStyleElement\",\n    \"HTMLTableCaptionElement\",\n    \"HTMLTableCellElement\",\n    \"HTMLTableColElement\",\n    \"HTMLTableElement\",\n    \"HTMLTableRowElement\",\n    \"HTMLTableSectionElement\",\n    \"HTMLTemplateElement\",\n    \"HTMLTextAreaElement\",\n    \"HTMLTimeElement\",\n    \"HTMLTitleElement\",\n    \"HTMLTrackElement\",\n    \"HTMLUListElement\",\n    \"HTMLUnknownElement\",\n    \"HTMLVideoElement\",\n    \"HashChangeEvent\",\n    \"Headers\",\n    \"History\",\n    \"Hz\",\n    \"ICE_CHECKING\",\n    \"ICE_CLOSED\",\n    \"ICE_COMPLETED\",\n    \"ICE_CONNECTED\",\n    \"ICE_FAILED\",\n    \"ICE_GATHERING\",\n    \"ICE_WAITING\",\n    \"IDBCursor\",\n    \"IDBCursorWithValue\",\n    \"IDBDatabase\",\n    \"IDBDatabaseException\",\n    \"IDBFactory\",\n    \"IDBFileHandle\",\n    \"IDBFileRequest\",\n    \"IDBIndex\",\n    \"IDBKeyRange\",\n    \"IDBMutableFile\",\n    \"IDBObjectStore\",\n    \"IDBOpenDBRequest\",\n    \"IDBRequest\",\n    \"IDBTransaction\",\n    \"IDBVersionChangeEvent\",\n    \"IDLE\",\n    \"IIRFilterNode\",\n    \"IMPLEMENTATION_COLOR_READ_FORMAT\",\n    \"IMPLEMENTATION_COLOR_READ_TYPE\",\n    \"IMPORT_RULE\",\n    \"INCR\",\n    \"INCR_WRAP\",\n    \"INDEX_SIZE_ERR\",\n    \"INT\",\n    \"INTERLEAVED_ATTRIBS\",\n    \"INT_2_10_10_10_REV\",\n    \"INT_SAMPLER_2D\",\n    \"INT_SAMPLER_2D_ARRAY\",\n    \"INT_SAMPLER_3D\",\n    \"INT_SAMPLER_CUBE\",\n    \"INT_VEC2\",\n    \"INT_VEC3\",\n    \"INT_VEC4\",\n    \"INUSE_ATTRIBUTE_ERR\",\n    \"INVALID_ACCESS_ERR\",\n    \"INVALID_CHARACTER_ERR\",\n    \"INVALID_ENUM\",\n    \"INVALID_EXPRESSION_ERR\",\n    \"INVALID_FRAMEBUFFER_OPERATION\",\n    \"INVALID_INDEX\",\n    \"INVALID_MODIFICATION_ERR\",\n    \"INVALID_NODE_TYPE_ERR\",\n    \"INVALID_OPERATION\",\n    \"INVALID_STATE_ERR\",\n    \"INVALID_VALUE\",\n    \"INVERSE_DISTANCE\",\n    \"INVERT\",\n    \"IceCandidate\",\n    \"IdleDeadline\",\n    \"Image\",\n    \"ImageBitmap\",\n    \"ImageBitmapRenderingContext\",\n    \"ImageCapture\",\n    \"ImageData\",\n    \"Infinity\",\n    \"InputDeviceCapabilities\",\n    \"InputDeviceInfo\",\n    \"InputEvent\",\n    \"InputMethodContext\",\n    \"InstallTrigger\",\n    \"InstallTriggerImpl\",\n    \"Instance\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Int8Array\",\n    \"Intent\",\n    \"InternalError\",\n    \"IntersectionObserver\",\n    \"IntersectionObserverEntry\",\n    \"Intl\",\n    \"IsSearchProviderInstalled\",\n    \"Iterator\",\n    \"JSON\",\n    \"KEEP\",\n    \"KEYDOWN\",\n    \"KEYFRAMES_RULE\",\n    \"KEYFRAME_RULE\",\n    \"KEYPRESS\",\n    \"KEYUP\",\n    \"KeyEvent\",\n    \"Keyboard\",\n    \"KeyboardEvent\",\n    \"KeyboardLayoutMap\",\n    \"KeyframeEffect\",\n    \"LENGTHADJUST_SPACING\",\n    \"LENGTHADJUST_SPACINGANDGLYPHS\",\n    \"LENGTHADJUST_UNKNOWN\",\n    \"LEQUAL\",\n    \"LESS\",\n    \"LINEAR\",\n    \"LINEAR_DISTANCE\",\n    \"LINEAR_MIPMAP_LINEAR\",\n    \"LINEAR_MIPMAP_NEAREST\",\n    \"LINES\",\n    \"LINE_LOOP\",\n    \"LINE_STRIP\",\n    \"LINE_WIDTH\",\n    \"LINK_STATUS\",\n    \"LIVE\",\n    \"LN10\",\n    \"LN2\",\n    \"LOADED\",\n    \"LOADING\",\n    \"LOG10E\",\n    \"LOG2E\",\n    \"LOWPASS\",\n    \"LOWSHELF\",\n    \"LOW_FLOAT\",\n    \"LOW_INT\",\n    \"LSException\",\n    \"LSParserFilter\",\n    \"LUMINANCE\",\n    \"LUMINANCE_ALPHA\",\n    \"LargestContentfulPaint\",\n    \"LayoutShift\",\n    \"LayoutShiftAttribution\",\n    \"LinearAccelerationSensor\",\n    \"LinkError\",\n    \"ListFormat\",\n    \"LocalMediaStream\",\n    \"Locale\",\n    \"Location\",\n    \"Lock\",\n    \"LockManager\",\n    \"MAX\",\n    \"MAX_3D_TEXTURE_SIZE\",\n    \"MAX_ARRAY_TEXTURE_LAYERS\",\n    \"MAX_CLIENT_WAIT_TIMEOUT_WEBGL\",\n    \"MAX_COLOR_ATTACHMENTS\",\n    \"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS\",\n    \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",\n    \"MAX_COMBINED_UNIFORM_BLOCKS\",\n    \"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS\",\n    \"MAX_CUBE_MAP_TEXTURE_SIZE\",\n    \"MAX_DRAW_BUFFERS\",\n    \"MAX_ELEMENTS_INDICES\",\n    \"MAX_ELEMENTS_VERTICES\",\n    \"MAX_ELEMENT_INDEX\",\n    \"MAX_FRAGMENT_INPUT_COMPONENTS\",\n    \"MAX_FRAGMENT_UNIFORM_BLOCKS\",\n    \"MAX_FRAGMENT_UNIFORM_COMPONENTS\",\n    \"MAX_FRAGMENT_UNIFORM_VECTORS\",\n    \"MAX_PROGRAM_TEXEL_OFFSET\",\n    \"MAX_RENDERBUFFER_SIZE\",\n    \"MAX_SAFE_INTEGER\",\n    \"MAX_SAMPLES\",\n    \"MAX_SERVER_WAIT_TIMEOUT\",\n    \"MAX_TEXTURE_IMAGE_UNITS\",\n    \"MAX_TEXTURE_LOD_BIAS\",\n    \"MAX_TEXTURE_MAX_ANISOTROPY_EXT\",\n    \"MAX_TEXTURE_SIZE\",\n    \"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS\",\n    \"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS\",\n    \"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS\",\n    \"MAX_UNIFORM_BLOCK_SIZE\",\n    \"MAX_UNIFORM_BUFFER_BINDINGS\",\n    \"MAX_VALUE\",\n    \"MAX_VARYING_COMPONENTS\",\n    \"MAX_VARYING_VECTORS\",\n    \"MAX_VERTEX_ATTRIBS\",\n    \"MAX_VERTEX_OUTPUT_COMPONENTS\",\n    \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",\n    \"MAX_VERTEX_UNIFORM_BLOCKS\",\n    \"MAX_VERTEX_UNIFORM_COMPONENTS\",\n    \"MAX_VERTEX_UNIFORM_VECTORS\",\n    \"MAX_VIEWPORT_DIMS\",\n    \"MEDIA_ERR_ABORTED\",\n    \"MEDIA_ERR_DECODE\",\n    \"MEDIA_ERR_ENCRYPTED\",\n    \"MEDIA_ERR_NETWORK\",\n    \"MEDIA_ERR_SRC_NOT_SUPPORTED\",\n    \"MEDIA_KEYERR_CLIENT\",\n    \"MEDIA_KEYERR_DOMAIN\",\n    \"MEDIA_KEYERR_HARDWARECHANGE\",\n    \"MEDIA_KEYERR_OUTPUT\",\n    \"MEDIA_KEYERR_SERVICE\",\n    \"MEDIA_KEYERR_UNKNOWN\",\n    \"MEDIA_RULE\",\n    \"MEDIUM_FLOAT\",\n    \"MEDIUM_INT\",\n    \"META_MASK\",\n    \"MIDIAccess\",\n    \"MIDIConnectionEvent\",\n    \"MIDIInput\",\n    \"MIDIInputMap\",\n    \"MIDIMessageEvent\",\n    \"MIDIOutput\",\n    \"MIDIOutputMap\",\n    \"MIDIPort\",\n    \"MIN\",\n    \"MIN_PROGRAM_TEXEL_OFFSET\",\n    \"MIN_SAFE_INTEGER\",\n    \"MIN_VALUE\",\n    \"MIRRORED_REPEAT\",\n    \"MODE_ASYNCHRONOUS\",\n    \"MODE_SYNCHRONOUS\",\n    \"MODIFICATION\",\n    \"MOUSEDOWN\",\n    \"MOUSEDRAG\",\n    \"MOUSEMOVE\",\n    \"MOUSEOUT\",\n    \"MOUSEOVER\",\n    \"MOUSEUP\",\n    \"MOZ_KEYFRAMES_RULE\",\n    \"MOZ_KEYFRAME_RULE\",\n    \"MOZ_SOURCE_CURSOR\",\n    \"MOZ_SOURCE_ERASER\",\n    \"MOZ_SOURCE_KEYBOARD\",\n    \"MOZ_SOURCE_MOUSE\",\n    \"MOZ_SOURCE_PEN\",\n    \"MOZ_SOURCE_TOUCH\",\n    \"MOZ_SOURCE_UNKNOWN\",\n    \"MSGESTURE_FLAG_BEGIN\",\n    \"MSGESTURE_FLAG_CANCEL\",\n    \"MSGESTURE_FLAG_END\",\n    \"MSGESTURE_FLAG_INERTIA\",\n    \"MSGESTURE_FLAG_NONE\",\n    \"MSPOINTER_TYPE_MOUSE\",\n    \"MSPOINTER_TYPE_PEN\",\n    \"MSPOINTER_TYPE_TOUCH\",\n    \"MS_ASYNC_CALLBACK_STATUS_ASSIGN_DELEGATE\",\n    \"MS_ASYNC_CALLBACK_STATUS_CANCEL\",\n    \"MS_ASYNC_CALLBACK_STATUS_CHOOSEANY\",\n    \"MS_ASYNC_CALLBACK_STATUS_ERROR\",\n    \"MS_ASYNC_CALLBACK_STATUS_JOIN\",\n    \"MS_ASYNC_OP_STATUS_CANCELED\",\n    \"MS_ASYNC_OP_STATUS_ERROR\",\n    \"MS_ASYNC_OP_STATUS_SUCCESS\",\n    \"MS_MANIPULATION_STATE_ACTIVE\",\n    \"MS_MANIPULATION_STATE_CANCELLED\",\n    \"MS_MANIPULATION_STATE_COMMITTED\",\n    \"MS_MANIPULATION_STATE_DRAGGING\",\n    \"MS_MANIPULATION_STATE_INERTIA\",\n    \"MS_MANIPULATION_STATE_PRESELECT\",\n    \"MS_MANIPULATION_STATE_SELECTING\",\n    \"MS_MANIPULATION_STATE_STOPPED\",\n    \"MS_MEDIA_ERR_ENCRYPTED\",\n    \"MS_MEDIA_KEYERR_CLIENT\",\n    \"MS_MEDIA_KEYERR_DOMAIN\",\n    \"MS_MEDIA_KEYERR_HARDWARECHANGE\",\n    \"MS_MEDIA_KEYERR_OUTPUT\",\n    \"MS_MEDIA_KEYERR_SERVICE\",\n    \"MS_MEDIA_KEYERR_UNKNOWN\",\n    \"Map\",\n    \"Math\",\n    \"MathMLElement\",\n    \"MediaCapabilities\",\n    \"MediaCapabilitiesInfo\",\n    \"MediaController\",\n    \"MediaDeviceInfo\",\n    \"MediaDevices\",\n    \"MediaElementAudioSourceNode\",\n    \"MediaEncryptedEvent\",\n    \"MediaError\",\n    \"MediaKeyError\",\n    \"MediaKeyEvent\",\n    \"MediaKeyMessageEvent\",\n    \"MediaKeyNeededEvent\",\n    \"MediaKeySession\",\n    \"MediaKeyStatusMap\",\n    \"MediaKeySystemAccess\",\n    \"MediaKeys\",\n    \"MediaList\",\n    \"MediaMetadata\",\n    \"MediaQueryList\",\n    \"MediaQueryListEvent\",\n    \"MediaRecorder\",\n    \"MediaRecorderErrorEvent\",\n    \"MediaSession\",\n    \"MediaSettingsRange\",\n    \"MediaSource\",\n    \"MediaStream\",\n    \"MediaStreamAudioDestinationNode\",\n    \"MediaStreamAudioSourceNode\",\n    \"MediaStreamEvent\",\n    \"MediaStreamTrack\",\n    \"MediaStreamTrackAudioSourceNode\",\n    \"MediaStreamTrackEvent\",\n    \"Memory\",\n    \"MessageChannel\",\n    \"MessageEvent\",\n    \"MessagePort\",\n    \"Methods\",\n    \"MimeType\",\n    \"MimeTypeArray\",\n    \"Module\",\n    \"MouseEvent\",\n    \"MouseScrollEvent\",\n    \"MozAnimation\",\n    \"MozAnimationDelay\",\n    \"MozAnimationDirection\",\n    \"MozAnimationDuration\",\n    \"MozAnimationFillMode\",\n    \"MozAnimationIterationCount\",\n    \"MozAnimationName\",\n    \"MozAnimationPlayState\",\n    \"MozAnimationTimingFunction\",\n    \"MozAppearance\",\n    \"MozBackfaceVisibility\",\n    \"MozBinding\",\n    \"MozBorderBottomColors\",\n    \"MozBorderEnd\",\n    \"MozBorderEndColor\",\n    \"MozBorderEndStyle\",\n    \"MozBorderEndWidth\",\n    \"MozBorderImage\",\n    \"MozBorderLeftColors\",\n    \"MozBorderRightColors\",\n    \"MozBorderStart\",\n    \"MozBorderStartColor\",\n    \"MozBorderStartStyle\",\n    \"MozBorderStartWidth\",\n    \"MozBorderTopColors\",\n    \"MozBoxAlign\",\n    \"MozBoxDirection\",\n    \"MozBoxFlex\",\n    \"MozBoxOrdinalGroup\",\n    \"MozBoxOrient\",\n    \"MozBoxPack\",\n    \"MozBoxSizing\",\n    \"MozCSSKeyframeRule\",\n    \"MozCSSKeyframesRule\",\n    \"MozColumnCount\",\n    \"MozColumnFill\",\n    \"MozColumnGap\",\n    \"MozColumnRule\",\n    \"MozColumnRuleColor\",\n    \"MozColumnRuleStyle\",\n    \"MozColumnRuleWidth\",\n    \"MozColumnWidth\",\n    \"MozColumns\",\n    \"MozContactChangeEvent\",\n    \"MozFloatEdge\",\n    \"MozFontFeatureSettings\",\n    \"MozFontLanguageOverride\",\n    \"MozForceBrokenImageIcon\",\n    \"MozHyphens\",\n    \"MozImageRegion\",\n    \"MozMarginEnd\",\n    \"MozMarginStart\",\n    \"MozMmsEvent\",\n    \"MozMmsMessage\",\n    \"MozMobileMessageThread\",\n    \"MozOSXFontSmoothing\",\n    \"MozOrient\",\n    \"MozOsxFontSmoothing\",\n    \"MozOutlineRadius\",\n    \"MozOutlineRadiusBottomleft\",\n    \"MozOutlineRadiusBottomright\",\n    \"MozOutlineRadiusTopleft\",\n    \"MozOutlineRadiusTopright\",\n    \"MozPaddingEnd\",\n    \"MozPaddingStart\",\n    \"MozPerspective\",\n    \"MozPerspectiveOrigin\",\n    \"MozPowerManager\",\n    \"MozSettingsEvent\",\n    \"MozSmsEvent\",\n    \"MozSmsMessage\",\n    \"MozStackSizing\",\n    \"MozTabSize\",\n    \"MozTextAlignLast\",\n    \"MozTextDecorationColor\",\n    \"MozTextDecorationLine\",\n    \"MozTextDecorationStyle\",\n    \"MozTextSizeAdjust\",\n    \"MozTransform\",\n    \"MozTransformOrigin\",\n    \"MozTransformStyle\",\n    \"MozTransition\",\n    \"MozTransitionDelay\",\n    \"MozTransitionDuration\",\n    \"MozTransitionProperty\",\n    \"MozTransitionTimingFunction\",\n    \"MozUserFocus\",\n    \"MozUserInput\",\n    \"MozUserModify\",\n    \"MozUserSelect\",\n    \"MozWindowDragging\",\n    \"MozWindowShadow\",\n    \"MutationEvent\",\n    \"MutationObserver\",\n    \"MutationRecord\",\n    \"NAMESPACE_ERR\",\n    \"NAMESPACE_RULE\",\n    \"NEAREST\",\n    \"NEAREST_MIPMAP_LINEAR\",\n    \"NEAREST_MIPMAP_NEAREST\",\n    \"NEGATIVE_INFINITY\",\n    \"NETWORK_EMPTY\",\n    \"NETWORK_ERR\",\n    \"NETWORK_IDLE\",\n    \"NETWORK_LOADED\",\n    \"NETWORK_LOADING\",\n    \"NETWORK_NO_SOURCE\",\n    \"NEVER\",\n    \"NEW\",\n    \"NEXT\",\n    \"NEXT_NO_DUPLICATE\",\n    \"NICEST\",\n    \"NODE_AFTER\",\n    \"NODE_BEFORE\",\n    \"NODE_BEFORE_AND_AFTER\",\n    \"NODE_INSIDE\",\n    \"NONE\",\n    \"NON_TRANSIENT_ERR\",\n    \"NOTATION_NODE\",\n    \"NOTCH\",\n    \"NOTEQUAL\",\n    \"NOT_ALLOWED_ERR\",\n    \"NOT_FOUND_ERR\",\n    \"NOT_READABLE_ERR\",\n    \"NOT_SUPPORTED_ERR\",\n    \"NO_DATA_ALLOWED_ERR\",\n    \"NO_ERR\",\n    \"NO_ERROR\",\n    \"NO_MODIFICATION_ALLOWED_ERR\",\n    \"NUMBER_TYPE\",\n    \"NUM_COMPRESSED_TEXTURE_FORMATS\",\n    \"NaN\",\n    \"NamedNodeMap\",\n    \"NavigationPreloadManager\",\n    \"Navigator\",\n    \"NearbyLinks\",\n    \"NetworkInformation\",\n    \"Node\",\n    \"NodeFilter\",\n    \"NodeIterator\",\n    \"NodeList\",\n    \"Notation\",\n    \"Notification\",\n    \"NotifyPaintEvent\",\n    \"Number\",\n    \"NumberFormat\",\n    \"OBJECT_TYPE\",\n    \"OBSOLETE\",\n    \"OK\",\n    \"ONE\",\n    \"ONE_MINUS_CONSTANT_ALPHA\",\n    \"ONE_MINUS_CONSTANT_COLOR\",\n    \"ONE_MINUS_DST_ALPHA\",\n    \"ONE_MINUS_DST_COLOR\",\n    \"ONE_MINUS_SRC_ALPHA\",\n    \"ONE_MINUS_SRC_COLOR\",\n    \"OPEN\",\n    \"OPENED\",\n    \"OPENING\",\n    \"ORDERED_NODE_ITERATOR_TYPE\",\n    \"ORDERED_NODE_SNAPSHOT_TYPE\",\n    \"OTHER_ERROR\",\n    \"OUT_OF_MEMORY\",\n    \"Object\",\n    \"OfflineAudioCompletionEvent\",\n    \"OfflineAudioContext\",\n    \"OfflineResourceList\",\n    \"OffscreenCanvas\",\n    \"OffscreenCanvasRenderingContext2D\",\n    \"Option\",\n    \"OrientationSensor\",\n    \"OscillatorNode\",\n    \"OverconstrainedError\",\n    \"OverflowEvent\",\n    \"PACK_ALIGNMENT\",\n    \"PACK_ROW_LENGTH\",\n    \"PACK_SKIP_PIXELS\",\n    \"PACK_SKIP_ROWS\",\n    \"PAGE_RULE\",\n    \"PARSE_ERR\",\n    \"PATHSEG_ARC_ABS\",\n    \"PATHSEG_ARC_REL\",\n    \"PATHSEG_CLOSEPATH\",\n    \"PATHSEG_CURVETO_CUBIC_ABS\",\n    \"PATHSEG_CURVETO_CUBIC_REL\",\n    \"PATHSEG_CURVETO_CUBIC_SMOOTH_ABS\",\n    \"PATHSEG_CURVETO_CUBIC_SMOOTH_REL\",\n    \"PATHSEG_CURVETO_QUADRATIC_ABS\",\n    \"PATHSEG_CURVETO_QUADRATIC_REL\",\n    \"PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS\",\n    \"PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL\",\n    \"PATHSEG_LINETO_ABS\",\n    \"PATHSEG_LINETO_HORIZONTAL_ABS\",\n    \"PATHSEG_LINETO_HORIZONTAL_REL\",\n    \"PATHSEG_LINETO_REL\",\n    \"PATHSEG_LINETO_VERTICAL_ABS\",\n    \"PATHSEG_LINETO_VERTICAL_REL\",\n    \"PATHSEG_MOVETO_ABS\",\n    \"PATHSEG_MOVETO_REL\",\n    \"PATHSEG_UNKNOWN\",\n    \"PATH_EXISTS_ERR\",\n    \"PEAKING\",\n    \"PERMISSION_DENIED\",\n    \"PERSISTENT\",\n    \"PI\",\n    \"PIXEL_PACK_BUFFER\",\n    \"PIXEL_PACK_BUFFER_BINDING\",\n    \"PIXEL_UNPACK_BUFFER\",\n    \"PIXEL_UNPACK_BUFFER_BINDING\",\n    \"PLAYING_STATE\",\n    \"POINTS\",\n    \"POLYGON_OFFSET_FACTOR\",\n    \"POLYGON_OFFSET_FILL\",\n    \"POLYGON_OFFSET_UNITS\",\n    \"POSITION_UNAVAILABLE\",\n    \"POSITIVE_INFINITY\",\n    \"PREV\",\n    \"PREV_NO_DUPLICATE\",\n    \"PROCESSING_INSTRUCTION_NODE\",\n    \"PageChangeEvent\",\n    \"PageTransitionEvent\",\n    \"PaintRequest\",\n    \"PaintRequestList\",\n    \"PannerNode\",\n    \"PasswordCredential\",\n    \"Path2D\",\n    \"PaymentAddress\",\n    \"PaymentInstruments\",\n    \"PaymentManager\",\n    \"PaymentMethodChangeEvent\",\n    \"PaymentRequest\",\n    \"PaymentRequestUpdateEvent\",\n    \"PaymentResponse\",\n    \"Performance\",\n    \"PerformanceElementTiming\",\n    \"PerformanceEntry\",\n    \"PerformanceEventTiming\",\n    \"PerformanceLongTaskTiming\",\n    \"PerformanceMark\",\n    \"PerformanceMeasure\",\n    \"PerformanceNavigation\",\n    \"PerformanceNavigationTiming\",\n    \"PerformanceObserver\",\n    \"PerformanceObserverEntryList\",\n    \"PerformancePaintTiming\",\n    \"PerformanceResourceTiming\",\n    \"PerformanceServerTiming\",\n    \"PerformanceTiming\",\n    \"PeriodicSyncManager\",\n    \"PeriodicWave\",\n    \"PermissionStatus\",\n    \"Permissions\",\n    \"PhotoCapabilities\",\n    \"PictureInPictureWindow\",\n    \"Plugin\",\n    \"PluginArray\",\n    \"PluralRules\",\n    \"PointerEvent\",\n    \"PopStateEvent\",\n    \"PopupBlockedEvent\",\n    \"Presentation\",\n    \"PresentationAvailability\",\n    \"PresentationConnection\",\n    \"PresentationConnectionAvailableEvent\",\n    \"PresentationConnectionCloseEvent\",\n    \"PresentationConnectionList\",\n    \"PresentationReceiver\",\n    \"PresentationRequest\",\n    \"ProcessingInstruction\",\n    \"ProgressEvent\",\n    \"Promise\",\n    \"PromiseRejectionEvent\",\n    \"PropertyNodeList\",\n    \"Proxy\",\n    \"PublicKeyCredential\",\n    \"PushManager\",\n    \"PushSubscription\",\n    \"PushSubscriptionOptions\",\n    \"Q\",\n    \"QUERY_RESULT\",\n    \"QUERY_RESULT_AVAILABLE\",\n    \"QUOTA_ERR\",\n    \"QUOTA_EXCEEDED_ERR\",\n    \"QueryInterface\",\n    \"R11F_G11F_B10F\",\n    \"R16F\",\n    \"R16I\",\n    \"R16UI\",\n    \"R32F\",\n    \"R32I\",\n    \"R32UI\",\n    \"R8\",\n    \"R8I\",\n    \"R8UI\",\n    \"R8_SNORM\",\n    \"RASTERIZER_DISCARD\",\n    \"READ_BUFFER\",\n    \"READ_FRAMEBUFFER\",\n    \"READ_FRAMEBUFFER_BINDING\",\n    \"READ_ONLY\",\n    \"READ_ONLY_ERR\",\n    \"READ_WRITE\",\n    \"RED\",\n    \"RED_BITS\",\n    \"RED_INTEGER\",\n    \"REMOVAL\",\n    \"RENDERBUFFER\",\n    \"RENDERBUFFER_ALPHA_SIZE\",\n    \"RENDERBUFFER_BINDING\",\n    \"RENDERBUFFER_BLUE_SIZE\",\n    \"RENDERBUFFER_DEPTH_SIZE\",\n    \"RENDERBUFFER_GREEN_SIZE\",\n    \"RENDERBUFFER_HEIGHT\",\n    \"RENDERBUFFER_INTERNAL_FORMAT\",\n    \"RENDERBUFFER_RED_SIZE\",\n    \"RENDERBUFFER_SAMPLES\",\n    \"RENDERBUFFER_STENCIL_SIZE\",\n    \"RENDERBUFFER_WIDTH\",\n    \"RENDERER\",\n    \"RENDERING_INTENT_ABSOLUTE_COLORIMETRIC\",\n    \"RENDERING_INTENT_AUTO\",\n    \"RENDERING_INTENT_PERCEPTUAL\",\n    \"RENDERING_INTENT_RELATIVE_COLORIMETRIC\",\n    \"RENDERING_INTENT_SATURATION\",\n    \"RENDERING_INTENT_UNKNOWN\",\n    \"REPEAT\",\n    \"REPLACE\",\n    \"RG\",\n    \"RG16F\",\n    \"RG16I\",\n    \"RG16UI\",\n    \"RG32F\",\n    \"RG32I\",\n    \"RG32UI\",\n    \"RG8\",\n    \"RG8I\",\n    \"RG8UI\",\n    \"RG8_SNORM\",\n    \"RGB\",\n    \"RGB10_A2\",\n    \"RGB10_A2UI\",\n    \"RGB16F\",\n    \"RGB16I\",\n    \"RGB16UI\",\n    \"RGB32F\",\n    \"RGB32I\",\n    \"RGB32UI\",\n    \"RGB565\",\n    \"RGB5_A1\",\n    \"RGB8\",\n    \"RGB8I\",\n    \"RGB8UI\",\n    \"RGB8_SNORM\",\n    \"RGB9_E5\",\n    \"RGBA\",\n    \"RGBA16F\",\n    \"RGBA16I\",\n    \"RGBA16UI\",\n    \"RGBA32F\",\n    \"RGBA32I\",\n    \"RGBA32UI\",\n    \"RGBA4\",\n    \"RGBA8\",\n    \"RGBA8I\",\n    \"RGBA8UI\",\n    \"RGBA8_SNORM\",\n    \"RGBA_INTEGER\",\n    \"RGBColor\",\n    \"RGB_INTEGER\",\n    \"RG_INTEGER\",\n    \"ROTATION_CLOCKWISE\",\n    \"ROTATION_COUNTERCLOCKWISE\",\n    \"RTCCertificate\",\n    \"RTCDTMFSender\",\n    \"RTCDTMFToneChangeEvent\",\n    \"RTCDataChannel\",\n    \"RTCDataChannelEvent\",\n    \"RTCDtlsTransport\",\n    \"RTCError\",\n    \"RTCErrorEvent\",\n    \"RTCIceCandidate\",\n    \"RTCIceTransport\",\n    \"RTCPeerConnection\",\n    \"RTCPeerConnectionIceErrorEvent\",\n    \"RTCPeerConnectionIceEvent\",\n    \"RTCRtpReceiver\",\n    \"RTCRtpSender\",\n    \"RTCRtpTransceiver\",\n    \"RTCSctpTransport\",\n    \"RTCSessionDescription\",\n    \"RTCStatsReport\",\n    \"RTCTrackEvent\",\n    \"RadioNodeList\",\n    \"Range\",\n    \"RangeError\",\n    \"RangeException\",\n    \"ReadableStream\",\n    \"ReadableStreamDefaultReader\",\n    \"RecordErrorEvent\",\n    \"Rect\",\n    \"ReferenceError\",\n    \"Reflect\",\n    \"RegExp\",\n    \"RelativeOrientationSensor\",\n    \"RelativeTimeFormat\",\n    \"RemotePlayback\",\n    \"Report\",\n    \"ReportBody\",\n    \"ReportingObserver\",\n    \"Request\",\n    \"ResizeObserver\",\n    \"ResizeObserverEntry\",\n    \"ResizeObserverSize\",\n    \"Response\",\n    \"RuntimeError\",\n    \"SAMPLER_2D\",\n    \"SAMPLER_2D_ARRAY\",\n    \"SAMPLER_2D_ARRAY_SHADOW\",\n    \"SAMPLER_2D_SHADOW\",\n    \"SAMPLER_3D\",\n    \"SAMPLER_BINDING\",\n    \"SAMPLER_CUBE\",\n    \"SAMPLER_CUBE_SHADOW\",\n    \"SAMPLES\",\n    \"SAMPLE_ALPHA_TO_COVERAGE\",\n    \"SAMPLE_BUFFERS\",\n    \"SAMPLE_COVERAGE\",\n    \"SAMPLE_COVERAGE_INVERT\",\n    \"SAMPLE_COVERAGE_VALUE\",\n    \"SAWTOOTH\",\n    \"SCHEDULED_STATE\",\n    \"SCISSOR_BOX\",\n    \"SCISSOR_TEST\",\n    \"SCROLL_PAGE_DOWN\",\n    \"SCROLL_PAGE_UP\",\n    \"SDP_ANSWER\",\n    \"SDP_OFFER\",\n    \"SDP_PRANSWER\",\n    \"SECURITY_ERR\",\n    \"SELECT\",\n    \"SEPARATE_ATTRIBS\",\n    \"SERIALIZE_ERR\",\n    \"SEVERITY_ERROR\",\n    \"SEVERITY_FATAL_ERROR\",\n    \"SEVERITY_WARNING\",\n    \"SHADER_COMPILER\",\n    \"SHADER_TYPE\",\n    \"SHADING_LANGUAGE_VERSION\",\n    \"SHIFT_MASK\",\n    \"SHORT\",\n    \"SHOWING\",\n    \"SHOW_ALL\",\n    \"SHOW_ATTRIBUTE\",\n    \"SHOW_CDATA_SECTION\",\n    \"SHOW_COMMENT\",\n    \"SHOW_DOCUMENT\",\n    \"SHOW_DOCUMENT_FRAGMENT\",\n    \"SHOW_DOCUMENT_TYPE\",\n    \"SHOW_ELEMENT\",\n    \"SHOW_ENTITY\",\n    \"SHOW_ENTITY_REFERENCE\",\n    \"SHOW_NOTATION\",\n    \"SHOW_PROCESSING_INSTRUCTION\",\n    \"SHOW_TEXT\",\n    \"SIGNALED\",\n    \"SIGNED_NORMALIZED\",\n    \"SINE\",\n    \"SOUNDFIELD\",\n    \"SQLException\",\n    \"SQRT1_2\",\n    \"SQRT2\",\n    \"SQUARE\",\n    \"SRC_ALPHA\",\n    \"SRC_ALPHA_SATURATE\",\n    \"SRC_COLOR\",\n    \"SRGB\",\n    \"SRGB8\",\n    \"SRGB8_ALPHA8\",\n    \"START_TO_END\",\n    \"START_TO_START\",\n    \"STATIC_COPY\",\n    \"STATIC_DRAW\",\n    \"STATIC_READ\",\n    \"STENCIL\",\n    \"STENCIL_ATTACHMENT\",\n    \"STENCIL_BACK_FAIL\",\n    \"STENCIL_BACK_FUNC\",\n    \"STENCIL_BACK_PASS_DEPTH_FAIL\",\n    \"STENCIL_BACK_PASS_DEPTH_PASS\",\n    \"STENCIL_BACK_REF\",\n    \"STENCIL_BACK_VALUE_MASK\",\n    \"STENCIL_BACK_WRITEMASK\",\n    \"STENCIL_BITS\",\n    \"STENCIL_BUFFER_BIT\",\n    \"STENCIL_CLEAR_VALUE\",\n    \"STENCIL_FAIL\",\n    \"STENCIL_FUNC\",\n    \"STENCIL_INDEX\",\n    \"STENCIL_INDEX8\",\n    \"STENCIL_PASS_DEPTH_FAIL\",\n    \"STENCIL_PASS_DEPTH_PASS\",\n    \"STENCIL_REF\",\n    \"STENCIL_TEST\",\n    \"STENCIL_VALUE_MASK\",\n    \"STENCIL_WRITEMASK\",\n    \"STREAM_COPY\",\n    \"STREAM_DRAW\",\n    \"STREAM_READ\",\n    \"STRING_TYPE\",\n    \"STYLE_RULE\",\n    \"SUBPIXEL_BITS\",\n    \"SUPPORTS_RULE\",\n    \"SVGAElement\",\n    \"SVGAltGlyphDefElement\",\n    \"SVGAltGlyphElement\",\n    \"SVGAltGlyphItemElement\",\n    \"SVGAngle\",\n    \"SVGAnimateColorElement\",\n    \"SVGAnimateElement\",\n    \"SVGAnimateMotionElement\",\n    \"SVGAnimateTransformElement\",\n    \"SVGAnimatedAngle\",\n    \"SVGAnimatedBoolean\",\n    \"SVGAnimatedEnumeration\",\n    \"SVGAnimatedInteger\",\n    \"SVGAnimatedLength\",\n    \"SVGAnimatedLengthList\",\n    \"SVGAnimatedNumber\",\n    \"SVGAnimatedNumberList\",\n    \"SVGAnimatedPreserveAspectRatio\",\n    \"SVGAnimatedRect\",\n    \"SVGAnimatedString\",\n    \"SVGAnimatedTransformList\",\n    \"SVGAnimationElement\",\n    \"SVGCircleElement\",\n    \"SVGClipPathElement\",\n    \"SVGColor\",\n    \"SVGComponentTransferFunctionElement\",\n    \"SVGCursorElement\",\n    \"SVGDefsElement\",\n    \"SVGDescElement\",\n    \"SVGDiscardElement\",\n    \"SVGDocument\",\n    \"SVGElement\",\n    \"SVGElementInstance\",\n    \"SVGElementInstanceList\",\n    \"SVGEllipseElement\",\n    \"SVGException\",\n    \"SVGFEBlendElement\",\n    \"SVGFEColorMatrixElement\",\n    \"SVGFEComponentTransferElement\",\n    \"SVGFECompositeElement\",\n    \"SVGFEConvolveMatrixElement\",\n    \"SVGFEDiffuseLightingElement\",\n    \"SVGFEDisplacementMapElement\",\n    \"SVGFEDistantLightElement\",\n    \"SVGFEDropShadowElement\",\n    \"SVGFEFloodElement\",\n    \"SVGFEFuncAElement\",\n    \"SVGFEFuncBElement\",\n    \"SVGFEFuncGElement\",\n    \"SVGFEFuncRElement\",\n    \"SVGFEGaussianBlurElement\",\n    \"SVGFEImageElement\",\n    \"SVGFEMergeElement\",\n    \"SVGFEMergeNodeElement\",\n    \"SVGFEMorphologyElement\",\n    \"SVGFEOffsetElement\",\n    \"SVGFEPointLightElement\",\n    \"SVGFESpecularLightingElement\",\n    \"SVGFESpotLightElement\",\n    \"SVGFETileElement\",\n    \"SVGFETurbulenceElement\",\n    \"SVGFilterElement\",\n    \"SVGFontElement\",\n    \"SVGFontFaceElement\",\n    \"SVGFontFaceFormatElement\",\n    \"SVGFontFaceNameElement\",\n    \"SVGFontFaceSrcElement\",\n    \"SVGFontFaceUriElement\",\n    \"SVGForeignObjectElement\",\n    \"SVGGElement\",\n    \"SVGGeometryElement\",\n    \"SVGGlyphElement\",\n    \"SVGGlyphRefElement\",\n    \"SVGGradientElement\",\n    \"SVGGraphicsElement\",\n    \"SVGHKernElement\",\n    \"SVGImageElement\",\n    \"SVGLength\",\n    \"SVGLengthList\",\n    \"SVGLineElement\",\n    \"SVGLinearGradientElement\",\n    \"SVGMPathElement\",\n    \"SVGMarkerElement\",\n    \"SVGMaskElement\",\n    \"SVGMatrix\",\n    \"SVGMetadataElement\",\n    \"SVGMissingGlyphElement\",\n    \"SVGNumber\",\n    \"SVGNumberList\",\n    \"SVGPaint\",\n    \"SVGPathElement\",\n    \"SVGPathSeg\",\n    \"SVGPathSegArcAbs\",\n    \"SVGPathSegArcRel\",\n    \"SVGPathSegClosePath\",\n    \"SVGPathSegCurvetoCubicAbs\",\n    \"SVGPathSegCurvetoCubicRel\",\n    \"SVGPathSegCurvetoCubicSmoothAbs\",\n    \"SVGPathSegCurvetoCubicSmoothRel\",\n    \"SVGPathSegCurvetoQuadraticAbs\",\n    \"SVGPathSegCurvetoQuadraticRel\",\n    \"SVGPathSegCurvetoQuadraticSmoothAbs\",\n    \"SVGPathSegCurvetoQuadraticSmoothRel\",\n    \"SVGPathSegLinetoAbs\",\n    \"SVGPathSegLinetoHorizontalAbs\",\n    \"SVGPathSegLinetoHorizontalRel\",\n    \"SVGPathSegLinetoRel\",\n    \"SVGPathSegLinetoVerticalAbs\",\n    \"SVGPathSegLinetoVerticalRel\",\n    \"SVGPathSegList\",\n    \"SVGPathSegMovetoAbs\",\n    \"SVGPathSegMovetoRel\",\n    \"SVGPatternElement\",\n    \"SVGPoint\",\n    \"SVGPointList\",\n    \"SVGPolygonElement\",\n    \"SVGPolylineElement\",\n    \"SVGPreserveAspectRatio\",\n    \"SVGRadialGradientElement\",\n    \"SVGRect\",\n    \"SVGRectElement\",\n    \"SVGRenderingIntent\",\n    \"SVGSVGElement\",\n    \"SVGScriptElement\",\n    \"SVGSetElement\",\n    \"SVGStopElement\",\n    \"SVGStringList\",\n    \"SVGStyleElement\",\n    \"SVGSwitchElement\",\n    \"SVGSymbolElement\",\n    \"SVGTRefElement\",\n    \"SVGTSpanElement\",\n    \"SVGTextContentElement\",\n    \"SVGTextElement\",\n    \"SVGTextPathElement\",\n    \"SVGTextPositioningElement\",\n    \"SVGTitleElement\",\n    \"SVGTransform\",\n    \"SVGTransformList\",\n    \"SVGUnitTypes\",\n    \"SVGUseElement\",\n    \"SVGVKernElement\",\n    \"SVGViewElement\",\n    \"SVGViewSpec\",\n    \"SVGZoomAndPan\",\n    \"SVGZoomEvent\",\n    \"SVG_ANGLETYPE_DEG\",\n    \"SVG_ANGLETYPE_GRAD\",\n    \"SVG_ANGLETYPE_RAD\",\n    \"SVG_ANGLETYPE_UNKNOWN\",\n    \"SVG_ANGLETYPE_UNSPECIFIED\",\n    \"SVG_CHANNEL_A\",\n    \"SVG_CHANNEL_B\",\n    \"SVG_CHANNEL_G\",\n    \"SVG_CHANNEL_R\",\n    \"SVG_CHANNEL_UNKNOWN\",\n    \"SVG_COLORTYPE_CURRENTCOLOR\",\n    \"SVG_COLORTYPE_RGBCOLOR\",\n    \"SVG_COLORTYPE_RGBCOLOR_ICCCOLOR\",\n    \"SVG_COLORTYPE_UNKNOWN\",\n    \"SVG_EDGEMODE_DUPLICATE\",\n    \"SVG_EDGEMODE_NONE\",\n    \"SVG_EDGEMODE_UNKNOWN\",\n    \"SVG_EDGEMODE_WRAP\",\n    \"SVG_FEBLEND_MODE_COLOR\",\n    \"SVG_FEBLEND_MODE_COLOR_BURN\",\n    \"SVG_FEBLEND_MODE_COLOR_DODGE\",\n    \"SVG_FEBLEND_MODE_DARKEN\",\n    \"SVG_FEBLEND_MODE_DIFFERENCE\",\n    \"SVG_FEBLEND_MODE_EXCLUSION\",\n    \"SVG_FEBLEND_MODE_HARD_LIGHT\",\n    \"SVG_FEBLEND_MODE_HUE\",\n    \"SVG_FEBLEND_MODE_LIGHTEN\",\n    \"SVG_FEBLEND_MODE_LUMINOSITY\",\n    \"SVG_FEBLEND_MODE_MULTIPLY\",\n    \"SVG_FEBLEND_MODE_NORMAL\",\n    \"SVG_FEBLEND_MODE_OVERLAY\",\n    \"SVG_FEBLEND_MODE_SATURATION\",\n    \"SVG_FEBLEND_MODE_SCREEN\",\n    \"SVG_FEBLEND_MODE_SOFT_LIGHT\",\n    \"SVG_FEBLEND_MODE_UNKNOWN\",\n    \"SVG_FECOLORMATRIX_TYPE_HUEROTATE\",\n    \"SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA\",\n    \"SVG_FECOLORMATRIX_TYPE_MATRIX\",\n    \"SVG_FECOLORMATRIX_TYPE_SATURATE\",\n    \"SVG_FECOLORMATRIX_TYPE_UNKNOWN\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_GAMMA\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_LINEAR\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_TABLE\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN\",\n    \"SVG_FECOMPOSITE_OPERATOR_ARITHMETIC\",\n    \"SVG_FECOMPOSITE_OPERATOR_ATOP\",\n    \"SVG_FECOMPOSITE_OPERATOR_IN\",\n    \"SVG_FECOMPOSITE_OPERATOR_OUT\",\n    \"SVG_FECOMPOSITE_OPERATOR_OVER\",\n    \"SVG_FECOMPOSITE_OPERATOR_UNKNOWN\",\n    \"SVG_FECOMPOSITE_OPERATOR_XOR\",\n    \"SVG_INVALID_VALUE_ERR\",\n    \"SVG_LENGTHTYPE_CM\",\n    \"SVG_LENGTHTYPE_EMS\",\n    \"SVG_LENGTHTYPE_EXS\",\n    \"SVG_LENGTHTYPE_IN\",\n    \"SVG_LENGTHTYPE_MM\",\n    \"SVG_LENGTHTYPE_NUMBER\",\n    \"SVG_LENGTHTYPE_PC\",\n    \"SVG_LENGTHTYPE_PERCENTAGE\",\n    \"SVG_LENGTHTYPE_PT\",\n    \"SVG_LENGTHTYPE_PX\",\n    \"SVG_LENGTHTYPE_UNKNOWN\",\n    \"SVG_MARKERUNITS_STROKEWIDTH\",\n    \"SVG_MARKERUNITS_UNKNOWN\",\n    \"SVG_MARKERUNITS_USERSPACEONUSE\",\n    \"SVG_MARKER_ORIENT_ANGLE\",\n    \"SVG_MARKER_ORIENT_AUTO\",\n    \"SVG_MARKER_ORIENT_UNKNOWN\",\n    \"SVG_MASKTYPE_ALPHA\",\n    \"SVG_MASKTYPE_LUMINANCE\",\n    \"SVG_MATRIX_NOT_INVERTABLE\",\n    \"SVG_MEETORSLICE_MEET\",\n    \"SVG_MEETORSLICE_SLICE\",\n    \"SVG_MEETORSLICE_UNKNOWN\",\n    \"SVG_MORPHOLOGY_OPERATOR_DILATE\",\n    \"SVG_MORPHOLOGY_OPERATOR_ERODE\",\n    \"SVG_MORPHOLOGY_OPERATOR_UNKNOWN\",\n    \"SVG_PAINTTYPE_CURRENTCOLOR\",\n    \"SVG_PAINTTYPE_NONE\",\n    \"SVG_PAINTTYPE_RGBCOLOR\",\n    \"SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR\",\n    \"SVG_PAINTTYPE_UNKNOWN\",\n    \"SVG_PAINTTYPE_URI\",\n    \"SVG_PAINTTYPE_URI_CURRENTCOLOR\",\n    \"SVG_PAINTTYPE_URI_NONE\",\n    \"SVG_PAINTTYPE_URI_RGBCOLOR\",\n    \"SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR\",\n    \"SVG_PRESERVEASPECTRATIO_NONE\",\n    \"SVG_PRESERVEASPECTRATIO_UNKNOWN\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMIN\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMIN\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMIN\",\n    \"SVG_SPREADMETHOD_PAD\",\n    \"SVG_SPREADMETHOD_REFLECT\",\n    \"SVG_SPREADMETHOD_REPEAT\",\n    \"SVG_SPREADMETHOD_UNKNOWN\",\n    \"SVG_STITCHTYPE_NOSTITCH\",\n    \"SVG_STITCHTYPE_STITCH\",\n    \"SVG_STITCHTYPE_UNKNOWN\",\n    \"SVG_TRANSFORM_MATRIX\",\n    \"SVG_TRANSFORM_ROTATE\",\n    \"SVG_TRANSFORM_SCALE\",\n    \"SVG_TRANSFORM_SKEWX\",\n    \"SVG_TRANSFORM_SKEWY\",\n    \"SVG_TRANSFORM_TRANSLATE\",\n    \"SVG_TRANSFORM_UNKNOWN\",\n    \"SVG_TURBULENCE_TYPE_FRACTALNOISE\",\n    \"SVG_TURBULENCE_TYPE_TURBULENCE\",\n    \"SVG_TURBULENCE_TYPE_UNKNOWN\",\n    \"SVG_UNIT_TYPE_OBJECTBOUNDINGBOX\",\n    \"SVG_UNIT_TYPE_UNKNOWN\",\n    \"SVG_UNIT_TYPE_USERSPACEONUSE\",\n    \"SVG_WRONG_TYPE_ERR\",\n    \"SVG_ZOOMANDPAN_DISABLE\",\n    \"SVG_ZOOMANDPAN_MAGNIFY\",\n    \"SVG_ZOOMANDPAN_UNKNOWN\",\n    \"SYNC_CONDITION\",\n    \"SYNC_FENCE\",\n    \"SYNC_FLAGS\",\n    \"SYNC_FLUSH_COMMANDS_BIT\",\n    \"SYNC_GPU_COMMANDS_COMPLETE\",\n    \"SYNC_STATUS\",\n    \"SYNTAX_ERR\",\n    \"SavedPages\",\n    \"Screen\",\n    \"ScreenOrientation\",\n    \"Script\",\n    \"ScriptProcessorNode\",\n    \"ScrollAreaEvent\",\n    \"SecurityPolicyViolationEvent\",\n    \"Selection\",\n    \"Sensor\",\n    \"SensorErrorEvent\",\n    \"ServiceWorker\",\n    \"ServiceWorkerContainer\",\n    \"ServiceWorkerRegistration\",\n    \"SessionDescription\",\n    \"Set\",\n    \"ShadowRoot\",\n    \"SharedArrayBuffer\",\n    \"SharedWorker\",\n    \"SimpleGestureEvent\",\n    \"SourceBuffer\",\n    \"SourceBufferList\",\n    \"SpeechSynthesis\",\n    \"SpeechSynthesisErrorEvent\",\n    \"SpeechSynthesisEvent\",\n    \"SpeechSynthesisUtterance\",\n    \"SpeechSynthesisVoice\",\n    \"StaticRange\",\n    \"StereoPannerNode\",\n    \"StopIteration\",\n    \"Storage\",\n    \"StorageEvent\",\n    \"StorageManager\",\n    \"String\",\n    \"StructType\",\n    \"StylePropertyMap\",\n    \"StylePropertyMapReadOnly\",\n    \"StyleSheet\",\n    \"StyleSheetList\",\n    \"SubmitEvent\",\n    \"SubtleCrypto\",\n    \"Symbol\",\n    \"SyncManager\",\n    \"SyntaxError\",\n    \"TEMPORARY\",\n    \"TEXTPATH_METHODTYPE_ALIGN\",\n    \"TEXTPATH_METHODTYPE_STRETCH\",\n    \"TEXTPATH_METHODTYPE_UNKNOWN\",\n    \"TEXTPATH_SPACINGTYPE_AUTO\",\n    \"TEXTPATH_SPACINGTYPE_EXACT\",\n    \"TEXTPATH_SPACINGTYPE_UNKNOWN\",\n    \"TEXTURE\",\n    \"TEXTURE0\",\n    \"TEXTURE1\",\n    \"TEXTURE10\",\n    \"TEXTURE11\",\n    \"TEXTURE12\",\n    \"TEXTURE13\",\n    \"TEXTURE14\",\n    \"TEXTURE15\",\n    \"TEXTURE16\",\n    \"TEXTURE17\",\n    \"TEXTURE18\",\n    \"TEXTURE19\",\n    \"TEXTURE2\",\n    \"TEXTURE20\",\n    \"TEXTURE21\",\n    \"TEXTURE22\",\n    \"TEXTURE23\",\n    \"TEXTURE24\",\n    \"TEXTURE25\",\n    \"TEXTURE26\",\n    \"TEXTURE27\",\n    \"TEXTURE28\",\n    \"TEXTURE29\",\n    \"TEXTURE3\",\n    \"TEXTURE30\",\n    \"TEXTURE31\",\n    \"TEXTURE4\",\n    \"TEXTURE5\",\n    \"TEXTURE6\",\n    \"TEXTURE7\",\n    \"TEXTURE8\",\n    \"TEXTURE9\",\n    \"TEXTURE_2D\",\n    \"TEXTURE_2D_ARRAY\",\n    \"TEXTURE_3D\",\n    \"TEXTURE_BASE_LEVEL\",\n    \"TEXTURE_BINDING_2D\",\n    \"TEXTURE_BINDING_2D_ARRAY\",\n    \"TEXTURE_BINDING_3D\",\n    \"TEXTURE_BINDING_CUBE_MAP\",\n    \"TEXTURE_COMPARE_FUNC\",\n    \"TEXTURE_COMPARE_MODE\",\n    \"TEXTURE_CUBE_MAP\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_X\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Y\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Z\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_X\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Y\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Z\",\n    \"TEXTURE_IMMUTABLE_FORMAT\",\n    \"TEXTURE_IMMUTABLE_LEVELS\",\n    \"TEXTURE_MAG_FILTER\",\n    \"TEXTURE_MAX_ANISOTROPY_EXT\",\n    \"TEXTURE_MAX_LEVEL\",\n    \"TEXTURE_MAX_LOD\",\n    \"TEXTURE_MIN_FILTER\",\n    \"TEXTURE_MIN_LOD\",\n    \"TEXTURE_WRAP_R\",\n    \"TEXTURE_WRAP_S\",\n    \"TEXTURE_WRAP_T\",\n    \"TEXT_NODE\",\n    \"TIMEOUT\",\n    \"TIMEOUT_ERR\",\n    \"TIMEOUT_EXPIRED\",\n    \"TIMEOUT_IGNORED\",\n    \"TOO_LARGE_ERR\",\n    \"TRANSACTION_INACTIVE_ERR\",\n    \"TRANSFORM_FEEDBACK\",\n    \"TRANSFORM_FEEDBACK_ACTIVE\",\n    \"TRANSFORM_FEEDBACK_BINDING\",\n    \"TRANSFORM_FEEDBACK_BUFFER\",\n    \"TRANSFORM_FEEDBACK_BUFFER_BINDING\",\n    \"TRANSFORM_FEEDBACK_BUFFER_MODE\",\n    \"TRANSFORM_FEEDBACK_BUFFER_SIZE\",\n    \"TRANSFORM_FEEDBACK_BUFFER_START\",\n    \"TRANSFORM_FEEDBACK_PAUSED\",\n    \"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN\",\n    \"TRANSFORM_FEEDBACK_VARYINGS\",\n    \"TRIANGLE\",\n    \"TRIANGLES\",\n    \"TRIANGLE_FAN\",\n    \"TRIANGLE_STRIP\",\n    \"TYPE_BACK_FORWARD\",\n    \"TYPE_ERR\",\n    \"TYPE_MISMATCH_ERR\",\n    \"TYPE_NAVIGATE\",\n    \"TYPE_RELOAD\",\n    \"TYPE_RESERVED\",\n    \"Table\",\n    \"TaskAttributionTiming\",\n    \"Text\",\n    \"TextDecoder\",\n    \"TextDecoderStream\",\n    \"TextEncoder\",\n    \"TextEncoderStream\",\n    \"TextEvent\",\n    \"TextMetrics\",\n    \"TextTrack\",\n    \"TextTrackCue\",\n    \"TextTrackCueList\",\n    \"TextTrackList\",\n    \"TimeEvent\",\n    \"TimeRanges\",\n    \"Touch\",\n    \"TouchEvent\",\n    \"TouchList\",\n    \"TrackEvent\",\n    \"TransformStream\",\n    \"TransitionEvent\",\n    \"TreeWalker\",\n    \"TrustedHTML\",\n    \"TrustedScript\",\n    \"TrustedScriptURL\",\n    \"TrustedTypePolicy\",\n    \"TrustedTypePolicyFactory\",\n    \"TypeError\",\n    \"TypedObject\",\n    \"U2F\",\n    \"UIEvent\",\n    \"UNCACHED\",\n    \"UNIFORM_ARRAY_STRIDE\",\n    \"UNIFORM_BLOCK_ACTIVE_UNIFORMS\",\n    \"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES\",\n    \"UNIFORM_BLOCK_BINDING\",\n    \"UNIFORM_BLOCK_DATA_SIZE\",\n    \"UNIFORM_BLOCK_INDEX\",\n    \"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER\",\n    \"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER\",\n    \"UNIFORM_BUFFER\",\n    \"UNIFORM_BUFFER_BINDING\",\n    \"UNIFORM_BUFFER_OFFSET_ALIGNMENT\",\n    \"UNIFORM_BUFFER_SIZE\",\n    \"UNIFORM_BUFFER_START\",\n    \"UNIFORM_IS_ROW_MAJOR\",\n    \"UNIFORM_MATRIX_STRIDE\",\n    \"UNIFORM_OFFSET\",\n    \"UNIFORM_SIZE\",\n    \"UNIFORM_TYPE\",\n    \"UNKNOWN_ERR\",\n    \"UNKNOWN_RULE\",\n    \"UNMASKED_RENDERER_WEBGL\",\n    \"UNMASKED_VENDOR_WEBGL\",\n    \"UNORDERED_NODE_ITERATOR_TYPE\",\n    \"UNORDERED_NODE_SNAPSHOT_TYPE\",\n    \"UNPACK_ALIGNMENT\",\n    \"UNPACK_COLORSPACE_CONVERSION_WEBGL\",\n    \"UNPACK_FLIP_Y_WEBGL\",\n    \"UNPACK_IMAGE_HEIGHT\",\n    \"UNPACK_PREMULTIPLY_ALPHA_WEBGL\",\n    \"UNPACK_ROW_LENGTH\",\n    \"UNPACK_SKIP_IMAGES\",\n    \"UNPACK_SKIP_PIXELS\",\n    \"UNPACK_SKIP_ROWS\",\n    \"UNSCHEDULED_STATE\",\n    \"UNSENT\",\n    \"UNSIGNALED\",\n    \"UNSIGNED_BYTE\",\n    \"UNSIGNED_INT\",\n    \"UNSIGNED_INT_10F_11F_11F_REV\",\n    \"UNSIGNED_INT_24_8\",\n    \"UNSIGNED_INT_2_10_10_10_REV\",\n    \"UNSIGNED_INT_5_9_9_9_REV\",\n    \"UNSIGNED_INT_SAMPLER_2D\",\n    \"UNSIGNED_INT_SAMPLER_2D_ARRAY\",\n    \"UNSIGNED_INT_SAMPLER_3D\",\n    \"UNSIGNED_INT_SAMPLER_CUBE\",\n    \"UNSIGNED_INT_VEC2\",\n    \"UNSIGNED_INT_VEC3\",\n    \"UNSIGNED_INT_VEC4\",\n    \"UNSIGNED_NORMALIZED\",\n    \"UNSIGNED_SHORT\",\n    \"UNSIGNED_SHORT_4_4_4_4\",\n    \"UNSIGNED_SHORT_5_5_5_1\",\n    \"UNSIGNED_SHORT_5_6_5\",\n    \"UNSPECIFIED_EVENT_TYPE_ERR\",\n    \"UPDATEREADY\",\n    \"URIError\",\n    \"URL\",\n    \"URLSearchParams\",\n    \"URLUnencoded\",\n    \"URL_MISMATCH_ERR\",\n    \"USB\",\n    \"USBAlternateInterface\",\n    \"USBConfiguration\",\n    \"USBConnectionEvent\",\n    \"USBDevice\",\n    \"USBEndpoint\",\n    \"USBInTransferResult\",\n    \"USBInterface\",\n    \"USBIsochronousInTransferPacket\",\n    \"USBIsochronousInTransferResult\",\n    \"USBIsochronousOutTransferPacket\",\n    \"USBIsochronousOutTransferResult\",\n    \"USBOutTransferResult\",\n    \"UTC\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"UserActivation\",\n    \"UserMessageHandler\",\n    \"UserMessageHandlersNamespace\",\n    \"UserProximityEvent\",\n    \"VALIDATE_STATUS\",\n    \"VALIDATION_ERR\",\n    \"VARIABLES_RULE\",\n    \"VENDOR\",\n    \"VERSION\",\n    \"VERSION_CHANGE\",\n    \"VERSION_ERR\",\n    \"VERTEX_ARRAY_BINDING\",\n    \"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\",\n    \"VERTEX_ATTRIB_ARRAY_DIVISOR\",\n    \"VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE\",\n    \"VERTEX_ATTRIB_ARRAY_ENABLED\",\n    \"VERTEX_ATTRIB_ARRAY_INTEGER\",\n    \"VERTEX_ATTRIB_ARRAY_NORMALIZED\",\n    \"VERTEX_ATTRIB_ARRAY_POINTER\",\n    \"VERTEX_ATTRIB_ARRAY_SIZE\",\n    \"VERTEX_ATTRIB_ARRAY_STRIDE\",\n    \"VERTEX_ATTRIB_ARRAY_TYPE\",\n    \"VERTEX_SHADER\",\n    \"VERTICAL\",\n    \"VERTICAL_AXIS\",\n    \"VER_ERR\",\n    \"VIEWPORT\",\n    \"VIEWPORT_RULE\",\n    \"VRDisplay\",\n    \"VRDisplayCapabilities\",\n    \"VRDisplayEvent\",\n    \"VREyeParameters\",\n    \"VRFieldOfView\",\n    \"VRFrameData\",\n    \"VRPose\",\n    \"VRStageParameters\",\n    \"VTTCue\",\n    \"VTTRegion\",\n    \"ValidityState\",\n    \"VideoPlaybackQuality\",\n    \"VideoStreamTrack\",\n    \"VisualViewport\",\n    \"WAIT_FAILED\",\n    \"WEBKIT_FILTER_RULE\",\n    \"WEBKIT_KEYFRAMES_RULE\",\n    \"WEBKIT_KEYFRAME_RULE\",\n    \"WEBKIT_REGION_RULE\",\n    \"WRONG_DOCUMENT_ERR\",\n    \"WakeLock\",\n    \"WakeLockSentinel\",\n    \"WasmAnyRef\",\n    \"WaveShaperNode\",\n    \"WeakMap\",\n    \"WeakRef\",\n    \"WeakSet\",\n    \"WebAssembly\",\n    \"WebGL2RenderingContext\",\n    \"WebGLActiveInfo\",\n    \"WebGLBuffer\",\n    \"WebGLContextEvent\",\n    \"WebGLFramebuffer\",\n    \"WebGLProgram\",\n    \"WebGLQuery\",\n    \"WebGLRenderbuffer\",\n    \"WebGLRenderingContext\",\n    \"WebGLSampler\",\n    \"WebGLShader\",\n    \"WebGLShaderPrecisionFormat\",\n    \"WebGLSync\",\n    \"WebGLTexture\",\n    \"WebGLTransformFeedback\",\n    \"WebGLUniformLocation\",\n    \"WebGLVertexArray\",\n    \"WebGLVertexArrayObject\",\n    \"WebKitAnimationEvent\",\n    \"WebKitBlobBuilder\",\n    \"WebKitCSSFilterRule\",\n    \"WebKitCSSFilterValue\",\n    \"WebKitCSSKeyframeRule\",\n    \"WebKitCSSKeyframesRule\",\n    \"WebKitCSSMatrix\",\n    \"WebKitCSSRegionRule\",\n    \"WebKitCSSTransformValue\",\n    \"WebKitDataCue\",\n    \"WebKitGamepad\",\n    \"WebKitMediaKeyError\",\n    \"WebKitMediaKeyMessageEvent\",\n    \"WebKitMediaKeySession\",\n    \"WebKitMediaKeys\",\n    \"WebKitMediaSource\",\n    \"WebKitMutationObserver\",\n    \"WebKitNamespace\",\n    \"WebKitPlaybackTargetAvailabilityEvent\",\n    \"WebKitPoint\",\n    \"WebKitShadowRoot\",\n    \"WebKitSourceBuffer\",\n    \"WebKitSourceBufferList\",\n    \"WebKitTransitionEvent\",\n    \"WebSocket\",\n    \"WebkitAlignContent\",\n    \"WebkitAlignItems\",\n    \"WebkitAlignSelf\",\n    \"WebkitAnimation\",\n    \"WebkitAnimationDelay\",\n    \"WebkitAnimationDirection\",\n    \"WebkitAnimationDuration\",\n    \"WebkitAnimationFillMode\",\n    \"WebkitAnimationIterationCount\",\n    \"WebkitAnimationName\",\n    \"WebkitAnimationPlayState\",\n    \"WebkitAnimationTimingFunction\",\n    \"WebkitAppearance\",\n    \"WebkitBackfaceVisibility\",\n    \"WebkitBackgroundClip\",\n    \"WebkitBackgroundOrigin\",\n    \"WebkitBackgroundSize\",\n    \"WebkitBorderBottomLeftRadius\",\n    \"WebkitBorderBottomRightRadius\",\n    \"WebkitBorderImage\",\n    \"WebkitBorderRadius\",\n    \"WebkitBorderTopLeftRadius\",\n    \"WebkitBorderTopRightRadius\",\n    \"WebkitBoxAlign\",\n    \"WebkitBoxDirection\",\n    \"WebkitBoxFlex\",\n    \"WebkitBoxOrdinalGroup\",\n    \"WebkitBoxOrient\",\n    \"WebkitBoxPack\",\n    \"WebkitBoxShadow\",\n    \"WebkitBoxSizing\",\n    \"WebkitFilter\",\n    \"WebkitFlex\",\n    \"WebkitFlexBasis\",\n    \"WebkitFlexDirection\",\n    \"WebkitFlexFlow\",\n    \"WebkitFlexGrow\",\n    \"WebkitFlexShrink\",\n    \"WebkitFlexWrap\",\n    \"WebkitJustifyContent\",\n    \"WebkitLineClamp\",\n    \"WebkitMask\",\n    \"WebkitMaskClip\",\n    \"WebkitMaskComposite\",\n    \"WebkitMaskImage\",\n    \"WebkitMaskOrigin\",\n    \"WebkitMaskPosition\",\n    \"WebkitMaskPositionX\",\n    \"WebkitMaskPositionY\",\n    \"WebkitMaskRepeat\",\n    \"WebkitMaskSize\",\n    \"WebkitOrder\",\n    \"WebkitPerspective\",\n    \"WebkitPerspectiveOrigin\",\n    \"WebkitTextFillColor\",\n    \"WebkitTextSizeAdjust\",\n    \"WebkitTextStroke\",\n    \"WebkitTextStrokeColor\",\n    \"WebkitTextStrokeWidth\",\n    \"WebkitTransform\",\n    \"WebkitTransformOrigin\",\n    \"WebkitTransformStyle\",\n    \"WebkitTransition\",\n    \"WebkitTransitionDelay\",\n    \"WebkitTransitionDuration\",\n    \"WebkitTransitionProperty\",\n    \"WebkitTransitionTimingFunction\",\n    \"WebkitUserSelect\",\n    \"WheelEvent\",\n    \"Window\",\n    \"Worker\",\n    \"Worklet\",\n    \"WritableStream\",\n    \"WritableStreamDefaultWriter\",\n    \"XMLDocument\",\n    \"XMLHttpRequest\",\n    \"XMLHttpRequestEventTarget\",\n    \"XMLHttpRequestException\",\n    \"XMLHttpRequestProgressEvent\",\n    \"XMLHttpRequestUpload\",\n    \"XMLSerializer\",\n    \"XMLStylesheetProcessingInstruction\",\n    \"XPathEvaluator\",\n    \"XPathException\",\n    \"XPathExpression\",\n    \"XPathNSResolver\",\n    \"XPathResult\",\n    \"XRBoundedReferenceSpace\",\n    \"XRDOMOverlayState\",\n    \"XRFrame\",\n    \"XRHitTestResult\",\n    \"XRHitTestSource\",\n    \"XRInputSource\",\n    \"XRInputSourceArray\",\n    \"XRInputSourceEvent\",\n    \"XRInputSourcesChangeEvent\",\n    \"XRLayer\",\n    \"XRPose\",\n    \"XRRay\",\n    \"XRReferenceSpace\",\n    \"XRReferenceSpaceEvent\",\n    \"XRRenderState\",\n    \"XRRigidTransform\",\n    \"XRSession\",\n    \"XRSessionEvent\",\n    \"XRSpace\",\n    \"XRSystem\",\n    \"XRTransientInputHitTestResult\",\n    \"XRTransientInputHitTestSource\",\n    \"XRView\",\n    \"XRViewerPose\",\n    \"XRViewport\",\n    \"XRWebGLLayer\",\n    \"XSLTProcessor\",\n    \"ZERO\",\n    \"_XD0M_\",\n    \"_YD0M_\",\n    \"__defineGetter__\",\n    \"__defineSetter__\",\n    \"__lookupGetter__\",\n    \"__lookupSetter__\",\n    \"__opera\",\n    \"__proto__\",\n    \"_browserjsran\",\n    \"a\",\n    \"aLink\",\n    \"abbr\",\n    \"abort\",\n    \"aborted\",\n    \"abs\",\n    \"absolute\",\n    \"acceleration\",\n    \"accelerationIncludingGravity\",\n    \"accelerator\",\n    \"accept\",\n    \"acceptCharset\",\n    \"acceptNode\",\n    \"accessKey\",\n    \"accessKeyLabel\",\n    \"accuracy\",\n    \"acos\",\n    \"acosh\",\n    \"action\",\n    \"actionURL\",\n    \"actions\",\n    \"activated\",\n    \"active\",\n    \"activeCues\",\n    \"activeElement\",\n    \"activeSourceBuffers\",\n    \"activeSourceCount\",\n    \"activeTexture\",\n    \"activeVRDisplays\",\n    \"actualBoundingBoxAscent\",\n    \"actualBoundingBoxDescent\",\n    \"actualBoundingBoxLeft\",\n    \"actualBoundingBoxRight\",\n    \"add\",\n    \"addAll\",\n    \"addBehavior\",\n    \"addCandidate\",\n    \"addColorStop\",\n    \"addCue\",\n    \"addElement\",\n    \"addEventListener\",\n    \"addFilter\",\n    \"addFromString\",\n    \"addFromUri\",\n    \"addIceCandidate\",\n    \"addImport\",\n    \"addListener\",\n    \"addModule\",\n    \"addNamed\",\n    \"addPageRule\",\n    \"addPath\",\n    \"addPointer\",\n    \"addRange\",\n    \"addRegion\",\n    \"addRule\",\n    \"addSearchEngine\",\n    \"addSourceBuffer\",\n    \"addStream\",\n    \"addTextTrack\",\n    \"addTrack\",\n    \"addTransceiver\",\n    \"addWakeLockListener\",\n    \"added\",\n    \"addedNodes\",\n    \"additionalName\",\n    \"additiveSymbols\",\n    \"addons\",\n    \"address\",\n    \"addressLine\",\n    \"adoptNode\",\n    \"adoptedStyleSheets\",\n    \"adr\",\n    \"advance\",\n    \"after\",\n    \"album\",\n    \"alert\",\n    \"algorithm\",\n    \"align\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignContent\",\n    \"alignItems\",\n    \"alignSelf\",\n    \"alignmentBaseline\",\n    \"alinkColor\",\n    \"all\",\n    \"allSettled\",\n    \"allow\",\n    \"allowFullscreen\",\n    \"allowPaymentRequest\",\n    \"allowedDirections\",\n    \"allowedFeatures\",\n    \"allowedToPlay\",\n    \"allowsFeature\",\n    \"alpha\",\n    \"alt\",\n    \"altGraphKey\",\n    \"altHtml\",\n    \"altKey\",\n    \"altLeft\",\n    \"alternate\",\n    \"alternateSetting\",\n    \"alternates\",\n    \"altitude\",\n    \"altitudeAccuracy\",\n    \"amplitude\",\n    \"ancestorOrigins\",\n    \"anchor\",\n    \"anchorNode\",\n    \"anchorOffset\",\n    \"anchors\",\n    \"and\",\n    \"angle\",\n    \"angularAcceleration\",\n    \"angularVelocity\",\n    \"animVal\",\n    \"animate\",\n    \"animatedInstanceRoot\",\n    \"animatedNormalizedPathSegList\",\n    \"animatedPathSegList\",\n    \"animatedPoints\",\n    \"animation\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-timing-function\",\n    \"animationDelay\",\n    \"animationDirection\",\n    \"animationDuration\",\n    \"animationFillMode\",\n    \"animationIterationCount\",\n    \"animationName\",\n    \"animationPlayState\",\n    \"animationStartTime\",\n    \"animationTimingFunction\",\n    \"animationsPaused\",\n    \"anniversary\",\n    \"antialias\",\n    \"anticipatedRemoval\",\n    \"any\",\n    \"app\",\n    \"appCodeName\",\n    \"appMinorVersion\",\n    \"appName\",\n    \"appNotifications\",\n    \"appVersion\",\n    \"appearance\",\n    \"append\",\n    \"appendBuffer\",\n    \"appendChild\",\n    \"appendData\",\n    \"appendItem\",\n    \"appendMedium\",\n    \"appendNamed\",\n    \"appendRule\",\n    \"appendStream\",\n    \"appendWindowEnd\",\n    \"appendWindowStart\",\n    \"applets\",\n    \"applicationCache\",\n    \"applicationServerKey\",\n    \"apply\",\n    \"applyConstraints\",\n    \"applyElement\",\n    \"arc\",\n    \"arcTo\",\n    \"architecture\",\n    \"archive\",\n    \"areas\",\n    \"arguments\",\n    \"ariaAtomic\",\n    \"ariaAutoComplete\",\n    \"ariaBusy\",\n    \"ariaChecked\",\n    \"ariaColCount\",\n    \"ariaColIndex\",\n    \"ariaColSpan\",\n    \"ariaCurrent\",\n    \"ariaDescription\",\n    \"ariaDisabled\",\n    \"ariaExpanded\",\n    \"ariaHasPopup\",\n    \"ariaHidden\",\n    \"ariaKeyShortcuts\",\n    \"ariaLabel\",\n    \"ariaLevel\",\n    \"ariaLive\",\n    \"ariaModal\",\n    \"ariaMultiLine\",\n    \"ariaMultiSelectable\",\n    \"ariaOrientation\",\n    \"ariaPlaceholder\",\n    \"ariaPosInSet\",\n    \"ariaPressed\",\n    \"ariaReadOnly\",\n    \"ariaRelevant\",\n    \"ariaRequired\",\n    \"ariaRoleDescription\",\n    \"ariaRowCount\",\n    \"ariaRowIndex\",\n    \"ariaRowSpan\",\n    \"ariaSelected\",\n    \"ariaSetSize\",\n    \"ariaSort\",\n    \"ariaValueMax\",\n    \"ariaValueMin\",\n    \"ariaValueNow\",\n    \"ariaValueText\",\n    \"arrayBuffer\",\n    \"artist\",\n    \"artwork\",\n    \"as\",\n    \"asIntN\",\n    \"asUintN\",\n    \"asin\",\n    \"asinh\",\n    \"assert\",\n    \"assign\",\n    \"assignedElements\",\n    \"assignedNodes\",\n    \"assignedSlot\",\n    \"async\",\n    \"asyncIterator\",\n    \"atEnd\",\n    \"atan\",\n    \"atan2\",\n    \"atanh\",\n    \"atob\",\n    \"attachEvent\",\n    \"attachInternals\",\n    \"attachShader\",\n    \"attachShadow\",\n    \"attachments\",\n    \"attack\",\n    \"attestationObject\",\n    \"attrChange\",\n    \"attrName\",\n    \"attributeFilter\",\n    \"attributeName\",\n    \"attributeNamespace\",\n    \"attributeOldValue\",\n    \"attributeStyleMap\",\n    \"attributes\",\n    \"attribution\",\n    \"audioBitsPerSecond\",\n    \"audioTracks\",\n    \"audioWorklet\",\n    \"authenticatedSignedWrites\",\n    \"authenticatorData\",\n    \"autoIncrement\",\n    \"autobuffer\",\n    \"autocapitalize\",\n    \"autocomplete\",\n    \"autocorrect\",\n    \"autofocus\",\n    \"automationRate\",\n    \"autoplay\",\n    \"availHeight\",\n    \"availLeft\",\n    \"availTop\",\n    \"availWidth\",\n    \"availability\",\n    \"available\",\n    \"aversion\",\n    \"ax\",\n    \"axes\",\n    \"axis\",\n    \"ay\",\n    \"azimuth\",\n    \"b\",\n    \"back\",\n    \"backface-visibility\",\n    \"backfaceVisibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-position-x\",\n    \"background-position-y\",\n    \"background-repeat\",\n    \"background-size\",\n    \"backgroundAttachment\",\n    \"backgroundBlendMode\",\n    \"backgroundClip\",\n    \"backgroundColor\",\n    \"backgroundFetch\",\n    \"backgroundImage\",\n    \"backgroundOrigin\",\n    \"backgroundPosition\",\n    \"backgroundPositionX\",\n    \"backgroundPositionY\",\n    \"backgroundRepeat\",\n    \"backgroundSize\",\n    \"badInput\",\n    \"badge\",\n    \"balance\",\n    \"baseFrequencyX\",\n    \"baseFrequencyY\",\n    \"baseLatency\",\n    \"baseLayer\",\n    \"baseNode\",\n    \"baseOffset\",\n    \"baseURI\",\n    \"baseVal\",\n    \"baselineShift\",\n    \"battery\",\n    \"bday\",\n    \"before\",\n    \"beginElement\",\n    \"beginElementAt\",\n    \"beginPath\",\n    \"beginQuery\",\n    \"beginTransformFeedback\",\n    \"behavior\",\n    \"behaviorCookie\",\n    \"behaviorPart\",\n    \"behaviorUrns\",\n    \"beta\",\n    \"bezierCurveTo\",\n    \"bgColor\",\n    \"bgProperties\",\n    \"bias\",\n    \"big\",\n    \"bigint64\",\n    \"biguint64\",\n    \"binaryType\",\n    \"bind\",\n    \"bindAttribLocation\",\n    \"bindBuffer\",\n    \"bindBufferBase\",\n    \"bindBufferRange\",\n    \"bindFramebuffer\",\n    \"bindRenderbuffer\",\n    \"bindSampler\",\n    \"bindTexture\",\n    \"bindTransformFeedback\",\n    \"bindVertexArray\",\n    \"bitness\",\n    \"blendColor\",\n    \"blendEquation\",\n    \"blendEquationSeparate\",\n    \"blendFunc\",\n    \"blendFuncSeparate\",\n    \"blink\",\n    \"blitFramebuffer\",\n    \"blob\",\n    \"block-size\",\n    \"blockDirection\",\n    \"blockSize\",\n    \"blockedURI\",\n    \"blue\",\n    \"bluetooth\",\n    \"blur\",\n    \"body\",\n    \"bodyUsed\",\n    \"bold\",\n    \"bookmarks\",\n    \"booleanValue\",\n    \"border\",\n    \"border-block\",\n    \"border-block-color\",\n    \"border-block-end\",\n    \"border-block-end-color\",\n    \"border-block-end-style\",\n    \"border-block-end-width\",\n    \"border-block-start\",\n    \"border-block-start-color\",\n    \"border-block-start-style\",\n    \"border-block-start-width\",\n    \"border-block-style\",\n    \"border-block-width\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-end-end-radius\",\n    \"border-end-start-radius\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-inline\",\n    \"border-inline-color\",\n    \"border-inline-end\",\n    \"border-inline-end-color\",\n    \"border-inline-end-style\",\n    \"border-inline-end-width\",\n    \"border-inline-start\",\n    \"border-inline-start-color\",\n    \"border-inline-start-style\",\n    \"border-inline-start-width\",\n    \"border-inline-style\",\n    \"border-inline-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-start-end-radius\",\n    \"border-start-start-radius\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"borderBlock\",\n    \"borderBlockColor\",\n    \"borderBlockEnd\",\n    \"borderBlockEndColor\",\n    \"borderBlockEndStyle\",\n    \"borderBlockEndWidth\",\n    \"borderBlockStart\",\n    \"borderBlockStartColor\",\n    \"borderBlockStartStyle\",\n    \"borderBlockStartWidth\",\n    \"borderBlockStyle\",\n    \"borderBlockWidth\",\n    \"borderBottom\",\n    \"borderBottomColor\",\n    \"borderBottomLeftRadius\",\n    \"borderBottomRightRadius\",\n    \"borderBottomStyle\",\n    \"borderBottomWidth\",\n    \"borderBoxSize\",\n    \"borderCollapse\",\n    \"borderColor\",\n    \"borderColorDark\",\n    \"borderColorLight\",\n    \"borderEndEndRadius\",\n    \"borderEndStartRadius\",\n    \"borderImage\",\n    \"borderImageOutset\",\n    \"borderImageRepeat\",\n    \"borderImageSlice\",\n    \"borderImageSource\",\n    \"borderImageWidth\",\n    \"borderInline\",\n    \"borderInlineColor\",\n    \"borderInlineEnd\",\n    \"borderInlineEndColor\",\n    \"borderInlineEndStyle\",\n    \"borderInlineEndWidth\",\n    \"borderInlineStart\",\n    \"borderInlineStartColor\",\n    \"borderInlineStartStyle\",\n    \"borderInlineStartWidth\",\n    \"borderInlineStyle\",\n    \"borderInlineWidth\",\n    \"borderLeft\",\n    \"borderLeftColor\",\n    \"borderLeftStyle\",\n    \"borderLeftWidth\",\n    \"borderRadius\",\n    \"borderRight\",\n    \"borderRightColor\",\n    \"borderRightStyle\",\n    \"borderRightWidth\",\n    \"borderSpacing\",\n    \"borderStartEndRadius\",\n    \"borderStartStartRadius\",\n    \"borderStyle\",\n    \"borderTop\",\n    \"borderTopColor\",\n    \"borderTopLeftRadius\",\n    \"borderTopRightRadius\",\n    \"borderTopStyle\",\n    \"borderTopWidth\",\n    \"borderWidth\",\n    \"bottom\",\n    \"bottomMargin\",\n    \"bound\",\n    \"boundElements\",\n    \"boundingClientRect\",\n    \"boundingHeight\",\n    \"boundingLeft\",\n    \"boundingTop\",\n    \"boundingWidth\",\n    \"bounds\",\n    \"boundsGeometry\",\n    \"box-decoration-break\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"boxDecorationBreak\",\n    \"boxShadow\",\n    \"boxSizing\",\n    \"brand\",\n    \"brands\",\n    \"break-after\",\n    \"break-before\",\n    \"break-inside\",\n    \"breakAfter\",\n    \"breakBefore\",\n    \"breakInside\",\n    \"broadcast\",\n    \"browserLanguage\",\n    \"btoa\",\n    \"bubbles\",\n    \"buffer\",\n    \"bufferData\",\n    \"bufferDepth\",\n    \"bufferSize\",\n    \"bufferSubData\",\n    \"buffered\",\n    \"bufferedAmount\",\n    \"bufferedAmountLowThreshold\",\n    \"buildID\",\n    \"buildNumber\",\n    \"button\",\n    \"buttonID\",\n    \"buttons\",\n    \"byteLength\",\n    \"byteOffset\",\n    \"bytesWritten\",\n    \"c\",\n    \"cache\",\n    \"caches\",\n    \"call\",\n    \"caller\",\n    \"canBeFormatted\",\n    \"canBeMounted\",\n    \"canBeShared\",\n    \"canHaveChildren\",\n    \"canHaveHTML\",\n    \"canInsertDTMF\",\n    \"canMakePayment\",\n    \"canPlayType\",\n    \"canPresent\",\n    \"canTrickleIceCandidates\",\n    \"cancel\",\n    \"cancelAndHoldAtTime\",\n    \"cancelAnimationFrame\",\n    \"cancelBubble\",\n    \"cancelIdleCallback\",\n    \"cancelScheduledValues\",\n    \"cancelVideoFrameCallback\",\n    \"cancelWatchAvailability\",\n    \"cancelable\",\n    \"candidate\",\n    \"canonicalUUID\",\n    \"canvas\",\n    \"capabilities\",\n    \"caption\",\n    \"caption-side\",\n    \"captionSide\",\n    \"capture\",\n    \"captureEvents\",\n    \"captureStackTrace\",\n    \"captureStream\",\n    \"caret-color\",\n    \"caretBidiLevel\",\n    \"caretColor\",\n    \"caretPositionFromPoint\",\n    \"caretRangeFromPoint\",\n    \"cast\",\n    \"catch\",\n    \"category\",\n    \"cbrt\",\n    \"cd\",\n    \"ceil\",\n    \"cellIndex\",\n    \"cellPadding\",\n    \"cellSpacing\",\n    \"cells\",\n    \"ch\",\n    \"chOff\",\n    \"chain\",\n    \"challenge\",\n    \"changeType\",\n    \"changedTouches\",\n    \"channel\",\n    \"channelCount\",\n    \"channelCountMode\",\n    \"channelInterpretation\",\n    \"char\",\n    \"charAt\",\n    \"charCode\",\n    \"charCodeAt\",\n    \"charIndex\",\n    \"charLength\",\n    \"characterData\",\n    \"characterDataOldValue\",\n    \"characterSet\",\n    \"characteristic\",\n    \"charging\",\n    \"chargingTime\",\n    \"charset\",\n    \"check\",\n    \"checkEnclosure\",\n    \"checkFramebufferStatus\",\n    \"checkIntersection\",\n    \"checkValidity\",\n    \"checked\",\n    \"childElementCount\",\n    \"childList\",\n    \"childNodes\",\n    \"children\",\n    \"chrome\",\n    \"ciphertext\",\n    \"cite\",\n    \"city\",\n    \"claimInterface\",\n    \"claimed\",\n    \"classList\",\n    \"className\",\n    \"classid\",\n    \"clear\",\n    \"clearAppBadge\",\n    \"clearAttributes\",\n    \"clearBufferfi\",\n    \"clearBufferfv\",\n    \"clearBufferiv\",\n    \"clearBufferuiv\",\n    \"clearColor\",\n    \"clearData\",\n    \"clearDepth\",\n    \"clearHalt\",\n    \"clearImmediate\",\n    \"clearInterval\",\n    \"clearLiveSeekableRange\",\n    \"clearMarks\",\n    \"clearMaxGCPauseAccumulator\",\n    \"clearMeasures\",\n    \"clearParameters\",\n    \"clearRect\",\n    \"clearResourceTimings\",\n    \"clearShadow\",\n    \"clearStencil\",\n    \"clearTimeout\",\n    \"clearWatch\",\n    \"click\",\n    \"clickCount\",\n    \"clientDataJSON\",\n    \"clientHeight\",\n    \"clientInformation\",\n    \"clientLeft\",\n    \"clientRect\",\n    \"clientRects\",\n    \"clientTop\",\n    \"clientWaitSync\",\n    \"clientWidth\",\n    \"clientX\",\n    \"clientY\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"clipBottom\",\n    \"clipLeft\",\n    \"clipPath\",\n    \"clipPathUnits\",\n    \"clipRight\",\n    \"clipRule\",\n    \"clipTop\",\n    \"clipboard\",\n    \"clipboardData\",\n    \"clone\",\n    \"cloneContents\",\n    \"cloneNode\",\n    \"cloneRange\",\n    \"close\",\n    \"closePath\",\n    \"closed\",\n    \"closest\",\n    \"clz\",\n    \"clz32\",\n    \"cm\",\n    \"cmp\",\n    \"code\",\n    \"codeBase\",\n    \"codePointAt\",\n    \"codeType\",\n    \"colSpan\",\n    \"collapse\",\n    \"collapseToEnd\",\n    \"collapseToStart\",\n    \"collapsed\",\n    \"collect\",\n    \"colno\",\n    \"color\",\n    \"color-adjust\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"colorAdjust\",\n    \"colorDepth\",\n    \"colorInterpolation\",\n    \"colorInterpolationFilters\",\n    \"colorMask\",\n    \"colorType\",\n    \"cols\",\n    \"column-count\",\n    \"column-fill\",\n    \"column-gap\",\n    \"column-rule\",\n    \"column-rule-color\",\n    \"column-rule-style\",\n    \"column-rule-width\",\n    \"column-span\",\n    \"column-width\",\n    \"columnCount\",\n    \"columnFill\",\n    \"columnGap\",\n    \"columnNumber\",\n    \"columnRule\",\n    \"columnRuleColor\",\n    \"columnRuleStyle\",\n    \"columnRuleWidth\",\n    \"columnSpan\",\n    \"columnWidth\",\n    \"columns\",\n    \"command\",\n    \"commit\",\n    \"commitPreferences\",\n    \"commitStyles\",\n    \"commonAncestorContainer\",\n    \"compact\",\n    \"compareBoundaryPoints\",\n    \"compareDocumentPosition\",\n    \"compareEndPoints\",\n    \"compareExchange\",\n    \"compareNode\",\n    \"comparePoint\",\n    \"compatMode\",\n    \"compatible\",\n    \"compile\",\n    \"compileShader\",\n    \"compileStreaming\",\n    \"complete\",\n    \"component\",\n    \"componentFromPoint\",\n    \"composed\",\n    \"composedPath\",\n    \"composite\",\n    \"compositionEndOffset\",\n    \"compositionStartOffset\",\n    \"compressedTexImage2D\",\n    \"compressedTexImage3D\",\n    \"compressedTexSubImage2D\",\n    \"compressedTexSubImage3D\",\n    \"computedStyleMap\",\n    \"concat\",\n    \"conditionText\",\n    \"coneInnerAngle\",\n    \"coneOuterAngle\",\n    \"coneOuterGain\",\n    \"configuration\",\n    \"configurationName\",\n    \"configurationValue\",\n    \"configurations\",\n    \"confirm\",\n    \"confirmComposition\",\n    \"confirmSiteSpecificTrackingException\",\n    \"confirmWebWideTrackingException\",\n    \"connect\",\n    \"connectEnd\",\n    \"connectShark\",\n    \"connectStart\",\n    \"connected\",\n    \"connection\",\n    \"connectionList\",\n    \"connectionSpeed\",\n    \"connectionState\",\n    \"connections\",\n    \"console\",\n    \"consolidate\",\n    \"constraint\",\n    \"constrictionActive\",\n    \"construct\",\n    \"constructor\",\n    \"contactID\",\n    \"contain\",\n    \"containerId\",\n    \"containerName\",\n    \"containerSrc\",\n    \"containerType\",\n    \"contains\",\n    \"containsNode\",\n    \"content\",\n    \"contentBoxSize\",\n    \"contentDocument\",\n    \"contentEditable\",\n    \"contentHint\",\n    \"contentOverflow\",\n    \"contentRect\",\n    \"contentScriptType\",\n    \"contentStyleType\",\n    \"contentType\",\n    \"contentWindow\",\n    \"context\",\n    \"contextMenu\",\n    \"contextmenu\",\n    \"continue\",\n    \"continuePrimaryKey\",\n    \"continuous\",\n    \"control\",\n    \"controlTransferIn\",\n    \"controlTransferOut\",\n    \"controller\",\n    \"controls\",\n    \"controlsList\",\n    \"convertPointFromNode\",\n    \"convertQuadFromNode\",\n    \"convertRectFromNode\",\n    \"convertToBlob\",\n    \"convertToSpecifiedUnits\",\n    \"cookie\",\n    \"cookieEnabled\",\n    \"coords\",\n    \"copyBufferSubData\",\n    \"copyFromChannel\",\n    \"copyTexImage2D\",\n    \"copyTexSubImage2D\",\n    \"copyTexSubImage3D\",\n    \"copyToChannel\",\n    \"copyWithin\",\n    \"correspondingElement\",\n    \"correspondingUseElement\",\n    \"corruptedVideoFrames\",\n    \"cos\",\n    \"cosh\",\n    \"count\",\n    \"countReset\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counter-set\",\n    \"counterIncrement\",\n    \"counterReset\",\n    \"counterSet\",\n    \"country\",\n    \"cpuClass\",\n    \"cpuSleepAllowed\",\n    \"create\",\n    \"createAnalyser\",\n    \"createAnswer\",\n    \"createAttribute\",\n    \"createAttributeNS\",\n    \"createBiquadFilter\",\n    \"createBuffer\",\n    \"createBufferSource\",\n    \"createCDATASection\",\n    \"createCSSStyleSheet\",\n    \"createCaption\",\n    \"createChannelMerger\",\n    \"createChannelSplitter\",\n    \"createComment\",\n    \"createConstantSource\",\n    \"createContextualFragment\",\n    \"createControlRange\",\n    \"createConvolver\",\n    \"createDTMFSender\",\n    \"createDataChannel\",\n    \"createDelay\",\n    \"createDelayNode\",\n    \"createDocument\",\n    \"createDocumentFragment\",\n    \"createDocumentType\",\n    \"createDynamicsCompressor\",\n    \"createElement\",\n    \"createElementNS\",\n    \"createEntityReference\",\n    \"createEvent\",\n    \"createEventObject\",\n    \"createExpression\",\n    \"createFramebuffer\",\n    \"createFunction\",\n    \"createGain\",\n    \"createGainNode\",\n    \"createHTML\",\n    \"createHTMLDocument\",\n    \"createIIRFilter\",\n    \"createImageBitmap\",\n    \"createImageData\",\n    \"createIndex\",\n    \"createJavaScriptNode\",\n    \"createLinearGradient\",\n    \"createMediaElementSource\",\n    \"createMediaKeys\",\n    \"createMediaStreamDestination\",\n    \"createMediaStreamSource\",\n    \"createMediaStreamTrackSource\",\n    \"createMutableFile\",\n    \"createNSResolver\",\n    \"createNodeIterator\",\n    \"createNotification\",\n    \"createObjectStore\",\n    \"createObjectURL\",\n    \"createOffer\",\n    \"createOscillator\",\n    \"createPanner\",\n    \"createPattern\",\n    \"createPeriodicWave\",\n    \"createPolicy\",\n    \"createPopup\",\n    \"createProcessingInstruction\",\n    \"createProgram\",\n    \"createQuery\",\n    \"createRadialGradient\",\n    \"createRange\",\n    \"createRangeCollection\",\n    \"createReader\",\n    \"createRenderbuffer\",\n    \"createSVGAngle\",\n    \"createSVGLength\",\n    \"createSVGMatrix\",\n    \"createSVGNumber\",\n    \"createSVGPathSegArcAbs\",\n    \"createSVGPathSegArcRel\",\n    \"createSVGPathSegClosePath\",\n    \"createSVGPathSegCurvetoCubicAbs\",\n    \"createSVGPathSegCurvetoCubicRel\",\n    \"createSVGPathSegCurvetoCubicSmoothAbs\",\n    \"createSVGPathSegCurvetoCubicSmoothRel\",\n    \"createSVGPathSegCurvetoQuadraticAbs\",\n    \"createSVGPathSegCurvetoQuadraticRel\",\n    \"createSVGPathSegCurvetoQuadraticSmoothAbs\",\n    \"createSVGPathSegCurvetoQuadraticSmoothRel\",\n    \"createSVGPathSegLinetoAbs\",\n    \"createSVGPathSegLinetoHorizontalAbs\",\n    \"createSVGPathSegLinetoHorizontalRel\",\n    \"createSVGPathSegLinetoRel\",\n    \"createSVGPathSegLinetoVerticalAbs\",\n    \"createSVGPathSegLinetoVerticalRel\",\n    \"createSVGPathSegMovetoAbs\",\n    \"createSVGPathSegMovetoRel\",\n    \"createSVGPoint\",\n    \"createSVGRect\",\n    \"createSVGTransform\",\n    \"createSVGTransformFromMatrix\",\n    \"createSampler\",\n    \"createScript\",\n    \"createScriptProcessor\",\n    \"createScriptURL\",\n    \"createSession\",\n    \"createShader\",\n    \"createShadowRoot\",\n    \"createStereoPanner\",\n    \"createStyleSheet\",\n    \"createTBody\",\n    \"createTFoot\",\n    \"createTHead\",\n    \"createTextNode\",\n    \"createTextRange\",\n    \"createTexture\",\n    \"createTouch\",\n    \"createTouchList\",\n    \"createTransformFeedback\",\n    \"createTreeWalker\",\n    \"createVertexArray\",\n    \"createWaveShaper\",\n    \"creationTime\",\n    \"credentials\",\n    \"crossOrigin\",\n    \"crossOriginIsolated\",\n    \"crypto\",\n    \"csi\",\n    \"csp\",\n    \"cssFloat\",\n    \"cssRules\",\n    \"cssText\",\n    \"cssValueType\",\n    \"ctrlKey\",\n    \"ctrlLeft\",\n    \"cues\",\n    \"cullFace\",\n    \"currentDirection\",\n    \"currentLocalDescription\",\n    \"currentNode\",\n    \"currentPage\",\n    \"currentRect\",\n    \"currentRemoteDescription\",\n    \"currentScale\",\n    \"currentScript\",\n    \"currentSrc\",\n    \"currentState\",\n    \"currentStyle\",\n    \"currentTarget\",\n    \"currentTime\",\n    \"currentTranslate\",\n    \"currentView\",\n    \"cursor\",\n    \"curve\",\n    \"customElements\",\n    \"customError\",\n    \"cx\",\n    \"cy\",\n    \"d\",\n    \"data\",\n    \"dataFld\",\n    \"dataFormatAs\",\n    \"dataLoss\",\n    \"dataLossMessage\",\n    \"dataPageSize\",\n    \"dataSrc\",\n    \"dataTransfer\",\n    \"database\",\n    \"databases\",\n    \"dataset\",\n    \"dateTime\",\n    \"db\",\n    \"debug\",\n    \"debuggerEnabled\",\n    \"declare\",\n    \"decode\",\n    \"decodeAudioData\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"decodedBodySize\",\n    \"decoding\",\n    \"decodingInfo\",\n    \"decrypt\",\n    \"default\",\n    \"defaultCharset\",\n    \"defaultChecked\",\n    \"defaultMuted\",\n    \"defaultPlaybackRate\",\n    \"defaultPolicy\",\n    \"defaultPrevented\",\n    \"defaultRequest\",\n    \"defaultSelected\",\n    \"defaultStatus\",\n    \"defaultURL\",\n    \"defaultValue\",\n    \"defaultView\",\n    \"defaultstatus\",\n    \"defer\",\n    \"define\",\n    \"defineMagicFunction\",\n    \"defineMagicVariable\",\n    \"defineProperties\",\n    \"defineProperty\",\n    \"deg\",\n    \"delay\",\n    \"delayTime\",\n    \"delegatesFocus\",\n    \"delete\",\n    \"deleteBuffer\",\n    \"deleteCaption\",\n    \"deleteCell\",\n    \"deleteContents\",\n    \"deleteData\",\n    \"deleteDatabase\",\n    \"deleteFramebuffer\",\n    \"deleteFromDocument\",\n    \"deleteIndex\",\n    \"deleteMedium\",\n    \"deleteObjectStore\",\n    \"deleteProgram\",\n    \"deleteProperty\",\n    \"deleteQuery\",\n    \"deleteRenderbuffer\",\n    \"deleteRow\",\n    \"deleteRule\",\n    \"deleteSampler\",\n    \"deleteShader\",\n    \"deleteSync\",\n    \"deleteTFoot\",\n    \"deleteTHead\",\n    \"deleteTexture\",\n    \"deleteTransformFeedback\",\n    \"deleteVertexArray\",\n    \"deliverChangeRecords\",\n    \"delivery\",\n    \"deliveryInfo\",\n    \"deliveryStatus\",\n    \"deliveryTimestamp\",\n    \"delta\",\n    \"deltaMode\",\n    \"deltaX\",\n    \"deltaY\",\n    \"deltaZ\",\n    \"dependentLocality\",\n    \"depthFar\",\n    \"depthFunc\",\n    \"depthMask\",\n    \"depthNear\",\n    \"depthRange\",\n    \"deref\",\n    \"deriveBits\",\n    \"deriveKey\",\n    \"description\",\n    \"deselectAll\",\n    \"designMode\",\n    \"desiredSize\",\n    \"destination\",\n    \"destinationURL\",\n    \"detach\",\n    \"detachEvent\",\n    \"detachShader\",\n    \"detail\",\n    \"details\",\n    \"detect\",\n    \"detune\",\n    \"device\",\n    \"deviceClass\",\n    \"deviceId\",\n    \"deviceMemory\",\n    \"devicePixelContentBoxSize\",\n    \"devicePixelRatio\",\n    \"deviceProtocol\",\n    \"deviceSubclass\",\n    \"deviceVersionMajor\",\n    \"deviceVersionMinor\",\n    \"deviceVersionSubminor\",\n    \"deviceXDPI\",\n    \"deviceYDPI\",\n    \"didTimeout\",\n    \"diffuseConstant\",\n    \"digest\",\n    \"dimensions\",\n    \"dir\",\n    \"dirName\",\n    \"direction\",\n    \"dirxml\",\n    \"disable\",\n    \"disablePictureInPicture\",\n    \"disableRemotePlayback\",\n    \"disableVertexAttribArray\",\n    \"disabled\",\n    \"dischargingTime\",\n    \"disconnect\",\n    \"disconnectShark\",\n    \"dispatchEvent\",\n    \"display\",\n    \"displayId\",\n    \"displayName\",\n    \"disposition\",\n    \"distanceModel\",\n    \"div\",\n    \"divisor\",\n    \"djsapi\",\n    \"djsproxy\",\n    \"doImport\",\n    \"doNotTrack\",\n    \"doScroll\",\n    \"doctype\",\n    \"document\",\n    \"documentElement\",\n    \"documentMode\",\n    \"documentURI\",\n    \"dolphin\",\n    \"dolphinGameCenter\",\n    \"dolphininfo\",\n    \"dolphinmeta\",\n    \"domComplete\",\n    \"domContentLoadedEventEnd\",\n    \"domContentLoadedEventStart\",\n    \"domInteractive\",\n    \"domLoading\",\n    \"domOverlayState\",\n    \"domain\",\n    \"domainLookupEnd\",\n    \"domainLookupStart\",\n    \"dominant-baseline\",\n    \"dominantBaseline\",\n    \"done\",\n    \"dopplerFactor\",\n    \"dotAll\",\n    \"downDegrees\",\n    \"downlink\",\n    \"download\",\n    \"downloadTotal\",\n    \"downloaded\",\n    \"dpcm\",\n    \"dpi\",\n    \"dppx\",\n    \"dragDrop\",\n    \"draggable\",\n    \"drawArrays\",\n    \"drawArraysInstanced\",\n    \"drawArraysInstancedANGLE\",\n    \"drawBuffers\",\n    \"drawCustomFocusRing\",\n    \"drawElements\",\n    \"drawElementsInstanced\",\n    \"drawElementsInstancedANGLE\",\n    \"drawFocusIfNeeded\",\n    \"drawImage\",\n    \"drawImageFromRect\",\n    \"drawRangeElements\",\n    \"drawSystemFocusRing\",\n    \"drawingBufferHeight\",\n    \"drawingBufferWidth\",\n    \"dropEffect\",\n    \"droppedVideoFrames\",\n    \"dropzone\",\n    \"dtmf\",\n    \"dump\",\n    \"dumpProfile\",\n    \"duplicate\",\n    \"durability\",\n    \"duration\",\n    \"dvname\",\n    \"dvnum\",\n    \"dx\",\n    \"dy\",\n    \"dynsrc\",\n    \"e\",\n    \"edgeMode\",\n    \"effect\",\n    \"effectAllowed\",\n    \"effectiveDirective\",\n    \"effectiveType\",\n    \"elapsedTime\",\n    \"element\",\n    \"elementFromPoint\",\n    \"elementTiming\",\n    \"elements\",\n    \"elementsFromPoint\",\n    \"elevation\",\n    \"ellipse\",\n    \"em\",\n    \"email\",\n    \"embeds\",\n    \"emma\",\n    \"empty\",\n    \"empty-cells\",\n    \"emptyCells\",\n    \"emptyHTML\",\n    \"emptyScript\",\n    \"emulatedPosition\",\n    \"enable\",\n    \"enableBackground\",\n    \"enableDelegations\",\n    \"enableStyleSheetsForSet\",\n    \"enableVertexAttribArray\",\n    \"enabled\",\n    \"enabledPlugin\",\n    \"encode\",\n    \"encodeInto\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"encodedBodySize\",\n    \"encoding\",\n    \"encodingInfo\",\n    \"encrypt\",\n    \"enctype\",\n    \"end\",\n    \"endContainer\",\n    \"endElement\",\n    \"endElementAt\",\n    \"endOfStream\",\n    \"endOffset\",\n    \"endQuery\",\n    \"endTime\",\n    \"endTransformFeedback\",\n    \"ended\",\n    \"endpoint\",\n    \"endpointNumber\",\n    \"endpoints\",\n    \"endsWith\",\n    \"enterKeyHint\",\n    \"entities\",\n    \"entries\",\n    \"entryType\",\n    \"enumerate\",\n    \"enumerateDevices\",\n    \"enumerateEditable\",\n    \"environmentBlendMode\",\n    \"equals\",\n    \"error\",\n    \"errorCode\",\n    \"errorDetail\",\n    \"errorText\",\n    \"escape\",\n    \"estimate\",\n    \"eval\",\n    \"evaluate\",\n    \"event\",\n    \"eventPhase\",\n    \"every\",\n    \"ex\",\n    \"exception\",\n    \"exchange\",\n    \"exec\",\n    \"execCommand\",\n    \"execCommandShowHelp\",\n    \"execScript\",\n    \"exitFullscreen\",\n    \"exitPictureInPicture\",\n    \"exitPointerLock\",\n    \"exitPresent\",\n    \"exp\",\n    \"expand\",\n    \"expandEntityReferences\",\n    \"expando\",\n    \"expansion\",\n    \"expiration\",\n    \"expirationTime\",\n    \"expires\",\n    \"expiryDate\",\n    \"explicitOriginalTarget\",\n    \"expm1\",\n    \"exponent\",\n    \"exponentialRampToValueAtTime\",\n    \"exportKey\",\n    \"exports\",\n    \"extend\",\n    \"extensions\",\n    \"extentNode\",\n    \"extentOffset\",\n    \"external\",\n    \"externalResourcesRequired\",\n    \"extractContents\",\n    \"extractable\",\n    \"eye\",\n    \"f\",\n    \"face\",\n    \"factoryReset\",\n    \"failureReason\",\n    \"fallback\",\n    \"family\",\n    \"familyName\",\n    \"farthestViewportElement\",\n    \"fastSeek\",\n    \"fatal\",\n    \"featureId\",\n    \"featurePolicy\",\n    \"featureSettings\",\n    \"features\",\n    \"fenceSync\",\n    \"fetch\",\n    \"fetchStart\",\n    \"fftSize\",\n    \"fgColor\",\n    \"fieldOfView\",\n    \"file\",\n    \"fileCreatedDate\",\n    \"fileHandle\",\n    \"fileModifiedDate\",\n    \"fileName\",\n    \"fileSize\",\n    \"fileUpdatedDate\",\n    \"filename\",\n    \"files\",\n    \"filesystem\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"fillLightMode\",\n    \"fillOpacity\",\n    \"fillRect\",\n    \"fillRule\",\n    \"fillStyle\",\n    \"fillText\",\n    \"filter\",\n    \"filterResX\",\n    \"filterResY\",\n    \"filterUnits\",\n    \"filters\",\n    \"finally\",\n    \"find\",\n    \"findIndex\",\n    \"findRule\",\n    \"findText\",\n    \"finish\",\n    \"finished\",\n    \"fireEvent\",\n    \"firesTouchEvents\",\n    \"firstChild\",\n    \"firstElementChild\",\n    \"firstPage\",\n    \"fixed\",\n    \"flags\",\n    \"flat\",\n    \"flatMap\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"flexBasis\",\n    \"flexDirection\",\n    \"flexFlow\",\n    \"flexGrow\",\n    \"flexShrink\",\n    \"flexWrap\",\n    \"flipX\",\n    \"flipY\",\n    \"float\",\n    \"float32\",\n    \"float64\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"floodColor\",\n    \"floodOpacity\",\n    \"floor\",\n    \"flush\",\n    \"focus\",\n    \"focusNode\",\n    \"focusOffset\",\n    \"font\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-optical-sizing\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-variation-settings\",\n    \"font-weight\",\n    \"fontFamily\",\n    \"fontFeatureSettings\",\n    \"fontKerning\",\n    \"fontLanguageOverride\",\n    \"fontOpticalSizing\",\n    \"fontSize\",\n    \"fontSizeAdjust\",\n    \"fontSmoothingEnabled\",\n    \"fontStretch\",\n    \"fontStyle\",\n    \"fontSynthesis\",\n    \"fontVariant\",\n    \"fontVariantAlternates\",\n    \"fontVariantCaps\",\n    \"fontVariantEastAsian\",\n    \"fontVariantLigatures\",\n    \"fontVariantNumeric\",\n    \"fontVariantPosition\",\n    \"fontVariationSettings\",\n    \"fontWeight\",\n    \"fontcolor\",\n    \"fontfaces\",\n    \"fonts\",\n    \"fontsize\",\n    \"for\",\n    \"forEach\",\n    \"force\",\n    \"forceRedraw\",\n    \"form\",\n    \"formAction\",\n    \"formData\",\n    \"formEnctype\",\n    \"formMethod\",\n    \"formNoValidate\",\n    \"formTarget\",\n    \"format\",\n    \"formatToParts\",\n    \"forms\",\n    \"forward\",\n    \"forwardX\",\n    \"forwardY\",\n    \"forwardZ\",\n    \"foundation\",\n    \"fr\",\n    \"fragmentDirective\",\n    \"frame\",\n    \"frameBorder\",\n    \"frameElement\",\n    \"frameSpacing\",\n    \"framebuffer\",\n    \"framebufferHeight\",\n    \"framebufferRenderbuffer\",\n    \"framebufferTexture2D\",\n    \"framebufferTextureLayer\",\n    \"framebufferWidth\",\n    \"frames\",\n    \"freeSpace\",\n    \"freeze\",\n    \"frequency\",\n    \"frequencyBinCount\",\n    \"from\",\n    \"fromCharCode\",\n    \"fromCodePoint\",\n    \"fromElement\",\n    \"fromEntries\",\n    \"fromFloat32Array\",\n    \"fromFloat64Array\",\n    \"fromMatrix\",\n    \"fromPoint\",\n    \"fromQuad\",\n    \"fromRect\",\n    \"frontFace\",\n    \"fround\",\n    \"fullPath\",\n    \"fullScreen\",\n    \"fullVersionList\",\n    \"fullscreen\",\n    \"fullscreenElement\",\n    \"fullscreenEnabled\",\n    \"fx\",\n    \"fy\",\n    \"gain\",\n    \"gamepad\",\n    \"gamma\",\n    \"gap\",\n    \"gatheringState\",\n    \"gatt\",\n    \"genderIdentity\",\n    \"generateCertificate\",\n    \"generateKey\",\n    \"generateMipmap\",\n    \"generateRequest\",\n    \"geolocation\",\n    \"gestureObject\",\n    \"get\",\n    \"getActiveAttrib\",\n    \"getActiveUniform\",\n    \"getActiveUniformBlockName\",\n    \"getActiveUniformBlockParameter\",\n    \"getActiveUniforms\",\n    \"getAdjacentText\",\n    \"getAll\",\n    \"getAllKeys\",\n    \"getAllResponseHeaders\",\n    \"getAllowlistForFeature\",\n    \"getAnimations\",\n    \"getAsFile\",\n    \"getAsString\",\n    \"getAttachedShaders\",\n    \"getAttribLocation\",\n    \"getAttribute\",\n    \"getAttributeNS\",\n    \"getAttributeNames\",\n    \"getAttributeNode\",\n    \"getAttributeNodeNS\",\n    \"getAttributeType\",\n    \"getAudioTracks\",\n    \"getAvailability\",\n    \"getBBox\",\n    \"getBattery\",\n    \"getBigInt64\",\n    \"getBigUint64\",\n    \"getBlob\",\n    \"getBookmark\",\n    \"getBoundingClientRect\",\n    \"getBounds\",\n    \"getBoxQuads\",\n    \"getBufferParameter\",\n    \"getBufferSubData\",\n    \"getByteFrequencyData\",\n    \"getByteTimeDomainData\",\n    \"getCSSCanvasContext\",\n    \"getCTM\",\n    \"getCandidateWindowClientRect\",\n    \"getCanonicalLocales\",\n    \"getCapabilities\",\n    \"getChannelData\",\n    \"getCharNumAtPosition\",\n    \"getCharacteristic\",\n    \"getCharacteristics\",\n    \"getClientExtensionResults\",\n    \"getClientRect\",\n    \"getClientRects\",\n    \"getCoalescedEvents\",\n    \"getCompositionAlternatives\",\n    \"getComputedStyle\",\n    \"getComputedTextLength\",\n    \"getComputedTiming\",\n    \"getConfiguration\",\n    \"getConstraints\",\n    \"getContext\",\n    \"getContextAttributes\",\n    \"getContributingSources\",\n    \"getCounterValue\",\n    \"getCueAsHTML\",\n    \"getCueById\",\n    \"getCurrentPosition\",\n    \"getCurrentTime\",\n    \"getData\",\n    \"getDatabaseNames\",\n    \"getDate\",\n    \"getDay\",\n    \"getDefaultComputedStyle\",\n    \"getDescriptor\",\n    \"getDescriptors\",\n    \"getDestinationInsertionPoints\",\n    \"getDevices\",\n    \"getDirectory\",\n    \"getDisplayMedia\",\n    \"getDistributedNodes\",\n    \"getEditable\",\n    \"getElementById\",\n    \"getElementsByClassName\",\n    \"getElementsByName\",\n    \"getElementsByTagName\",\n    \"getElementsByTagNameNS\",\n    \"getEnclosureList\",\n    \"getEndPositionOfChar\",\n    \"getEntries\",\n    \"getEntriesByName\",\n    \"getEntriesByType\",\n    \"getError\",\n    \"getExtension\",\n    \"getExtentOfChar\",\n    \"getEyeParameters\",\n    \"getFeature\",\n    \"getFile\",\n    \"getFiles\",\n    \"getFilesAndDirectories\",\n    \"getFingerprints\",\n    \"getFloat32\",\n    \"getFloat64\",\n    \"getFloatFrequencyData\",\n    \"getFloatTimeDomainData\",\n    \"getFloatValue\",\n    \"getFragDataLocation\",\n    \"getFrameData\",\n    \"getFramebufferAttachmentParameter\",\n    \"getFrequencyResponse\",\n    \"getFullYear\",\n    \"getGamepads\",\n    \"getHighEntropyValues\",\n    \"getHitTestResults\",\n    \"getHitTestResultsForTransientInput\",\n    \"getHours\",\n    \"getIdentityAssertion\",\n    \"getIds\",\n    \"getImageData\",\n    \"getIndexedParameter\",\n    \"getInstalledRelatedApps\",\n    \"getInt16\",\n    \"getInt32\",\n    \"getInt8\",\n    \"getInternalformatParameter\",\n    \"getIntersectionList\",\n    \"getItem\",\n    \"getItems\",\n    \"getKey\",\n    \"getKeyframes\",\n    \"getLayers\",\n    \"getLayoutMap\",\n    \"getLineDash\",\n    \"getLocalCandidates\",\n    \"getLocalParameters\",\n    \"getLocalStreams\",\n    \"getMarks\",\n    \"getMatchedCSSRules\",\n    \"getMaxGCPauseSinceClear\",\n    \"getMeasures\",\n    \"getMetadata\",\n    \"getMilliseconds\",\n    \"getMinutes\",\n    \"getModifierState\",\n    \"getMonth\",\n    \"getNamedItem\",\n    \"getNamedItemNS\",\n    \"getNativeFramebufferScaleFactor\",\n    \"getNotifications\",\n    \"getNotifier\",\n    \"getNumberOfChars\",\n    \"getOffsetReferenceSpace\",\n    \"getOutputTimestamp\",\n    \"getOverrideHistoryNavigationMode\",\n    \"getOverrideStyle\",\n    \"getOwnPropertyDescriptor\",\n    \"getOwnPropertyDescriptors\",\n    \"getOwnPropertyNames\",\n    \"getOwnPropertySymbols\",\n    \"getParameter\",\n    \"getParameters\",\n    \"getParent\",\n    \"getPathSegAtLength\",\n    \"getPhotoCapabilities\",\n    \"getPhotoSettings\",\n    \"getPointAtLength\",\n    \"getPose\",\n    \"getPredictedEvents\",\n    \"getPreference\",\n    \"getPreferenceDefault\",\n    \"getPresentationAttribute\",\n    \"getPreventDefault\",\n    \"getPrimaryService\",\n    \"getPrimaryServices\",\n    \"getProgramInfoLog\",\n    \"getProgramParameter\",\n    \"getPropertyCSSValue\",\n    \"getPropertyPriority\",\n    \"getPropertyShorthand\",\n    \"getPropertyType\",\n    \"getPropertyValue\",\n    \"getPrototypeOf\",\n    \"getQuery\",\n    \"getQueryParameter\",\n    \"getRGBColorValue\",\n    \"getRandomValues\",\n    \"getRangeAt\",\n    \"getReader\",\n    \"getReceivers\",\n    \"getRectValue\",\n    \"getRegistration\",\n    \"getRegistrations\",\n    \"getRemoteCandidates\",\n    \"getRemoteCertificates\",\n    \"getRemoteParameters\",\n    \"getRemoteStreams\",\n    \"getRenderbufferParameter\",\n    \"getResponseHeader\",\n    \"getRoot\",\n    \"getRootNode\",\n    \"getRotationOfChar\",\n    \"getSVGDocument\",\n    \"getSamplerParameter\",\n    \"getScreenCTM\",\n    \"getSeconds\",\n    \"getSelectedCandidatePair\",\n    \"getSelection\",\n    \"getSenders\",\n    \"getService\",\n    \"getSettings\",\n    \"getShaderInfoLog\",\n    \"getShaderParameter\",\n    \"getShaderPrecisionFormat\",\n    \"getShaderSource\",\n    \"getSimpleDuration\",\n    \"getSiteIcons\",\n    \"getSources\",\n    \"getSpeculativeParserUrls\",\n    \"getStartPositionOfChar\",\n    \"getStartTime\",\n    \"getState\",\n    \"getStats\",\n    \"getStatusForPolicy\",\n    \"getStorageUpdates\",\n    \"getStreamById\",\n    \"getStringValue\",\n    \"getSubStringLength\",\n    \"getSubscription\",\n    \"getSupportedConstraints\",\n    \"getSupportedExtensions\",\n    \"getSupportedFormats\",\n    \"getSyncParameter\",\n    \"getSynchronizationSources\",\n    \"getTags\",\n    \"getTargetRanges\",\n    \"getTexParameter\",\n    \"getTime\",\n    \"getTimezoneOffset\",\n    \"getTiming\",\n    \"getTotalLength\",\n    \"getTrackById\",\n    \"getTracks\",\n    \"getTransceivers\",\n    \"getTransform\",\n    \"getTransformFeedbackVarying\",\n    \"getTransformToElement\",\n    \"getTransports\",\n    \"getType\",\n    \"getTypeMapping\",\n    \"getUTCDate\",\n    \"getUTCDay\",\n    \"getUTCFullYear\",\n    \"getUTCHours\",\n    \"getUTCMilliseconds\",\n    \"getUTCMinutes\",\n    \"getUTCMonth\",\n    \"getUTCSeconds\",\n    \"getUint16\",\n    \"getUint32\",\n    \"getUint8\",\n    \"getUniform\",\n    \"getUniformBlockIndex\",\n    \"getUniformIndices\",\n    \"getUniformLocation\",\n    \"getUserMedia\",\n    \"getVRDisplays\",\n    \"getValues\",\n    \"getVarDate\",\n    \"getVariableValue\",\n    \"getVertexAttrib\",\n    \"getVertexAttribOffset\",\n    \"getVideoPlaybackQuality\",\n    \"getVideoTracks\",\n    \"getViewerPose\",\n    \"getViewport\",\n    \"getVoices\",\n    \"getWakeLockState\",\n    \"getWriter\",\n    \"getYear\",\n    \"givenName\",\n    \"global\",\n    \"globalAlpha\",\n    \"globalCompositeOperation\",\n    \"globalThis\",\n    \"glyphOrientationHorizontal\",\n    \"glyphOrientationVertical\",\n    \"glyphRef\",\n    \"go\",\n    \"grabFrame\",\n    \"grad\",\n    \"gradientTransform\",\n    \"gradientUnits\",\n    \"grammars\",\n    \"green\",\n    \"grid\",\n    \"grid-area\",\n    \"grid-auto-columns\",\n    \"grid-auto-flow\",\n    \"grid-auto-rows\",\n    \"grid-column\",\n    \"grid-column-end\",\n    \"grid-column-gap\",\n    \"grid-column-start\",\n    \"grid-gap\",\n    \"grid-row\",\n    \"grid-row-end\",\n    \"grid-row-gap\",\n    \"grid-row-start\",\n    \"grid-template\",\n    \"grid-template-areas\",\n    \"grid-template-columns\",\n    \"grid-template-rows\",\n    \"gridArea\",\n    \"gridAutoColumns\",\n    \"gridAutoFlow\",\n    \"gridAutoRows\",\n    \"gridColumn\",\n    \"gridColumnEnd\",\n    \"gridColumnGap\",\n    \"gridColumnStart\",\n    \"gridGap\",\n    \"gridRow\",\n    \"gridRowEnd\",\n    \"gridRowGap\",\n    \"gridRowStart\",\n    \"gridTemplate\",\n    \"gridTemplateAreas\",\n    \"gridTemplateColumns\",\n    \"gridTemplateRows\",\n    \"gripSpace\",\n    \"group\",\n    \"groupCollapsed\",\n    \"groupEnd\",\n    \"groupId\",\n    \"hadRecentInput\",\n    \"hand\",\n    \"handedness\",\n    \"hapticActuators\",\n    \"hardwareConcurrency\",\n    \"has\",\n    \"hasAttribute\",\n    \"hasAttributeNS\",\n    \"hasAttributes\",\n    \"hasBeenActive\",\n    \"hasChildNodes\",\n    \"hasComposition\",\n    \"hasEnrolledInstrument\",\n    \"hasExtension\",\n    \"hasExternalDisplay\",\n    \"hasFeature\",\n    \"hasFocus\",\n    \"hasInstance\",\n    \"hasLayout\",\n    \"hasOrientation\",\n    \"hasOwnProperty\",\n    \"hasPointerCapture\",\n    \"hasPosition\",\n    \"hasReading\",\n    \"hasStorageAccess\",\n    \"hash\",\n    \"head\",\n    \"headers\",\n    \"heading\",\n    \"height\",\n    \"hidden\",\n    \"hide\",\n    \"hideFocus\",\n    \"high\",\n    \"highWaterMark\",\n    \"hint\",\n    \"history\",\n    \"honorificPrefix\",\n    \"honorificSuffix\",\n    \"horizontalOverflow\",\n    \"host\",\n    \"hostCandidate\",\n    \"hostname\",\n    \"href\",\n    \"hrefTranslate\",\n    \"hreflang\",\n    \"hspace\",\n    \"html5TagCheckInerface\",\n    \"htmlFor\",\n    \"htmlText\",\n    \"httpEquiv\",\n    \"httpRequestStatusCode\",\n    \"hwTimestamp\",\n    \"hyphens\",\n    \"hypot\",\n    \"iccId\",\n    \"iceConnectionState\",\n    \"iceGatheringState\",\n    \"iceTransport\",\n    \"icon\",\n    \"iconURL\",\n    \"id\",\n    \"identifier\",\n    \"identity\",\n    \"idpLoginUrl\",\n    \"ignoreBOM\",\n    \"ignoreCase\",\n    \"ignoreDepthValues\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"imageHeight\",\n    \"imageOrientation\",\n    \"imageRendering\",\n    \"imageSizes\",\n    \"imageSmoothingEnabled\",\n    \"imageSmoothingQuality\",\n    \"imageSrcset\",\n    \"imageWidth\",\n    \"images\",\n    \"ime-mode\",\n    \"imeMode\",\n    \"implementation\",\n    \"importKey\",\n    \"importNode\",\n    \"importStylesheet\",\n    \"imports\",\n    \"impp\",\n    \"imul\",\n    \"in\",\n    \"in1\",\n    \"in2\",\n    \"inBandMetadataTrackDispatchType\",\n    \"inRange\",\n    \"includes\",\n    \"incremental\",\n    \"indeterminate\",\n    \"index\",\n    \"indexNames\",\n    \"indexOf\",\n    \"indexedDB\",\n    \"indicate\",\n    \"inertiaDestinationX\",\n    \"inertiaDestinationY\",\n    \"info\",\n    \"init\",\n    \"initAnimationEvent\",\n    \"initBeforeLoadEvent\",\n    \"initClipboardEvent\",\n    \"initCloseEvent\",\n    \"initCommandEvent\",\n    \"initCompositionEvent\",\n    \"initCustomEvent\",\n    \"initData\",\n    \"initDataType\",\n    \"initDeviceMotionEvent\",\n    \"initDeviceOrientationEvent\",\n    \"initDragEvent\",\n    \"initErrorEvent\",\n    \"initEvent\",\n    \"initFocusEvent\",\n    \"initGestureEvent\",\n    \"initHashChangeEvent\",\n    \"initKeyEvent\",\n    \"initKeyboardEvent\",\n    \"initMSManipulationEvent\",\n    \"initMessageEvent\",\n    \"initMouseEvent\",\n    \"initMouseScrollEvent\",\n    \"initMouseWheelEvent\",\n    \"initMutationEvent\",\n    \"initNSMouseEvent\",\n    \"initOverflowEvent\",\n    \"initPageEvent\",\n    \"initPageTransitionEvent\",\n    \"initPointerEvent\",\n    \"initPopStateEvent\",\n    \"initProgressEvent\",\n    \"initScrollAreaEvent\",\n    \"initSimpleGestureEvent\",\n    \"initStorageEvent\",\n    \"initTextEvent\",\n    \"initTimeEvent\",\n    \"initTouchEvent\",\n    \"initTransitionEvent\",\n    \"initUIEvent\",\n    \"initWebKitAnimationEvent\",\n    \"initWebKitTransitionEvent\",\n    \"initWebKitWheelEvent\",\n    \"initWheelEvent\",\n    \"initialTime\",\n    \"initialize\",\n    \"initiatorType\",\n    \"inline-size\",\n    \"inlineSize\",\n    \"inlineVerticalFieldOfView\",\n    \"inner\",\n    \"innerHTML\",\n    \"innerHeight\",\n    \"innerText\",\n    \"innerWidth\",\n    \"input\",\n    \"inputBuffer\",\n    \"inputEncoding\",\n    \"inputMethod\",\n    \"inputMode\",\n    \"inputSource\",\n    \"inputSources\",\n    \"inputType\",\n    \"inputs\",\n    \"insertAdjacentElement\",\n    \"insertAdjacentHTML\",\n    \"insertAdjacentText\",\n    \"insertBefore\",\n    \"insertCell\",\n    \"insertDTMF\",\n    \"insertData\",\n    \"insertItemBefore\",\n    \"insertNode\",\n    \"insertRow\",\n    \"insertRule\",\n    \"inset\",\n    \"inset-block\",\n    \"inset-block-end\",\n    \"inset-block-start\",\n    \"inset-inline\",\n    \"inset-inline-end\",\n    \"inset-inline-start\",\n    \"insetBlock\",\n    \"insetBlockEnd\",\n    \"insetBlockStart\",\n    \"insetInline\",\n    \"insetInlineEnd\",\n    \"insetInlineStart\",\n    \"installing\",\n    \"instanceRoot\",\n    \"instantiate\",\n    \"instantiateStreaming\",\n    \"instruments\",\n    \"int16\",\n    \"int32\",\n    \"int8\",\n    \"integrity\",\n    \"interactionMode\",\n    \"intercept\",\n    \"interfaceClass\",\n    \"interfaceName\",\n    \"interfaceNumber\",\n    \"interfaceProtocol\",\n    \"interfaceSubclass\",\n    \"interfaces\",\n    \"interimResults\",\n    \"internalSubset\",\n    \"interpretation\",\n    \"intersectionRatio\",\n    \"intersectionRect\",\n    \"intersectsNode\",\n    \"interval\",\n    \"invalidIteratorState\",\n    \"invalidateFramebuffer\",\n    \"invalidateSubFramebuffer\",\n    \"inverse\",\n    \"invertSelf\",\n    \"is\",\n    \"is2D\",\n    \"isActive\",\n    \"isAlternate\",\n    \"isArray\",\n    \"isBingCurrentSearchDefault\",\n    \"isBuffer\",\n    \"isCandidateWindowVisible\",\n    \"isChar\",\n    \"isCollapsed\",\n    \"isComposing\",\n    \"isConcatSpreadable\",\n    \"isConnected\",\n    \"isContentEditable\",\n    \"isContentHandlerRegistered\",\n    \"isContextLost\",\n    \"isDefaultNamespace\",\n    \"isDirectory\",\n    \"isDisabled\",\n    \"isEnabled\",\n    \"isEqual\",\n    \"isEqualNode\",\n    \"isExtensible\",\n    \"isExternalCTAP2SecurityKeySupported\",\n    \"isFile\",\n    \"isFinite\",\n    \"isFramebuffer\",\n    \"isFrozen\",\n    \"isGenerator\",\n    \"isHTML\",\n    \"isHistoryNavigation\",\n    \"isId\",\n    \"isIdentity\",\n    \"isInjected\",\n    \"isInteger\",\n    \"isIntersecting\",\n    \"isLockFree\",\n    \"isMap\",\n    \"isMultiLine\",\n    \"isNaN\",\n    \"isOpen\",\n    \"isPointInFill\",\n    \"isPointInPath\",\n    \"isPointInRange\",\n    \"isPointInStroke\",\n    \"isPrefAlternate\",\n    \"isPresenting\",\n    \"isPrimary\",\n    \"isProgram\",\n    \"isPropertyImplicit\",\n    \"isProtocolHandlerRegistered\",\n    \"isPrototypeOf\",\n    \"isQuery\",\n    \"isRenderbuffer\",\n    \"isSafeInteger\",\n    \"isSameNode\",\n    \"isSampler\",\n    \"isScript\",\n    \"isScriptURL\",\n    \"isSealed\",\n    \"isSecureContext\",\n    \"isSessionSupported\",\n    \"isShader\",\n    \"isSupported\",\n    \"isSync\",\n    \"isTextEdit\",\n    \"isTexture\",\n    \"isTransformFeedback\",\n    \"isTrusted\",\n    \"isTypeSupported\",\n    \"isUserVerifyingPlatformAuthenticatorAvailable\",\n    \"isVertexArray\",\n    \"isView\",\n    \"isVisible\",\n    \"isochronousTransferIn\",\n    \"isochronousTransferOut\",\n    \"isolation\",\n    \"italics\",\n    \"item\",\n    \"itemId\",\n    \"itemProp\",\n    \"itemRef\",\n    \"itemScope\",\n    \"itemType\",\n    \"itemValue\",\n    \"items\",\n    \"iterateNext\",\n    \"iterationComposite\",\n    \"iterator\",\n    \"javaEnabled\",\n    \"jobTitle\",\n    \"join\",\n    \"json\",\n    \"justify-content\",\n    \"justify-items\",\n    \"justify-self\",\n    \"justifyContent\",\n    \"justifyItems\",\n    \"justifySelf\",\n    \"k1\",\n    \"k2\",\n    \"k3\",\n    \"k4\",\n    \"kHz\",\n    \"keepalive\",\n    \"kernelMatrix\",\n    \"kernelUnitLengthX\",\n    \"kernelUnitLengthY\",\n    \"kerning\",\n    \"key\",\n    \"keyCode\",\n    \"keyFor\",\n    \"keyIdentifier\",\n    \"keyLightEnabled\",\n    \"keyLocation\",\n    \"keyPath\",\n    \"keyStatuses\",\n    \"keySystem\",\n    \"keyText\",\n    \"keyUsage\",\n    \"keyboard\",\n    \"keys\",\n    \"keytype\",\n    \"kind\",\n    \"knee\",\n    \"label\",\n    \"labels\",\n    \"lang\",\n    \"language\",\n    \"languages\",\n    \"largeArcFlag\",\n    \"lastChild\",\n    \"lastElementChild\",\n    \"lastEventId\",\n    \"lastIndex\",\n    \"lastIndexOf\",\n    \"lastInputTime\",\n    \"lastMatch\",\n    \"lastMessageSubject\",\n    \"lastMessageType\",\n    \"lastModified\",\n    \"lastModifiedDate\",\n    \"lastPage\",\n    \"lastParen\",\n    \"lastState\",\n    \"lastStyleSheetSet\",\n    \"latitude\",\n    \"layerX\",\n    \"layerY\",\n    \"layoutFlow\",\n    \"layoutGrid\",\n    \"layoutGridChar\",\n    \"layoutGridLine\",\n    \"layoutGridMode\",\n    \"layoutGridType\",\n    \"lbound\",\n    \"left\",\n    \"leftContext\",\n    \"leftDegrees\",\n    \"leftMargin\",\n    \"leftProjectionMatrix\",\n    \"leftViewMatrix\",\n    \"length\",\n    \"lengthAdjust\",\n    \"lengthComputable\",\n    \"letter-spacing\",\n    \"letterSpacing\",\n    \"level\",\n    \"lighting-color\",\n    \"lightingColor\",\n    \"limitingConeAngle\",\n    \"line\",\n    \"line-break\",\n    \"line-height\",\n    \"lineAlign\",\n    \"lineBreak\",\n    \"lineCap\",\n    \"lineDashOffset\",\n    \"lineHeight\",\n    \"lineJoin\",\n    \"lineNumber\",\n    \"lineTo\",\n    \"lineWidth\",\n    \"linearAcceleration\",\n    \"linearRampToValueAtTime\",\n    \"linearVelocity\",\n    \"lineno\",\n    \"lines\",\n    \"link\",\n    \"linkColor\",\n    \"linkProgram\",\n    \"links\",\n    \"list\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"listStyle\",\n    \"listStyleImage\",\n    \"listStylePosition\",\n    \"listStyleType\",\n    \"listener\",\n    \"load\",\n    \"loadEventEnd\",\n    \"loadEventStart\",\n    \"loadTime\",\n    \"loadTimes\",\n    \"loaded\",\n    \"loading\",\n    \"localDescription\",\n    \"localName\",\n    \"localService\",\n    \"localStorage\",\n    \"locale\",\n    \"localeCompare\",\n    \"location\",\n    \"locationbar\",\n    \"lock\",\n    \"locked\",\n    \"lockedFile\",\n    \"locks\",\n    \"log\",\n    \"log10\",\n    \"log1p\",\n    \"log2\",\n    \"logicalXDPI\",\n    \"logicalYDPI\",\n    \"longDesc\",\n    \"longitude\",\n    \"lookupNamespaceURI\",\n    \"lookupPrefix\",\n    \"loop\",\n    \"loopEnd\",\n    \"loopStart\",\n    \"looping\",\n    \"low\",\n    \"lower\",\n    \"lowerBound\",\n    \"lowerOpen\",\n    \"lowsrc\",\n    \"m11\",\n    \"m12\",\n    \"m13\",\n    \"m14\",\n    \"m21\",\n    \"m22\",\n    \"m23\",\n    \"m24\",\n    \"m31\",\n    \"m32\",\n    \"m33\",\n    \"m34\",\n    \"m41\",\n    \"m42\",\n    \"m43\",\n    \"m44\",\n    \"makeXRCompatible\",\n    \"manifest\",\n    \"manufacturer\",\n    \"manufacturerName\",\n    \"map\",\n    \"mapping\",\n    \"margin\",\n    \"margin-block\",\n    \"margin-block-end\",\n    \"margin-block-start\",\n    \"margin-bottom\",\n    \"margin-inline\",\n    \"margin-inline-end\",\n    \"margin-inline-start\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"marginBlock\",\n    \"marginBlockEnd\",\n    \"marginBlockStart\",\n    \"marginBottom\",\n    \"marginHeight\",\n    \"marginInline\",\n    \"marginInlineEnd\",\n    \"marginInlineStart\",\n    \"marginLeft\",\n    \"marginRight\",\n    \"marginTop\",\n    \"marginWidth\",\n    \"mark\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-offset\",\n    \"marker-start\",\n    \"markerEnd\",\n    \"markerHeight\",\n    \"markerMid\",\n    \"markerOffset\",\n    \"markerStart\",\n    \"markerUnits\",\n    \"markerWidth\",\n    \"marks\",\n    \"mask\",\n    \"mask-clip\",\n    \"mask-composite\",\n    \"mask-image\",\n    \"mask-mode\",\n    \"mask-origin\",\n    \"mask-position\",\n    \"mask-position-x\",\n    \"mask-position-y\",\n    \"mask-repeat\",\n    \"mask-size\",\n    \"mask-type\",\n    \"maskClip\",\n    \"maskComposite\",\n    \"maskContentUnits\",\n    \"maskImage\",\n    \"maskMode\",\n    \"maskOrigin\",\n    \"maskPosition\",\n    \"maskPositionX\",\n    \"maskPositionY\",\n    \"maskRepeat\",\n    \"maskSize\",\n    \"maskType\",\n    \"maskUnits\",\n    \"match\",\n    \"matchAll\",\n    \"matchMedia\",\n    \"matchMedium\",\n    \"matches\",\n    \"matrix\",\n    \"matrixTransform\",\n    \"max\",\n    \"max-block-size\",\n    \"max-height\",\n    \"max-inline-size\",\n    \"max-width\",\n    \"maxActions\",\n    \"maxAlternatives\",\n    \"maxBlockSize\",\n    \"maxChannelCount\",\n    \"maxChannels\",\n    \"maxConnectionsPerServer\",\n    \"maxDecibels\",\n    \"maxDistance\",\n    \"maxHeight\",\n    \"maxInlineSize\",\n    \"maxLayers\",\n    \"maxLength\",\n    \"maxMessageSize\",\n    \"maxPacketLifeTime\",\n    \"maxRetransmits\",\n    \"maxTouchPoints\",\n    \"maxValue\",\n    \"maxWidth\",\n    \"measure\",\n    \"measureText\",\n    \"media\",\n    \"mediaCapabilities\",\n    \"mediaDevices\",\n    \"mediaElement\",\n    \"mediaGroup\",\n    \"mediaKeys\",\n    \"mediaSession\",\n    \"mediaStream\",\n    \"mediaText\",\n    \"meetOrSlice\",\n    \"memory\",\n    \"menubar\",\n    \"mergeAttributes\",\n    \"message\",\n    \"messageClass\",\n    \"messageHandlers\",\n    \"messageType\",\n    \"metaKey\",\n    \"metadata\",\n    \"method\",\n    \"methodDetails\",\n    \"methodName\",\n    \"mid\",\n    \"mimeType\",\n    \"mimeTypes\",\n    \"min\",\n    \"min-block-size\",\n    \"min-height\",\n    \"min-inline-size\",\n    \"min-width\",\n    \"minBlockSize\",\n    \"minDecibels\",\n    \"minHeight\",\n    \"minInlineSize\",\n    \"minLength\",\n    \"minValue\",\n    \"minWidth\",\n    \"miterLimit\",\n    \"mix-blend-mode\",\n    \"mixBlendMode\",\n    \"mm\",\n    \"mobile\",\n    \"mode\",\n    \"model\",\n    \"modify\",\n    \"mount\",\n    \"move\",\n    \"moveBy\",\n    \"moveEnd\",\n    \"moveFirst\",\n    \"moveFocusDown\",\n    \"moveFocusLeft\",\n    \"moveFocusRight\",\n    \"moveFocusUp\",\n    \"moveNext\",\n    \"moveRow\",\n    \"moveStart\",\n    \"moveTo\",\n    \"moveToBookmark\",\n    \"moveToElementText\",\n    \"moveToPoint\",\n    \"movementX\",\n    \"movementY\",\n    \"mozAdd\",\n    \"mozAnimationStartTime\",\n    \"mozAnon\",\n    \"mozApps\",\n    \"mozAudioCaptured\",\n    \"mozAudioChannelType\",\n    \"mozAutoplayEnabled\",\n    \"mozCancelAnimationFrame\",\n    \"mozCancelFullScreen\",\n    \"mozCancelRequestAnimationFrame\",\n    \"mozCaptureStream\",\n    \"mozCaptureStreamUntilEnded\",\n    \"mozClearDataAt\",\n    \"mozContact\",\n    \"mozContacts\",\n    \"mozCreateFileHandle\",\n    \"mozCurrentTransform\",\n    \"mozCurrentTransformInverse\",\n    \"mozCursor\",\n    \"mozDash\",\n    \"mozDashOffset\",\n    \"mozDecodedFrames\",\n    \"mozExitPointerLock\",\n    \"mozFillRule\",\n    \"mozFragmentEnd\",\n    \"mozFrameDelay\",\n    \"mozFullScreen\",\n    \"mozFullScreenElement\",\n    \"mozFullScreenEnabled\",\n    \"mozGetAll\",\n    \"mozGetAllKeys\",\n    \"mozGetAsFile\",\n    \"mozGetDataAt\",\n    \"mozGetMetadata\",\n    \"mozGetUserMedia\",\n    \"mozHasAudio\",\n    \"mozHasItem\",\n    \"mozHidden\",\n    \"mozImageSmoothingEnabled\",\n    \"mozIndexedDB\",\n    \"mozInnerScreenX\",\n    \"mozInnerScreenY\",\n    \"mozInputSource\",\n    \"mozIsTextField\",\n    \"mozItem\",\n    \"mozItemCount\",\n    \"mozItems\",\n    \"mozLength\",\n    \"mozLockOrientation\",\n    \"mozMatchesSelector\",\n    \"mozMovementX\",\n    \"mozMovementY\",\n    \"mozOpaque\",\n    \"mozOrientation\",\n    \"mozPaintCount\",\n    \"mozPaintedFrames\",\n    \"mozParsedFrames\",\n    \"mozPay\",\n    \"mozPointerLockElement\",\n    \"mozPresentedFrames\",\n    \"mozPreservesPitch\",\n    \"mozPressure\",\n    \"mozPrintCallback\",\n    \"mozRTCIceCandidate\",\n    \"mozRTCPeerConnection\",\n    \"mozRTCSessionDescription\",\n    \"mozRemove\",\n    \"mozRequestAnimationFrame\",\n    \"mozRequestFullScreen\",\n    \"mozRequestPointerLock\",\n    \"mozSetDataAt\",\n    \"mozSetImageElement\",\n    \"mozSourceNode\",\n    \"mozSrcObject\",\n    \"mozSystem\",\n    \"mozTCPSocket\",\n    \"mozTextStyle\",\n    \"mozTypesAt\",\n    \"mozUnlockOrientation\",\n    \"mozUserCancelled\",\n    \"mozVisibilityState\",\n    \"ms\",\n    \"msAnimation\",\n    \"msAnimationDelay\",\n    \"msAnimationDirection\",\n    \"msAnimationDuration\",\n    \"msAnimationFillMode\",\n    \"msAnimationIterationCount\",\n    \"msAnimationName\",\n    \"msAnimationPlayState\",\n    \"msAnimationStartTime\",\n    \"msAnimationTimingFunction\",\n    \"msBackfaceVisibility\",\n    \"msBlockProgression\",\n    \"msCSSOMElementFloatMetrics\",\n    \"msCaching\",\n    \"msCachingEnabled\",\n    \"msCancelRequestAnimationFrame\",\n    \"msCapsLockWarningOff\",\n    \"msClearImmediate\",\n    \"msClose\",\n    \"msContentZoomChaining\",\n    \"msContentZoomFactor\",\n    \"msContentZoomLimit\",\n    \"msContentZoomLimitMax\",\n    \"msContentZoomLimitMin\",\n    \"msContentZoomSnap\",\n    \"msContentZoomSnapPoints\",\n    \"msContentZoomSnapType\",\n    \"msContentZooming\",\n    \"msConvertURL\",\n    \"msCrypto\",\n    \"msDoNotTrack\",\n    \"msElementsFromPoint\",\n    \"msElementsFromRect\",\n    \"msExitFullscreen\",\n    \"msExtendedCode\",\n    \"msFillRule\",\n    \"msFirstPaint\",\n    \"msFlex\",\n    \"msFlexAlign\",\n    \"msFlexDirection\",\n    \"msFlexFlow\",\n    \"msFlexItemAlign\",\n    \"msFlexLinePack\",\n    \"msFlexNegative\",\n    \"msFlexOrder\",\n    \"msFlexPack\",\n    \"msFlexPositive\",\n    \"msFlexPreferredSize\",\n    \"msFlexWrap\",\n    \"msFlowFrom\",\n    \"msFlowInto\",\n    \"msFontFeatureSettings\",\n    \"msFullscreenElement\",\n    \"msFullscreenEnabled\",\n    \"msGetInputContext\",\n    \"msGetRegionContent\",\n    \"msGetUntransformedBounds\",\n    \"msGraphicsTrustStatus\",\n    \"msGridColumn\",\n    \"msGridColumnAlign\",\n    \"msGridColumnSpan\",\n    \"msGridColumns\",\n    \"msGridRow\",\n    \"msGridRowAlign\",\n    \"msGridRowSpan\",\n    \"msGridRows\",\n    \"msHidden\",\n    \"msHighContrastAdjust\",\n    \"msHyphenateLimitChars\",\n    \"msHyphenateLimitLines\",\n    \"msHyphenateLimitZone\",\n    \"msHyphens\",\n    \"msImageSmoothingEnabled\",\n    \"msImeAlign\",\n    \"msIndexedDB\",\n    \"msInterpolationMode\",\n    \"msIsStaticHTML\",\n    \"msKeySystem\",\n    \"msKeys\",\n    \"msLaunchUri\",\n    \"msLockOrientation\",\n    \"msManipulationViewsEnabled\",\n    \"msMatchMedia\",\n    \"msMatchesSelector\",\n    \"msMaxTouchPoints\",\n    \"msOrientation\",\n    \"msOverflowStyle\",\n    \"msPerspective\",\n    \"msPerspectiveOrigin\",\n    \"msPlayToDisabled\",\n    \"msPlayToPreferredSourceUri\",\n    \"msPlayToPrimary\",\n    \"msPointerEnabled\",\n    \"msRegionOverflow\",\n    \"msReleasePointerCapture\",\n    \"msRequestAnimationFrame\",\n    \"msRequestFullscreen\",\n    \"msSaveBlob\",\n    \"msSaveOrOpenBlob\",\n    \"msScrollChaining\",\n    \"msScrollLimit\",\n    \"msScrollLimitXMax\",\n    \"msScrollLimitXMin\",\n    \"msScrollLimitYMax\",\n    \"msScrollLimitYMin\",\n    \"msScrollRails\",\n    \"msScrollSnapPointsX\",\n    \"msScrollSnapPointsY\",\n    \"msScrollSnapType\",\n    \"msScrollSnapX\",\n    \"msScrollSnapY\",\n    \"msScrollTranslation\",\n    \"msSetImmediate\",\n    \"msSetMediaKeys\",\n    \"msSetPointerCapture\",\n    \"msTextCombineHorizontal\",\n    \"msTextSizeAdjust\",\n    \"msToBlob\",\n    \"msTouchAction\",\n    \"msTouchSelect\",\n    \"msTraceAsyncCallbackCompleted\",\n    \"msTraceAsyncCallbackStarting\",\n    \"msTraceAsyncOperationCompleted\",\n    \"msTraceAsyncOperationStarting\",\n    \"msTransform\",\n    \"msTransformOrigin\",\n    \"msTransformStyle\",\n    \"msTransition\",\n    \"msTransitionDelay\",\n    \"msTransitionDuration\",\n    \"msTransitionProperty\",\n    \"msTransitionTimingFunction\",\n    \"msUnlockOrientation\",\n    \"msUpdateAsyncCallbackRelation\",\n    \"msUserSelect\",\n    \"msVisibilityState\",\n    \"msWrapFlow\",\n    \"msWrapMargin\",\n    \"msWrapThrough\",\n    \"msWriteProfilerMark\",\n    \"msZoom\",\n    \"msZoomTo\",\n    \"mt\",\n    \"mul\",\n    \"multiEntry\",\n    \"multiSelectionObj\",\n    \"multiline\",\n    \"multiple\",\n    \"multiply\",\n    \"multiplySelf\",\n    \"mutableFile\",\n    \"muted\",\n    \"n\",\n    \"name\",\n    \"nameProp\",\n    \"namedItem\",\n    \"namedRecordset\",\n    \"names\",\n    \"namespaceURI\",\n    \"namespaces\",\n    \"naturalHeight\",\n    \"naturalWidth\",\n    \"navigate\",\n    \"navigation\",\n    \"navigationMode\",\n    \"navigationPreload\",\n    \"navigationStart\",\n    \"navigator\",\n    \"near\",\n    \"nearestViewportElement\",\n    \"negative\",\n    \"negotiated\",\n    \"netscape\",\n    \"networkState\",\n    \"newScale\",\n    \"newTranslate\",\n    \"newURL\",\n    \"newValue\",\n    \"newValueSpecifiedUnits\",\n    \"newVersion\",\n    \"newhome\",\n    \"next\",\n    \"nextElementSibling\",\n    \"nextHopProtocol\",\n    \"nextNode\",\n    \"nextPage\",\n    \"nextSibling\",\n    \"nickname\",\n    \"noHref\",\n    \"noModule\",\n    \"noResize\",\n    \"noShade\",\n    \"noValidate\",\n    \"noWrap\",\n    \"node\",\n    \"nodeName\",\n    \"nodeType\",\n    \"nodeValue\",\n    \"nonce\",\n    \"normalize\",\n    \"normalizedPathSegList\",\n    \"notationName\",\n    \"notations\",\n    \"note\",\n    \"noteGrainOn\",\n    \"noteOff\",\n    \"noteOn\",\n    \"notify\",\n    \"now\",\n    \"numOctaves\",\n    \"number\",\n    \"numberOfChannels\",\n    \"numberOfInputs\",\n    \"numberOfItems\",\n    \"numberOfOutputs\",\n    \"numberValue\",\n    \"oMatchesSelector\",\n    \"object\",\n    \"object-fit\",\n    \"object-position\",\n    \"objectFit\",\n    \"objectPosition\",\n    \"objectStore\",\n    \"objectStoreNames\",\n    \"objectType\",\n    \"observe\",\n    \"of\",\n    \"offscreenBuffering\",\n    \"offset\",\n    \"offset-anchor\",\n    \"offset-distance\",\n    \"offset-path\",\n    \"offset-rotate\",\n    \"offsetAnchor\",\n    \"offsetDistance\",\n    \"offsetHeight\",\n    \"offsetLeft\",\n    \"offsetNode\",\n    \"offsetParent\",\n    \"offsetPath\",\n    \"offsetRotate\",\n    \"offsetTop\",\n    \"offsetWidth\",\n    \"offsetX\",\n    \"offsetY\",\n    \"ok\",\n    \"oldURL\",\n    \"oldValue\",\n    \"oldVersion\",\n    \"olderShadowRoot\",\n    \"onLine\",\n    \"onabort\",\n    \"onabsolutedeviceorientation\",\n    \"onactivate\",\n    \"onactive\",\n    \"onaddsourcebuffer\",\n    \"onaddstream\",\n    \"onaddtrack\",\n    \"onafterprint\",\n    \"onafterscriptexecute\",\n    \"onafterupdate\",\n    \"onanimationcancel\",\n    \"onanimationend\",\n    \"onanimationiteration\",\n    \"onanimationstart\",\n    \"onappinstalled\",\n    \"onaudioend\",\n    \"onaudioprocess\",\n    \"onaudiostart\",\n    \"onautocomplete\",\n    \"onautocompleteerror\",\n    \"onauxclick\",\n    \"onbeforeactivate\",\n    \"onbeforecopy\",\n    \"onbeforecut\",\n    \"onbeforedeactivate\",\n    \"onbeforeeditfocus\",\n    \"onbeforeinstallprompt\",\n    \"onbeforepaste\",\n    \"onbeforeprint\",\n    \"onbeforescriptexecute\",\n    \"onbeforeunload\",\n    \"onbeforeupdate\",\n    \"onbeforexrselect\",\n    \"onbegin\",\n    \"onblocked\",\n    \"onblur\",\n    \"onbounce\",\n    \"onboundary\",\n    \"onbufferedamountlow\",\n    \"oncached\",\n    \"oncancel\",\n    \"oncandidatewindowhide\",\n    \"oncandidatewindowshow\",\n    \"oncandidatewindowupdate\",\n    \"oncanplay\",\n    \"oncanplaythrough\",\n    \"once\",\n    \"oncellchange\",\n    \"onchange\",\n    \"oncharacteristicvaluechanged\",\n    \"onchargingchange\",\n    \"onchargingtimechange\",\n    \"onchecking\",\n    \"onclick\",\n    \"onclose\",\n    \"onclosing\",\n    \"oncompassneedscalibration\",\n    \"oncomplete\",\n    \"onconnect\",\n    \"onconnecting\",\n    \"onconnectionavailable\",\n    \"onconnectionstatechange\",\n    \"oncontextmenu\",\n    \"oncontrollerchange\",\n    \"oncontrolselect\",\n    \"oncopy\",\n    \"oncuechange\",\n    \"oncut\",\n    \"ondataavailable\",\n    \"ondatachannel\",\n    \"ondatasetchanged\",\n    \"ondatasetcomplete\",\n    \"ondblclick\",\n    \"ondeactivate\",\n    \"ondevicechange\",\n    \"ondevicelight\",\n    \"ondevicemotion\",\n    \"ondeviceorientation\",\n    \"ondeviceorientationabsolute\",\n    \"ondeviceproximity\",\n    \"ondischargingtimechange\",\n    \"ondisconnect\",\n    \"ondisplay\",\n    \"ondownloading\",\n    \"ondrag\",\n    \"ondragend\",\n    \"ondragenter\",\n    \"ondragexit\",\n    \"ondragleave\",\n    \"ondragover\",\n    \"ondragstart\",\n    \"ondrop\",\n    \"ondurationchange\",\n    \"onemptied\",\n    \"onencrypted\",\n    \"onend\",\n    \"onended\",\n    \"onenter\",\n    \"onenterpictureinpicture\",\n    \"onerror\",\n    \"onerrorupdate\",\n    \"onexit\",\n    \"onfilterchange\",\n    \"onfinish\",\n    \"onfocus\",\n    \"onfocusin\",\n    \"onfocusout\",\n    \"onformdata\",\n    \"onfreeze\",\n    \"onfullscreenchange\",\n    \"onfullscreenerror\",\n    \"ongatheringstatechange\",\n    \"ongattserverdisconnected\",\n    \"ongesturechange\",\n    \"ongestureend\",\n    \"ongesturestart\",\n    \"ongotpointercapture\",\n    \"onhashchange\",\n    \"onhelp\",\n    \"onicecandidate\",\n    \"onicecandidateerror\",\n    \"oniceconnectionstatechange\",\n    \"onicegatheringstatechange\",\n    \"oninactive\",\n    \"oninput\",\n    \"oninputsourceschange\",\n    \"oninvalid\",\n    \"onkeydown\",\n    \"onkeypress\",\n    \"onkeystatuseschange\",\n    \"onkeyup\",\n    \"onlanguagechange\",\n    \"onlayoutcomplete\",\n    \"onleavepictureinpicture\",\n    \"onlevelchange\",\n    \"onload\",\n    \"onloadeddata\",\n    \"onloadedmetadata\",\n    \"onloadend\",\n    \"onloading\",\n    \"onloadingdone\",\n    \"onloadingerror\",\n    \"onloadstart\",\n    \"onlosecapture\",\n    \"onlostpointercapture\",\n    \"only\",\n    \"onmark\",\n    \"onmessage\",\n    \"onmessageerror\",\n    \"onmidimessage\",\n    \"onmousedown\",\n    \"onmouseenter\",\n    \"onmouseleave\",\n    \"onmousemove\",\n    \"onmouseout\",\n    \"onmouseover\",\n    \"onmouseup\",\n    \"onmousewheel\",\n    \"onmove\",\n    \"onmoveend\",\n    \"onmovestart\",\n    \"onmozfullscreenchange\",\n    \"onmozfullscreenerror\",\n    \"onmozorientationchange\",\n    \"onmozpointerlockchange\",\n    \"onmozpointerlockerror\",\n    \"onmscontentzoom\",\n    \"onmsfullscreenchange\",\n    \"onmsfullscreenerror\",\n    \"onmsgesturechange\",\n    \"onmsgesturedoubletap\",\n    \"onmsgestureend\",\n    \"onmsgesturehold\",\n    \"onmsgesturestart\",\n    \"onmsgesturetap\",\n    \"onmsgotpointercapture\",\n    \"onmsinertiastart\",\n    \"onmslostpointercapture\",\n    \"onmsmanipulationstatechanged\",\n    \"onmsneedkey\",\n    \"onmsorientationchange\",\n    \"onmspointercancel\",\n    \"onmspointerdown\",\n    \"onmspointerenter\",\n    \"onmspointerhover\",\n    \"onmspointerleave\",\n    \"onmspointermove\",\n    \"onmspointerout\",\n    \"onmspointerover\",\n    \"onmspointerup\",\n    \"onmssitemodejumplistitemremoved\",\n    \"onmsthumbnailclick\",\n    \"onmute\",\n    \"onnegotiationneeded\",\n    \"onnomatch\",\n    \"onnoupdate\",\n    \"onobsolete\",\n    \"onoffline\",\n    \"ononline\",\n    \"onopen\",\n    \"onorientationchange\",\n    \"onpagechange\",\n    \"onpagehide\",\n    \"onpageshow\",\n    \"onpaste\",\n    \"onpause\",\n    \"onpayerdetailchange\",\n    \"onpaymentmethodchange\",\n    \"onplay\",\n    \"onplaying\",\n    \"onpluginstreamstart\",\n    \"onpointercancel\",\n    \"onpointerdown\",\n    \"onpointerenter\",\n    \"onpointerleave\",\n    \"onpointerlockchange\",\n    \"onpointerlockerror\",\n    \"onpointermove\",\n    \"onpointerout\",\n    \"onpointerover\",\n    \"onpointerrawupdate\",\n    \"onpointerup\",\n    \"onpopstate\",\n    \"onprocessorerror\",\n    \"onprogress\",\n    \"onpropertychange\",\n    \"onratechange\",\n    \"onreading\",\n    \"onreadystatechange\",\n    \"onrejectionhandled\",\n    \"onrelease\",\n    \"onremove\",\n    \"onremovesourcebuffer\",\n    \"onremovestream\",\n    \"onremovetrack\",\n    \"onrepeat\",\n    \"onreset\",\n    \"onresize\",\n    \"onresizeend\",\n    \"onresizestart\",\n    \"onresourcetimingbufferfull\",\n    \"onresult\",\n    \"onresume\",\n    \"onrowenter\",\n    \"onrowexit\",\n    \"onrowsdelete\",\n    \"onrowsinserted\",\n    \"onscroll\",\n    \"onsearch\",\n    \"onsecuritypolicyviolation\",\n    \"onseeked\",\n    \"onseeking\",\n    \"onselect\",\n    \"onselectedcandidatepairchange\",\n    \"onselectend\",\n    \"onselectionchange\",\n    \"onselectstart\",\n    \"onshippingaddresschange\",\n    \"onshippingoptionchange\",\n    \"onshow\",\n    \"onsignalingstatechange\",\n    \"onsoundend\",\n    \"onsoundstart\",\n    \"onsourceclose\",\n    \"onsourceclosed\",\n    \"onsourceended\",\n    \"onsourceopen\",\n    \"onspeechend\",\n    \"onspeechstart\",\n    \"onsqueeze\",\n    \"onsqueezeend\",\n    \"onsqueezestart\",\n    \"onstalled\",\n    \"onstart\",\n    \"onstatechange\",\n    \"onstop\",\n    \"onstorage\",\n    \"onstoragecommit\",\n    \"onsubmit\",\n    \"onsuccess\",\n    \"onsuspend\",\n    \"onterminate\",\n    \"ontextinput\",\n    \"ontimeout\",\n    \"ontimeupdate\",\n    \"ontoggle\",\n    \"ontonechange\",\n    \"ontouchcancel\",\n    \"ontouchend\",\n    \"ontouchmove\",\n    \"ontouchstart\",\n    \"ontrack\",\n    \"ontransitioncancel\",\n    \"ontransitionend\",\n    \"ontransitionrun\",\n    \"ontransitionstart\",\n    \"onunhandledrejection\",\n    \"onunload\",\n    \"onunmute\",\n    \"onupdate\",\n    \"onupdateend\",\n    \"onupdatefound\",\n    \"onupdateready\",\n    \"onupdatestart\",\n    \"onupgradeneeded\",\n    \"onuserproximity\",\n    \"onversionchange\",\n    \"onvisibilitychange\",\n    \"onvoiceschanged\",\n    \"onvolumechange\",\n    \"onvrdisplayactivate\",\n    \"onvrdisplayconnect\",\n    \"onvrdisplaydeactivate\",\n    \"onvrdisplaydisconnect\",\n    \"onvrdisplaypresentchange\",\n    \"onwaiting\",\n    \"onwaitingforkey\",\n    \"onwarning\",\n    \"onwebkitanimationend\",\n    \"onwebkitanimationiteration\",\n    \"onwebkitanimationstart\",\n    \"onwebkitcurrentplaybacktargetiswirelesschanged\",\n    \"onwebkitfullscreenchange\",\n    \"onwebkitfullscreenerror\",\n    \"onwebkitkeyadded\",\n    \"onwebkitkeyerror\",\n    \"onwebkitkeymessage\",\n    \"onwebkitneedkey\",\n    \"onwebkitorientationchange\",\n    \"onwebkitplaybacktargetavailabilitychanged\",\n    \"onwebkitpointerlockchange\",\n    \"onwebkitpointerlockerror\",\n    \"onwebkitresourcetimingbufferfull\",\n    \"onwebkittransitionend\",\n    \"onwheel\",\n    \"onzoom\",\n    \"opacity\",\n    \"open\",\n    \"openCursor\",\n    \"openDatabase\",\n    \"openKeyCursor\",\n    \"opened\",\n    \"opener\",\n    \"opera\",\n    \"operationType\",\n    \"operator\",\n    \"opr\",\n    \"optimum\",\n    \"options\",\n    \"or\",\n    \"order\",\n    \"orderX\",\n    \"orderY\",\n    \"ordered\",\n    \"org\",\n    \"organization\",\n    \"orient\",\n    \"orientAngle\",\n    \"orientType\",\n    \"orientation\",\n    \"orientationX\",\n    \"orientationY\",\n    \"orientationZ\",\n    \"origin\",\n    \"originalPolicy\",\n    \"originalTarget\",\n    \"orphans\",\n    \"oscpu\",\n    \"outerHTML\",\n    \"outerHeight\",\n    \"outerText\",\n    \"outerWidth\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"outlineColor\",\n    \"outlineOffset\",\n    \"outlineStyle\",\n    \"outlineWidth\",\n    \"outputBuffer\",\n    \"outputChannelCount\",\n    \"outputLatency\",\n    \"outputs\",\n    \"overflow\",\n    \"overflow-anchor\",\n    \"overflow-block\",\n    \"overflow-inline\",\n    \"overflow-wrap\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overflowAnchor\",\n    \"overflowBlock\",\n    \"overflowInline\",\n    \"overflowWrap\",\n    \"overflowX\",\n    \"overflowY\",\n    \"overrideMimeType\",\n    \"oversample\",\n    \"overscroll-behavior\",\n    \"overscroll-behavior-block\",\n    \"overscroll-behavior-inline\",\n    \"overscroll-behavior-x\",\n    \"overscroll-behavior-y\",\n    \"overscrollBehavior\",\n    \"overscrollBehaviorBlock\",\n    \"overscrollBehaviorInline\",\n    \"overscrollBehaviorX\",\n    \"overscrollBehaviorY\",\n    \"ownKeys\",\n    \"ownerDocument\",\n    \"ownerElement\",\n    \"ownerNode\",\n    \"ownerRule\",\n    \"ownerSVGElement\",\n    \"owningElement\",\n    \"p1\",\n    \"p2\",\n    \"p3\",\n    \"p4\",\n    \"packetSize\",\n    \"packets\",\n    \"pad\",\n    \"padEnd\",\n    \"padStart\",\n    \"padding\",\n    \"padding-block\",\n    \"padding-block-end\",\n    \"padding-block-start\",\n    \"padding-bottom\",\n    \"padding-inline\",\n    \"padding-inline-end\",\n    \"padding-inline-start\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"paddingBlock\",\n    \"paddingBlockEnd\",\n    \"paddingBlockStart\",\n    \"paddingBottom\",\n    \"paddingInline\",\n    \"paddingInlineEnd\",\n    \"paddingInlineStart\",\n    \"paddingLeft\",\n    \"paddingRight\",\n    \"paddingTop\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"pageBreakAfter\",\n    \"pageBreakBefore\",\n    \"pageBreakInside\",\n    \"pageCount\",\n    \"pageLeft\",\n    \"pageTop\",\n    \"pageX\",\n    \"pageXOffset\",\n    \"pageY\",\n    \"pageYOffset\",\n    \"pages\",\n    \"paint-order\",\n    \"paintOrder\",\n    \"paintRequests\",\n    \"paintType\",\n    \"paintWorklet\",\n    \"palette\",\n    \"pan\",\n    \"panningModel\",\n    \"parameterData\",\n    \"parameters\",\n    \"parent\",\n    \"parentElement\",\n    \"parentNode\",\n    \"parentRule\",\n    \"parentStyleSheet\",\n    \"parentTextEdit\",\n    \"parentWindow\",\n    \"parse\",\n    \"parseAll\",\n    \"parseFloat\",\n    \"parseFromString\",\n    \"parseInt\",\n    \"part\",\n    \"participants\",\n    \"passive\",\n    \"password\",\n    \"pasteHTML\",\n    \"path\",\n    \"pathLength\",\n    \"pathSegList\",\n    \"pathSegType\",\n    \"pathSegTypeAsLetter\",\n    \"pathname\",\n    \"pattern\",\n    \"patternContentUnits\",\n    \"patternMismatch\",\n    \"patternTransform\",\n    \"patternUnits\",\n    \"pause\",\n    \"pauseAnimations\",\n    \"pauseOnExit\",\n    \"pauseProfilers\",\n    \"pauseTransformFeedback\",\n    \"paused\",\n    \"payerEmail\",\n    \"payerName\",\n    \"payerPhone\",\n    \"paymentManager\",\n    \"pc\",\n    \"peerIdentity\",\n    \"pending\",\n    \"pendingLocalDescription\",\n    \"pendingRemoteDescription\",\n    \"percent\",\n    \"performance\",\n    \"periodicSync\",\n    \"permission\",\n    \"permissionState\",\n    \"permissions\",\n    \"persist\",\n    \"persisted\",\n    \"personalbar\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"perspectiveOrigin\",\n    \"phone\",\n    \"phoneticFamilyName\",\n    \"phoneticGivenName\",\n    \"photo\",\n    \"pictureInPictureElement\",\n    \"pictureInPictureEnabled\",\n    \"pictureInPictureWindow\",\n    \"ping\",\n    \"pipeThrough\",\n    \"pipeTo\",\n    \"pitch\",\n    \"pixelBottom\",\n    \"pixelDepth\",\n    \"pixelHeight\",\n    \"pixelLeft\",\n    \"pixelRight\",\n    \"pixelStorei\",\n    \"pixelTop\",\n    \"pixelUnitToMillimeterX\",\n    \"pixelUnitToMillimeterY\",\n    \"pixelWidth\",\n    \"place-content\",\n    \"place-items\",\n    \"place-self\",\n    \"placeContent\",\n    \"placeItems\",\n    \"placeSelf\",\n    \"placeholder\",\n    \"platformVersion\",\n    \"platform\",\n    \"platforms\",\n    \"play\",\n    \"playEffect\",\n    \"playState\",\n    \"playbackRate\",\n    \"playbackState\",\n    \"playbackTime\",\n    \"played\",\n    \"playoutDelayHint\",\n    \"playsInline\",\n    \"plugins\",\n    \"pluginspage\",\n    \"pname\",\n    \"pointer-events\",\n    \"pointerBeforeReferenceNode\",\n    \"pointerEnabled\",\n    \"pointerEvents\",\n    \"pointerId\",\n    \"pointerLockElement\",\n    \"pointerType\",\n    \"points\",\n    \"pointsAtX\",\n    \"pointsAtY\",\n    \"pointsAtZ\",\n    \"polygonOffset\",\n    \"pop\",\n    \"populateMatrix\",\n    \"popupWindowFeatures\",\n    \"popupWindowName\",\n    \"popupWindowURI\",\n    \"port\",\n    \"port1\",\n    \"port2\",\n    \"ports\",\n    \"posBottom\",\n    \"posHeight\",\n    \"posLeft\",\n    \"posRight\",\n    \"posTop\",\n    \"posWidth\",\n    \"pose\",\n    \"position\",\n    \"positionAlign\",\n    \"positionX\",\n    \"positionY\",\n    \"positionZ\",\n    \"postError\",\n    \"postMessage\",\n    \"postalCode\",\n    \"poster\",\n    \"pow\",\n    \"powerEfficient\",\n    \"powerOff\",\n    \"preMultiplySelf\",\n    \"precision\",\n    \"preferredStyleSheetSet\",\n    \"preferredStylesheetSet\",\n    \"prefix\",\n    \"preload\",\n    \"prepend\",\n    \"presentation\",\n    \"preserveAlpha\",\n    \"preserveAspectRatio\",\n    \"preserveAspectRatioString\",\n    \"pressed\",\n    \"pressure\",\n    \"prevValue\",\n    \"preventDefault\",\n    \"preventExtensions\",\n    \"preventSilentAccess\",\n    \"previousElementSibling\",\n    \"previousNode\",\n    \"previousPage\",\n    \"previousRect\",\n    \"previousScale\",\n    \"previousSibling\",\n    \"previousTranslate\",\n    \"primaryKey\",\n    \"primitiveType\",\n    \"primitiveUnits\",\n    \"principals\",\n    \"print\",\n    \"priority\",\n    \"privateKey\",\n    \"probablySupportsContext\",\n    \"process\",\n    \"processIceMessage\",\n    \"processingEnd\",\n    \"processingStart\",\n    \"processorOptions\",\n    \"product\",\n    \"productId\",\n    \"productName\",\n    \"productSub\",\n    \"profile\",\n    \"profileEnd\",\n    \"profiles\",\n    \"projectionMatrix\",\n    \"promise\",\n    \"prompt\",\n    \"properties\",\n    \"propertyIsEnumerable\",\n    \"propertyName\",\n    \"protocol\",\n    \"protocolLong\",\n    \"prototype\",\n    \"provider\",\n    \"pseudoClass\",\n    \"pseudoElement\",\n    \"pt\",\n    \"publicId\",\n    \"publicKey\",\n    \"published\",\n    \"pulse\",\n    \"push\",\n    \"pushManager\",\n    \"pushNotification\",\n    \"pushState\",\n    \"put\",\n    \"putImageData\",\n    \"px\",\n    \"quadraticCurveTo\",\n    \"qualifier\",\n    \"quaternion\",\n    \"query\",\n    \"queryCommandEnabled\",\n    \"queryCommandIndeterm\",\n    \"queryCommandState\",\n    \"queryCommandSupported\",\n    \"queryCommandText\",\n    \"queryCommandValue\",\n    \"querySelector\",\n    \"querySelectorAll\",\n    \"queueMicrotask\",\n    \"quote\",\n    \"quotes\",\n    \"r\",\n    \"r1\",\n    \"r2\",\n    \"race\",\n    \"rad\",\n    \"radiogroup\",\n    \"radiusX\",\n    \"radiusY\",\n    \"random\",\n    \"range\",\n    \"rangeCount\",\n    \"rangeMax\",\n    \"rangeMin\",\n    \"rangeOffset\",\n    \"rangeOverflow\",\n    \"rangeParent\",\n    \"rangeUnderflow\",\n    \"rate\",\n    \"ratio\",\n    \"raw\",\n    \"rawId\",\n    \"read\",\n    \"readAsArrayBuffer\",\n    \"readAsBinaryString\",\n    \"readAsBlob\",\n    \"readAsDataURL\",\n    \"readAsText\",\n    \"readBuffer\",\n    \"readEntries\",\n    \"readOnly\",\n    \"readPixels\",\n    \"readReportRequested\",\n    \"readText\",\n    \"readValue\",\n    \"readable\",\n    \"ready\",\n    \"readyState\",\n    \"reason\",\n    \"reboot\",\n    \"receivedAlert\",\n    \"receiver\",\n    \"receivers\",\n    \"recipient\",\n    \"reconnect\",\n    \"recordNumber\",\n    \"recordsAvailable\",\n    \"recordset\",\n    \"rect\",\n    \"red\",\n    \"redEyeReduction\",\n    \"redirect\",\n    \"redirectCount\",\n    \"redirectEnd\",\n    \"redirectStart\",\n    \"redirected\",\n    \"reduce\",\n    \"reduceRight\",\n    \"reduction\",\n    \"refDistance\",\n    \"refX\",\n    \"refY\",\n    \"referenceNode\",\n    \"referenceSpace\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"refresh\",\n    \"region\",\n    \"regionAnchorX\",\n    \"regionAnchorY\",\n    \"regionId\",\n    \"regions\",\n    \"register\",\n    \"registerContentHandler\",\n    \"registerElement\",\n    \"registerProperty\",\n    \"registerProtocolHandler\",\n    \"reject\",\n    \"rel\",\n    \"relList\",\n    \"relatedAddress\",\n    \"relatedNode\",\n    \"relatedPort\",\n    \"relatedTarget\",\n    \"release\",\n    \"releaseCapture\",\n    \"releaseEvents\",\n    \"releaseInterface\",\n    \"releaseLock\",\n    \"releasePointerCapture\",\n    \"releaseShaderCompiler\",\n    \"reliable\",\n    \"reliableWrite\",\n    \"reload\",\n    \"rem\",\n    \"remainingSpace\",\n    \"remote\",\n    \"remoteDescription\",\n    \"remove\",\n    \"removeAllRanges\",\n    \"removeAttribute\",\n    \"removeAttributeNS\",\n    \"removeAttributeNode\",\n    \"removeBehavior\",\n    \"removeChild\",\n    \"removeCue\",\n    \"removeEventListener\",\n    \"removeFilter\",\n    \"removeImport\",\n    \"removeItem\",\n    \"removeListener\",\n    \"removeNamedItem\",\n    \"removeNamedItemNS\",\n    \"removeNode\",\n    \"removeParameter\",\n    \"removeProperty\",\n    \"removeRange\",\n    \"removeRegion\",\n    \"removeRule\",\n    \"removeSiteSpecificTrackingException\",\n    \"removeSourceBuffer\",\n    \"removeStream\",\n    \"removeTrack\",\n    \"removeVariable\",\n    \"removeWakeLockListener\",\n    \"removeWebWideTrackingException\",\n    \"removed\",\n    \"removedNodes\",\n    \"renderHeight\",\n    \"renderState\",\n    \"renderTime\",\n    \"renderWidth\",\n    \"renderbufferStorage\",\n    \"renderbufferStorageMultisample\",\n    \"renderedBuffer\",\n    \"renderingMode\",\n    \"renotify\",\n    \"repeat\",\n    \"replace\",\n    \"replaceAdjacentText\",\n    \"replaceAll\",\n    \"replaceChild\",\n    \"replaceChildren\",\n    \"replaceData\",\n    \"replaceId\",\n    \"replaceItem\",\n    \"replaceNode\",\n    \"replaceState\",\n    \"replaceSync\",\n    \"replaceTrack\",\n    \"replaceWholeText\",\n    \"replaceWith\",\n    \"reportValidity\",\n    \"request\",\n    \"requestAnimationFrame\",\n    \"requestAutocomplete\",\n    \"requestData\",\n    \"requestDevice\",\n    \"requestFrame\",\n    \"requestFullscreen\",\n    \"requestHitTestSource\",\n    \"requestHitTestSourceForTransientInput\",\n    \"requestId\",\n    \"requestIdleCallback\",\n    \"requestMIDIAccess\",\n    \"requestMediaKeySystemAccess\",\n    \"requestPermission\",\n    \"requestPictureInPicture\",\n    \"requestPointerLock\",\n    \"requestPresent\",\n    \"requestReferenceSpace\",\n    \"requestSession\",\n    \"requestStart\",\n    \"requestStorageAccess\",\n    \"requestSubmit\",\n    \"requestVideoFrameCallback\",\n    \"requestingWindow\",\n    \"requireInteraction\",\n    \"required\",\n    \"requiredExtensions\",\n    \"requiredFeatures\",\n    \"reset\",\n    \"resetPose\",\n    \"resetTransform\",\n    \"resize\",\n    \"resizeBy\",\n    \"resizeTo\",\n    \"resolve\",\n    \"response\",\n    \"responseBody\",\n    \"responseEnd\",\n    \"responseReady\",\n    \"responseStart\",\n    \"responseText\",\n    \"responseType\",\n    \"responseURL\",\n    \"responseXML\",\n    \"restartIce\",\n    \"restore\",\n    \"result\",\n    \"resultIndex\",\n    \"resultType\",\n    \"results\",\n    \"resume\",\n    \"resumeProfilers\",\n    \"resumeTransformFeedback\",\n    \"retry\",\n    \"returnValue\",\n    \"rev\",\n    \"reverse\",\n    \"reversed\",\n    \"revocable\",\n    \"revokeObjectURL\",\n    \"rgbColor\",\n    \"right\",\n    \"rightContext\",\n    \"rightDegrees\",\n    \"rightMargin\",\n    \"rightProjectionMatrix\",\n    \"rightViewMatrix\",\n    \"role\",\n    \"rolloffFactor\",\n    \"root\",\n    \"rootBounds\",\n    \"rootElement\",\n    \"rootMargin\",\n    \"rotate\",\n    \"rotateAxisAngle\",\n    \"rotateAxisAngleSelf\",\n    \"rotateFromVector\",\n    \"rotateFromVectorSelf\",\n    \"rotateSelf\",\n    \"rotation\",\n    \"rotationAngle\",\n    \"rotationRate\",\n    \"round\",\n    \"row-gap\",\n    \"rowGap\",\n    \"rowIndex\",\n    \"rowSpan\",\n    \"rows\",\n    \"rtcpTransport\",\n    \"rtt\",\n    \"ruby-align\",\n    \"ruby-position\",\n    \"rubyAlign\",\n    \"rubyOverhang\",\n    \"rubyPosition\",\n    \"rules\",\n    \"runtime\",\n    \"runtimeStyle\",\n    \"rx\",\n    \"ry\",\n    \"s\",\n    \"safari\",\n    \"sample\",\n    \"sampleCoverage\",\n    \"sampleRate\",\n    \"samplerParameterf\",\n    \"samplerParameteri\",\n    \"sandbox\",\n    \"save\",\n    \"saveData\",\n    \"scale\",\n    \"scale3d\",\n    \"scale3dSelf\",\n    \"scaleNonUniform\",\n    \"scaleNonUniformSelf\",\n    \"scaleSelf\",\n    \"scheme\",\n    \"scissor\",\n    \"scope\",\n    \"scopeName\",\n    \"scoped\",\n    \"screen\",\n    \"screenBrightness\",\n    \"screenEnabled\",\n    \"screenLeft\",\n    \"screenPixelToMillimeterX\",\n    \"screenPixelToMillimeterY\",\n    \"screenTop\",\n    \"screenX\",\n    \"screenY\",\n    \"scriptURL\",\n    \"scripts\",\n    \"scroll\",\n    \"scroll-behavior\",\n    \"scroll-margin\",\n    \"scroll-margin-block\",\n    \"scroll-margin-block-end\",\n    \"scroll-margin-block-start\",\n    \"scroll-margin-bottom\",\n    \"scroll-margin-inline\",\n    \"scroll-margin-inline-end\",\n    \"scroll-margin-inline-start\",\n    \"scroll-margin-left\",\n    \"scroll-margin-right\",\n    \"scroll-margin-top\",\n    \"scroll-padding\",\n    \"scroll-padding-block\",\n    \"scroll-padding-block-end\",\n    \"scroll-padding-block-start\",\n    \"scroll-padding-bottom\",\n    \"scroll-padding-inline\",\n    \"scroll-padding-inline-end\",\n    \"scroll-padding-inline-start\",\n    \"scroll-padding-left\",\n    \"scroll-padding-right\",\n    \"scroll-padding-top\",\n    \"scroll-snap-align\",\n    \"scroll-snap-type\",\n    \"scrollAmount\",\n    \"scrollBehavior\",\n    \"scrollBy\",\n    \"scrollByLines\",\n    \"scrollByPages\",\n    \"scrollDelay\",\n    \"scrollHeight\",\n    \"scrollIntoView\",\n    \"scrollIntoViewIfNeeded\",\n    \"scrollLeft\",\n    \"scrollLeftMax\",\n    \"scrollMargin\",\n    \"scrollMarginBlock\",\n    \"scrollMarginBlockEnd\",\n    \"scrollMarginBlockStart\",\n    \"scrollMarginBottom\",\n    \"scrollMarginInline\",\n    \"scrollMarginInlineEnd\",\n    \"scrollMarginInlineStart\",\n    \"scrollMarginLeft\",\n    \"scrollMarginRight\",\n    \"scrollMarginTop\",\n    \"scrollMaxX\",\n    \"scrollMaxY\",\n    \"scrollPadding\",\n    \"scrollPaddingBlock\",\n    \"scrollPaddingBlockEnd\",\n    \"scrollPaddingBlockStart\",\n    \"scrollPaddingBottom\",\n    \"scrollPaddingInline\",\n    \"scrollPaddingInlineEnd\",\n    \"scrollPaddingInlineStart\",\n    \"scrollPaddingLeft\",\n    \"scrollPaddingRight\",\n    \"scrollPaddingTop\",\n    \"scrollRestoration\",\n    \"scrollSnapAlign\",\n    \"scrollSnapType\",\n    \"scrollTo\",\n    \"scrollTop\",\n    \"scrollTopMax\",\n    \"scrollWidth\",\n    \"scrollX\",\n    \"scrollY\",\n    \"scrollbar-color\",\n    \"scrollbar-width\",\n    \"scrollbar3dLightColor\",\n    \"scrollbarArrowColor\",\n    \"scrollbarBaseColor\",\n    \"scrollbarColor\",\n    \"scrollbarDarkShadowColor\",\n    \"scrollbarFaceColor\",\n    \"scrollbarHighlightColor\",\n    \"scrollbarShadowColor\",\n    \"scrollbarTrackColor\",\n    \"scrollbarWidth\",\n    \"scrollbars\",\n    \"scrolling\",\n    \"scrollingElement\",\n    \"sctp\",\n    \"sctpCauseCode\",\n    \"sdp\",\n    \"sdpLineNumber\",\n    \"sdpMLineIndex\",\n    \"sdpMid\",\n    \"seal\",\n    \"search\",\n    \"searchBox\",\n    \"searchBoxJavaBridge_\",\n    \"searchParams\",\n    \"sectionRowIndex\",\n    \"secureConnectionStart\",\n    \"security\",\n    \"seed\",\n    \"seekToNextFrame\",\n    \"seekable\",\n    \"seeking\",\n    \"select\",\n    \"selectAllChildren\",\n    \"selectAlternateInterface\",\n    \"selectConfiguration\",\n    \"selectNode\",\n    \"selectNodeContents\",\n    \"selectNodes\",\n    \"selectSingleNode\",\n    \"selectSubString\",\n    \"selected\",\n    \"selectedIndex\",\n    \"selectedOptions\",\n    \"selectedStyleSheetSet\",\n    \"selectedStylesheetSet\",\n    \"selection\",\n    \"selectionDirection\",\n    \"selectionEnd\",\n    \"selectionStart\",\n    \"selector\",\n    \"selectorText\",\n    \"self\",\n    \"send\",\n    \"sendAsBinary\",\n    \"sendBeacon\",\n    \"sender\",\n    \"sentAlert\",\n    \"sentTimestamp\",\n    \"separator\",\n    \"serialNumber\",\n    \"serializeToString\",\n    \"serverTiming\",\n    \"service\",\n    \"serviceWorker\",\n    \"session\",\n    \"sessionId\",\n    \"sessionStorage\",\n    \"set\",\n    \"setActionHandler\",\n    \"setActive\",\n    \"setAlpha\",\n    \"setAppBadge\",\n    \"setAttribute\",\n    \"setAttributeNS\",\n    \"setAttributeNode\",\n    \"setAttributeNodeNS\",\n    \"setBaseAndExtent\",\n    \"setBigInt64\",\n    \"setBigUint64\",\n    \"setBingCurrentSearchDefault\",\n    \"setCapture\",\n    \"setCodecPreferences\",\n    \"setColor\",\n    \"setCompositeOperation\",\n    \"setConfiguration\",\n    \"setCurrentTime\",\n    \"setCustomValidity\",\n    \"setData\",\n    \"setDate\",\n    \"setDragImage\",\n    \"setEnd\",\n    \"setEndAfter\",\n    \"setEndBefore\",\n    \"setEndPoint\",\n    \"setFillColor\",\n    \"setFilterRes\",\n    \"setFloat32\",\n    \"setFloat64\",\n    \"setFloatValue\",\n    \"setFormValue\",\n    \"setFullYear\",\n    \"setHeaderValue\",\n    \"setHours\",\n    \"setIdentityProvider\",\n    \"setImmediate\",\n    \"setInt16\",\n    \"setInt32\",\n    \"setInt8\",\n    \"setInterval\",\n    \"setItem\",\n    \"setKeyframes\",\n    \"setLineCap\",\n    \"setLineDash\",\n    \"setLineJoin\",\n    \"setLineWidth\",\n    \"setLiveSeekableRange\",\n    \"setLocalDescription\",\n    \"setMatrix\",\n    \"setMatrixValue\",\n    \"setMediaKeys\",\n    \"setMilliseconds\",\n    \"setMinutes\",\n    \"setMiterLimit\",\n    \"setMonth\",\n    \"setNamedItem\",\n    \"setNamedItemNS\",\n    \"setNonUserCodeExceptions\",\n    \"setOrientToAngle\",\n    \"setOrientToAuto\",\n    \"setOrientation\",\n    \"setOverrideHistoryNavigationMode\",\n    \"setPaint\",\n    \"setParameter\",\n    \"setParameters\",\n    \"setPeriodicWave\",\n    \"setPointerCapture\",\n    \"setPosition\",\n    \"setPositionState\",\n    \"setPreference\",\n    \"setProperty\",\n    \"setPrototypeOf\",\n    \"setRGBColor\",\n    \"setRGBColorICCColor\",\n    \"setRadius\",\n    \"setRangeText\",\n    \"setRemoteDescription\",\n    \"setRequestHeader\",\n    \"setResizable\",\n    \"setResourceTimingBufferSize\",\n    \"setRotate\",\n    \"setScale\",\n    \"setSeconds\",\n    \"setSelectionRange\",\n    \"setServerCertificate\",\n    \"setShadow\",\n    \"setSinkId\",\n    \"setSkewX\",\n    \"setSkewY\",\n    \"setStart\",\n    \"setStartAfter\",\n    \"setStartBefore\",\n    \"setStdDeviation\",\n    \"setStreams\",\n    \"setStringValue\",\n    \"setStrokeColor\",\n    \"setSuggestResult\",\n    \"setTargetAtTime\",\n    \"setTargetValueAtTime\",\n    \"setTime\",\n    \"setTimeout\",\n    \"setTransform\",\n    \"setTranslate\",\n    \"setUTCDate\",\n    \"setUTCFullYear\",\n    \"setUTCHours\",\n    \"setUTCMilliseconds\",\n    \"setUTCMinutes\",\n    \"setUTCMonth\",\n    \"setUTCSeconds\",\n    \"setUint16\",\n    \"setUint32\",\n    \"setUint8\",\n    \"setUri\",\n    \"setValidity\",\n    \"setValueAtTime\",\n    \"setValueCurveAtTime\",\n    \"setVariable\",\n    \"setVelocity\",\n    \"setVersion\",\n    \"setYear\",\n    \"settingName\",\n    \"settingValue\",\n    \"sex\",\n    \"shaderSource\",\n    \"shadowBlur\",\n    \"shadowColor\",\n    \"shadowOffsetX\",\n    \"shadowOffsetY\",\n    \"shadowRoot\",\n    \"shape\",\n    \"shape-image-threshold\",\n    \"shape-margin\",\n    \"shape-outside\",\n    \"shape-rendering\",\n    \"shapeImageThreshold\",\n    \"shapeMargin\",\n    \"shapeOutside\",\n    \"shapeRendering\",\n    \"sheet\",\n    \"shift\",\n    \"shiftKey\",\n    \"shiftLeft\",\n    \"shippingAddress\",\n    \"shippingOption\",\n    \"shippingType\",\n    \"show\",\n    \"showHelp\",\n    \"showModal\",\n    \"showModalDialog\",\n    \"showModelessDialog\",\n    \"showNotification\",\n    \"sidebar\",\n    \"sign\",\n    \"signal\",\n    \"signalingState\",\n    \"signature\",\n    \"silent\",\n    \"sin\",\n    \"singleNodeValue\",\n    \"sinh\",\n    \"sinkId\",\n    \"sittingToStandingTransform\",\n    \"size\",\n    \"sizeToContent\",\n    \"sizeX\",\n    \"sizeZ\",\n    \"sizes\",\n    \"skewX\",\n    \"skewXSelf\",\n    \"skewY\",\n    \"skewYSelf\",\n    \"slice\",\n    \"slope\",\n    \"slot\",\n    \"small\",\n    \"smil\",\n    \"smooth\",\n    \"smoothingTimeConstant\",\n    \"snapToLines\",\n    \"snapshotItem\",\n    \"snapshotLength\",\n    \"some\",\n    \"sort\",\n    \"sortingCode\",\n    \"source\",\n    \"sourceBuffer\",\n    \"sourceBuffers\",\n    \"sourceCapabilities\",\n    \"sourceFile\",\n    \"sourceIndex\",\n    \"sources\",\n    \"spacing\",\n    \"span\",\n    \"speak\",\n    \"speakAs\",\n    \"speaking\",\n    \"species\",\n    \"specified\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"speechSynthesis\",\n    \"speed\",\n    \"speedOfSound\",\n    \"spellcheck\",\n    \"splice\",\n    \"split\",\n    \"splitText\",\n    \"spreadMethod\",\n    \"sqrt\",\n    \"src\",\n    \"srcElement\",\n    \"srcFilter\",\n    \"srcObject\",\n    \"srcUrn\",\n    \"srcdoc\",\n    \"srclang\",\n    \"srcset\",\n    \"stack\",\n    \"stackTraceLimit\",\n    \"stacktrace\",\n    \"stageParameters\",\n    \"standalone\",\n    \"standby\",\n    \"start\",\n    \"startContainer\",\n    \"startIce\",\n    \"startMessages\",\n    \"startNotifications\",\n    \"startOffset\",\n    \"startProfiling\",\n    \"startRendering\",\n    \"startShark\",\n    \"startTime\",\n    \"startsWith\",\n    \"state\",\n    \"status\",\n    \"statusCode\",\n    \"statusMessage\",\n    \"statusText\",\n    \"statusbar\",\n    \"stdDeviationX\",\n    \"stdDeviationY\",\n    \"stencilFunc\",\n    \"stencilFuncSeparate\",\n    \"stencilMask\",\n    \"stencilMaskSeparate\",\n    \"stencilOp\",\n    \"stencilOpSeparate\",\n    \"step\",\n    \"stepDown\",\n    \"stepMismatch\",\n    \"stepUp\",\n    \"sticky\",\n    \"stitchTiles\",\n    \"stop\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stopColor\",\n    \"stopImmediatePropagation\",\n    \"stopNotifications\",\n    \"stopOpacity\",\n    \"stopProfiling\",\n    \"stopPropagation\",\n    \"stopShark\",\n    \"stopped\",\n    \"storage\",\n    \"storageArea\",\n    \"storageName\",\n    \"storageStatus\",\n    \"store\",\n    \"storeSiteSpecificTrackingException\",\n    \"storeWebWideTrackingException\",\n    \"stpVersion\",\n    \"stream\",\n    \"streams\",\n    \"stretch\",\n    \"strike\",\n    \"string\",\n    \"stringValue\",\n    \"stringify\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"strokeDasharray\",\n    \"strokeDashoffset\",\n    \"strokeLinecap\",\n    \"strokeLinejoin\",\n    \"strokeMiterlimit\",\n    \"strokeOpacity\",\n    \"strokeRect\",\n    \"strokeStyle\",\n    \"strokeText\",\n    \"strokeWidth\",\n    \"style\",\n    \"styleFloat\",\n    \"styleMap\",\n    \"styleMedia\",\n    \"styleSheet\",\n    \"styleSheetSets\",\n    \"styleSheets\",\n    \"sub\",\n    \"subarray\",\n    \"subject\",\n    \"submit\",\n    \"submitFrame\",\n    \"submitter\",\n    \"subscribe\",\n    \"substr\",\n    \"substring\",\n    \"substringData\",\n    \"subtle\",\n    \"subtree\",\n    \"suffix\",\n    \"suffixes\",\n    \"summary\",\n    \"sup\",\n    \"supported\",\n    \"supportedContentEncodings\",\n    \"supportedEntryTypes\",\n    \"supports\",\n    \"supportsSession\",\n    \"surfaceScale\",\n    \"surroundContents\",\n    \"suspend\",\n    \"suspendRedraw\",\n    \"swapCache\",\n    \"swapNode\",\n    \"sweepFlag\",\n    \"symbols\",\n    \"sync\",\n    \"sysexEnabled\",\n    \"system\",\n    \"systemCode\",\n    \"systemId\",\n    \"systemLanguage\",\n    \"systemXDPI\",\n    \"systemYDPI\",\n    \"tBodies\",\n    \"tFoot\",\n    \"tHead\",\n    \"tabIndex\",\n    \"table\",\n    \"table-layout\",\n    \"tableLayout\",\n    \"tableValues\",\n    \"tag\",\n    \"tagName\",\n    \"tagUrn\",\n    \"tags\",\n    \"taintEnabled\",\n    \"takePhoto\",\n    \"takeRecords\",\n    \"tan\",\n    \"tangentialPressure\",\n    \"tanh\",\n    \"target\",\n    \"targetElement\",\n    \"targetRayMode\",\n    \"targetRaySpace\",\n    \"targetTouches\",\n    \"targetX\",\n    \"targetY\",\n    \"tcpType\",\n    \"tee\",\n    \"tel\",\n    \"terminate\",\n    \"test\",\n    \"texImage2D\",\n    \"texImage3D\",\n    \"texParameterf\",\n    \"texParameteri\",\n    \"texStorage2D\",\n    \"texStorage3D\",\n    \"texSubImage2D\",\n    \"texSubImage3D\",\n    \"text\",\n    \"text-align\",\n    \"text-align-last\",\n    \"text-anchor\",\n    \"text-combine-upright\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-skip-ink\",\n    \"text-decoration-style\",\n    \"text-decoration-thickness\",\n    \"text-emphasis\",\n    \"text-emphasis-color\",\n    \"text-emphasis-position\",\n    \"text-emphasis-style\",\n    \"text-indent\",\n    \"text-justify\",\n    \"text-orientation\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-transform\",\n    \"text-underline-offset\",\n    \"text-underline-position\",\n    \"textAlign\",\n    \"textAlignLast\",\n    \"textAnchor\",\n    \"textAutospace\",\n    \"textBaseline\",\n    \"textCombineUpright\",\n    \"textContent\",\n    \"textDecoration\",\n    \"textDecorationBlink\",\n    \"textDecorationColor\",\n    \"textDecorationLine\",\n    \"textDecorationLineThrough\",\n    \"textDecorationNone\",\n    \"textDecorationOverline\",\n    \"textDecorationSkipInk\",\n    \"textDecorationStyle\",\n    \"textDecorationThickness\",\n    \"textDecorationUnderline\",\n    \"textEmphasis\",\n    \"textEmphasisColor\",\n    \"textEmphasisPosition\",\n    \"textEmphasisStyle\",\n    \"textIndent\",\n    \"textJustify\",\n    \"textJustifyTrim\",\n    \"textKashida\",\n    \"textKashidaSpace\",\n    \"textLength\",\n    \"textOrientation\",\n    \"textOverflow\",\n    \"textRendering\",\n    \"textShadow\",\n    \"textTracks\",\n    \"textTransform\",\n    \"textUnderlineOffset\",\n    \"textUnderlinePosition\",\n    \"then\",\n    \"threadId\",\n    \"threshold\",\n    \"thresholds\",\n    \"tiltX\",\n    \"tiltY\",\n    \"time\",\n    \"timeEnd\",\n    \"timeLog\",\n    \"timeOrigin\",\n    \"timeRemaining\",\n    \"timeStamp\",\n    \"timecode\",\n    \"timeline\",\n    \"timelineTime\",\n    \"timeout\",\n    \"timestamp\",\n    \"timestampOffset\",\n    \"timing\",\n    \"title\",\n    \"to\",\n    \"toArray\",\n    \"toBlob\",\n    \"toDataURL\",\n    \"toDateString\",\n    \"toElement\",\n    \"toExponential\",\n    \"toFixed\",\n    \"toFloat32Array\",\n    \"toFloat64Array\",\n    \"toGMTString\",\n    \"toISOString\",\n    \"toJSON\",\n    \"toLocaleDateString\",\n    \"toLocaleFormat\",\n    \"toLocaleLowerCase\",\n    \"toLocaleString\",\n    \"toLocaleTimeString\",\n    \"toLocaleUpperCase\",\n    \"toLowerCase\",\n    \"toMatrix\",\n    \"toMethod\",\n    \"toPrecision\",\n    \"toPrimitive\",\n    \"toSdp\",\n    \"toSource\",\n    \"toStaticHTML\",\n    \"toString\",\n    \"toStringTag\",\n    \"toSum\",\n    \"toTimeString\",\n    \"toUTCString\",\n    \"toUpperCase\",\n    \"toggle\",\n    \"toggleAttribute\",\n    \"toggleLongPressEnabled\",\n    \"tone\",\n    \"toneBuffer\",\n    \"tooLong\",\n    \"tooShort\",\n    \"toolbar\",\n    \"top\",\n    \"topMargin\",\n    \"total\",\n    \"totalFrameDelay\",\n    \"totalVideoFrames\",\n    \"touch-action\",\n    \"touchAction\",\n    \"touched\",\n    \"touches\",\n    \"trace\",\n    \"track\",\n    \"trackVisibility\",\n    \"transaction\",\n    \"transactions\",\n    \"transceiver\",\n    \"transferControlToOffscreen\",\n    \"transferFromImageBitmap\",\n    \"transferImageBitmap\",\n    \"transferIn\",\n    \"transferOut\",\n    \"transferSize\",\n    \"transferToImageBitmap\",\n    \"transform\",\n    \"transform-box\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transformBox\",\n    \"transformFeedbackVaryings\",\n    \"transformOrigin\",\n    \"transformPoint\",\n    \"transformString\",\n    \"transformStyle\",\n    \"transformToDocument\",\n    \"transformToFragment\",\n    \"transition\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"transitionDelay\",\n    \"transitionDuration\",\n    \"transitionProperty\",\n    \"transitionTimingFunction\",\n    \"translate\",\n    \"translateSelf\",\n    \"translationX\",\n    \"translationY\",\n    \"transport\",\n    \"trim\",\n    \"trimEnd\",\n    \"trimLeft\",\n    \"trimRight\",\n    \"trimStart\",\n    \"trueSpeed\",\n    \"trunc\",\n    \"truncate\",\n    \"trustedTypes\",\n    \"turn\",\n    \"twist\",\n    \"type\",\n    \"typeDetail\",\n    \"typeMismatch\",\n    \"typeMustMatch\",\n    \"types\",\n    \"u2f\",\n    \"ubound\",\n    \"uint16\",\n    \"uint32\",\n    \"uint8\",\n    \"uint8Clamped\",\n    \"undefined\",\n    \"unescape\",\n    \"uneval\",\n    \"unicode\",\n    \"unicode-bidi\",\n    \"unicodeBidi\",\n    \"unicodeRange\",\n    \"uniform1f\",\n    \"uniform1fv\",\n    \"uniform1i\",\n    \"uniform1iv\",\n    \"uniform1ui\",\n    \"uniform1uiv\",\n    \"uniform2f\",\n    \"uniform2fv\",\n    \"uniform2i\",\n    \"uniform2iv\",\n    \"uniform2ui\",\n    \"uniform2uiv\",\n    \"uniform3f\",\n    \"uniform3fv\",\n    \"uniform3i\",\n    \"uniform3iv\",\n    \"uniform3ui\",\n    \"uniform3uiv\",\n    \"uniform4f\",\n    \"uniform4fv\",\n    \"uniform4i\",\n    \"uniform4iv\",\n    \"uniform4ui\",\n    \"uniform4uiv\",\n    \"uniformBlockBinding\",\n    \"uniformMatrix2fv\",\n    \"uniformMatrix2x3fv\",\n    \"uniformMatrix2x4fv\",\n    \"uniformMatrix3fv\",\n    \"uniformMatrix3x2fv\",\n    \"uniformMatrix3x4fv\",\n    \"uniformMatrix4fv\",\n    \"uniformMatrix4x2fv\",\n    \"uniformMatrix4x3fv\",\n    \"unique\",\n    \"uniqueID\",\n    \"uniqueNumber\",\n    \"unit\",\n    \"unitType\",\n    \"units\",\n    \"unloadEventEnd\",\n    \"unloadEventStart\",\n    \"unlock\",\n    \"unmount\",\n    \"unobserve\",\n    \"unpause\",\n    \"unpauseAnimations\",\n    \"unreadCount\",\n    \"unregister\",\n    \"unregisterContentHandler\",\n    \"unregisterProtocolHandler\",\n    \"unscopables\",\n    \"unselectable\",\n    \"unshift\",\n    \"unsubscribe\",\n    \"unsuspendRedraw\",\n    \"unsuspendRedrawAll\",\n    \"unwatch\",\n    \"unwrapKey\",\n    \"upDegrees\",\n    \"upX\",\n    \"upY\",\n    \"upZ\",\n    \"update\",\n    \"updateCommands\",\n    \"updateIce\",\n    \"updateInterval\",\n    \"updatePlaybackRate\",\n    \"updateRenderState\",\n    \"updateSettings\",\n    \"updateTiming\",\n    \"updateViaCache\",\n    \"updateWith\",\n    \"updated\",\n    \"updating\",\n    \"upgrade\",\n    \"upload\",\n    \"uploadTotal\",\n    \"uploaded\",\n    \"upper\",\n    \"upperBound\",\n    \"upperOpen\",\n    \"uri\",\n    \"url\",\n    \"urn\",\n    \"urns\",\n    \"usages\",\n    \"usb\",\n    \"usbVersionMajor\",\n    \"usbVersionMinor\",\n    \"usbVersionSubminor\",\n    \"useCurrentView\",\n    \"useMap\",\n    \"useProgram\",\n    \"usedSpace\",\n    \"user-select\",\n    \"userActivation\",\n    \"userAgent\",\n    \"userAgentData\",\n    \"userChoice\",\n    \"userHandle\",\n    \"userHint\",\n    \"userLanguage\",\n    \"userSelect\",\n    \"userVisibleOnly\",\n    \"username\",\n    \"usernameFragment\",\n    \"utterance\",\n    \"uuid\",\n    \"v8BreakIterator\",\n    \"vAlign\",\n    \"vLink\",\n    \"valid\",\n    \"validate\",\n    \"validateProgram\",\n    \"validationMessage\",\n    \"validity\",\n    \"value\",\n    \"valueAsDate\",\n    \"valueAsNumber\",\n    \"valueAsString\",\n    \"valueInSpecifiedUnits\",\n    \"valueMissing\",\n    \"valueOf\",\n    \"valueText\",\n    \"valueType\",\n    \"values\",\n    \"variable\",\n    \"variant\",\n    \"variationSettings\",\n    \"vector-effect\",\n    \"vectorEffect\",\n    \"velocityAngular\",\n    \"velocityExpansion\",\n    \"velocityX\",\n    \"velocityY\",\n    \"vendor\",\n    \"vendorId\",\n    \"vendorSub\",\n    \"verify\",\n    \"version\",\n    \"vertexAttrib1f\",\n    \"vertexAttrib1fv\",\n    \"vertexAttrib2f\",\n    \"vertexAttrib2fv\",\n    \"vertexAttrib3f\",\n    \"vertexAttrib3fv\",\n    \"vertexAttrib4f\",\n    \"vertexAttrib4fv\",\n    \"vertexAttribDivisor\",\n    \"vertexAttribDivisorANGLE\",\n    \"vertexAttribI4i\",\n    \"vertexAttribI4iv\",\n    \"vertexAttribI4ui\",\n    \"vertexAttribI4uiv\",\n    \"vertexAttribIPointer\",\n    \"vertexAttribPointer\",\n    \"vertical\",\n    \"vertical-align\",\n    \"verticalAlign\",\n    \"verticalOverflow\",\n    \"vh\",\n    \"vibrate\",\n    \"vibrationActuator\",\n    \"videoBitsPerSecond\",\n    \"videoHeight\",\n    \"videoTracks\",\n    \"videoWidth\",\n    \"view\",\n    \"viewBox\",\n    \"viewBoxString\",\n    \"viewTarget\",\n    \"viewTargetString\",\n    \"viewport\",\n    \"viewportAnchorX\",\n    \"viewportAnchorY\",\n    \"viewportElement\",\n    \"views\",\n    \"violatedDirective\",\n    \"visibility\",\n    \"visibilityState\",\n    \"visible\",\n    \"visualViewport\",\n    \"vlinkColor\",\n    \"vmax\",\n    \"vmin\",\n    \"voice\",\n    \"voiceURI\",\n    \"volume\",\n    \"vrml\",\n    \"vspace\",\n    \"vw\",\n    \"w\",\n    \"wait\",\n    \"waitSync\",\n    \"waiting\",\n    \"wake\",\n    \"wakeLock\",\n    \"wand\",\n    \"warn\",\n    \"wasClean\",\n    \"wasDiscarded\",\n    \"watch\",\n    \"watchAvailability\",\n    \"watchPosition\",\n    \"webdriver\",\n    \"webkitAddKey\",\n    \"webkitAlignContent\",\n    \"webkitAlignItems\",\n    \"webkitAlignSelf\",\n    \"webkitAnimation\",\n    \"webkitAnimationDelay\",\n    \"webkitAnimationDirection\",\n    \"webkitAnimationDuration\",\n    \"webkitAnimationFillMode\",\n    \"webkitAnimationIterationCount\",\n    \"webkitAnimationName\",\n    \"webkitAnimationPlayState\",\n    \"webkitAnimationTimingFunction\",\n    \"webkitAppearance\",\n    \"webkitAudioContext\",\n    \"webkitAudioDecodedByteCount\",\n    \"webkitAudioPannerNode\",\n    \"webkitBackfaceVisibility\",\n    \"webkitBackground\",\n    \"webkitBackgroundAttachment\",\n    \"webkitBackgroundClip\",\n    \"webkitBackgroundColor\",\n    \"webkitBackgroundImage\",\n    \"webkitBackgroundOrigin\",\n    \"webkitBackgroundPosition\",\n    \"webkitBackgroundPositionX\",\n    \"webkitBackgroundPositionY\",\n    \"webkitBackgroundRepeat\",\n    \"webkitBackgroundSize\",\n    \"webkitBackingStorePixelRatio\",\n    \"webkitBorderBottomLeftRadius\",\n    \"webkitBorderBottomRightRadius\",\n    \"webkitBorderImage\",\n    \"webkitBorderImageOutset\",\n    \"webkitBorderImageRepeat\",\n    \"webkitBorderImageSlice\",\n    \"webkitBorderImageSource\",\n    \"webkitBorderImageWidth\",\n    \"webkitBorderRadius\",\n    \"webkitBorderTopLeftRadius\",\n    \"webkitBorderTopRightRadius\",\n    \"webkitBoxAlign\",\n    \"webkitBoxDirection\",\n    \"webkitBoxFlex\",\n    \"webkitBoxOrdinalGroup\",\n    \"webkitBoxOrient\",\n    \"webkitBoxPack\",\n    \"webkitBoxShadow\",\n    \"webkitBoxSizing\",\n    \"webkitCancelAnimationFrame\",\n    \"webkitCancelFullScreen\",\n    \"webkitCancelKeyRequest\",\n    \"webkitCancelRequestAnimationFrame\",\n    \"webkitClearResourceTimings\",\n    \"webkitClosedCaptionsVisible\",\n    \"webkitConvertPointFromNodeToPage\",\n    \"webkitConvertPointFromPageToNode\",\n    \"webkitCreateShadowRoot\",\n    \"webkitCurrentFullScreenElement\",\n    \"webkitCurrentPlaybackTargetIsWireless\",\n    \"webkitDecodedFrameCount\",\n    \"webkitDirectionInvertedFromDevice\",\n    \"webkitDisplayingFullscreen\",\n    \"webkitDroppedFrameCount\",\n    \"webkitEnterFullScreen\",\n    \"webkitEnterFullscreen\",\n    \"webkitEntries\",\n    \"webkitExitFullScreen\",\n    \"webkitExitFullscreen\",\n    \"webkitExitPointerLock\",\n    \"webkitFilter\",\n    \"webkitFlex\",\n    \"webkitFlexBasis\",\n    \"webkitFlexDirection\",\n    \"webkitFlexFlow\",\n    \"webkitFlexGrow\",\n    \"webkitFlexShrink\",\n    \"webkitFlexWrap\",\n    \"webkitFullScreenKeyboardInputAllowed\",\n    \"webkitFullscreenElement\",\n    \"webkitFullscreenEnabled\",\n    \"webkitGenerateKeyRequest\",\n    \"webkitGetAsEntry\",\n    \"webkitGetDatabaseNames\",\n    \"webkitGetEntries\",\n    \"webkitGetEntriesByName\",\n    \"webkitGetEntriesByType\",\n    \"webkitGetFlowByName\",\n    \"webkitGetGamepads\",\n    \"webkitGetImageDataHD\",\n    \"webkitGetNamedFlows\",\n    \"webkitGetRegionFlowRanges\",\n    \"webkitGetUserMedia\",\n    \"webkitHasClosedCaptions\",\n    \"webkitHidden\",\n    \"webkitIDBCursor\",\n    \"webkitIDBDatabase\",\n    \"webkitIDBDatabaseError\",\n    \"webkitIDBDatabaseException\",\n    \"webkitIDBFactory\",\n    \"webkitIDBIndex\",\n    \"webkitIDBKeyRange\",\n    \"webkitIDBObjectStore\",\n    \"webkitIDBRequest\",\n    \"webkitIDBTransaction\",\n    \"webkitImageSmoothingEnabled\",\n    \"webkitIndexedDB\",\n    \"webkitInitMessageEvent\",\n    \"webkitIsFullScreen\",\n    \"webkitJustifyContent\",\n    \"webkitKeys\",\n    \"webkitLineClamp\",\n    \"webkitLineDashOffset\",\n    \"webkitLockOrientation\",\n    \"webkitMask\",\n    \"webkitMaskClip\",\n    \"webkitMaskComposite\",\n    \"webkitMaskImage\",\n    \"webkitMaskOrigin\",\n    \"webkitMaskPosition\",\n    \"webkitMaskPositionX\",\n    \"webkitMaskPositionY\",\n    \"webkitMaskRepeat\",\n    \"webkitMaskSize\",\n    \"webkitMatchesSelector\",\n    \"webkitMediaStream\",\n    \"webkitNotifications\",\n    \"webkitOfflineAudioContext\",\n    \"webkitOrder\",\n    \"webkitOrientation\",\n    \"webkitPeerConnection00\",\n    \"webkitPersistentStorage\",\n    \"webkitPerspective\",\n    \"webkitPerspectiveOrigin\",\n    \"webkitPointerLockElement\",\n    \"webkitPostMessage\",\n    \"webkitPreservesPitch\",\n    \"webkitPutImageDataHD\",\n    \"webkitRTCPeerConnection\",\n    \"webkitRegionOverset\",\n    \"webkitRelativePath\",\n    \"webkitRequestAnimationFrame\",\n    \"webkitRequestFileSystem\",\n    \"webkitRequestFullScreen\",\n    \"webkitRequestFullscreen\",\n    \"webkitRequestPointerLock\",\n    \"webkitResolveLocalFileSystemURL\",\n    \"webkitSetMediaKeys\",\n    \"webkitSetResourceTimingBufferSize\",\n    \"webkitShadowRoot\",\n    \"webkitShowPlaybackTargetPicker\",\n    \"webkitSlice\",\n    \"webkitSpeechGrammar\",\n    \"webkitSpeechGrammarList\",\n    \"webkitSpeechRecognition\",\n    \"webkitSpeechRecognitionError\",\n    \"webkitSpeechRecognitionEvent\",\n    \"webkitStorageInfo\",\n    \"webkitSupportsFullscreen\",\n    \"webkitTemporaryStorage\",\n    \"webkitTextFillColor\",\n    \"webkitTextSizeAdjust\",\n    \"webkitTextStroke\",\n    \"webkitTextStrokeColor\",\n    \"webkitTextStrokeWidth\",\n    \"webkitTransform\",\n    \"webkitTransformOrigin\",\n    \"webkitTransformStyle\",\n    \"webkitTransition\",\n    \"webkitTransitionDelay\",\n    \"webkitTransitionDuration\",\n    \"webkitTransitionProperty\",\n    \"webkitTransitionTimingFunction\",\n    \"webkitURL\",\n    \"webkitUnlockOrientation\",\n    \"webkitUserSelect\",\n    \"webkitVideoDecodedByteCount\",\n    \"webkitVisibilityState\",\n    \"webkitWirelessVideoPlaybackDisabled\",\n    \"webkitdirectory\",\n    \"webkitdropzone\",\n    \"webstore\",\n    \"weight\",\n    \"whatToShow\",\n    \"wheelDelta\",\n    \"wheelDeltaX\",\n    \"wheelDeltaY\",\n    \"whenDefined\",\n    \"which\",\n    \"white-space\",\n    \"whiteSpace\",\n    \"wholeText\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"willChange\",\n    \"willValidate\",\n    \"window\",\n    \"withCredentials\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"wordBreak\",\n    \"wordSpacing\",\n    \"wordWrap\",\n    \"workerStart\",\n    \"wow64\",\n    \"wrap\",\n    \"wrapKey\",\n    \"writable\",\n    \"writableAuxiliaries\",\n    \"write\",\n    \"writeText\",\n    \"writeValue\",\n    \"writeWithoutResponse\",\n    \"writeln\",\n    \"writing-mode\",\n    \"writingMode\",\n    \"x\",\n    \"x1\",\n    \"x2\",\n    \"xChannelSelector\",\n    \"xmlEncoding\",\n    \"xmlStandalone\",\n    \"xmlVersion\",\n    \"xmlbase\",\n    \"xmllang\",\n    \"xmlspace\",\n    \"xor\",\n    \"xr\",\n    \"y\",\n    \"y1\",\n    \"y2\",\n    \"yChannelSelector\",\n    \"yandex\",\n    \"z\",\n    \"z-index\",\n    \"zIndex\",\n    \"zoom\",\n    \"zoomAndPan\",\n    \"zoomRectScreen\",\n];\n", "/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n/* global global, self */\n\nimport {\n    defaults,\n    push_uniq,\n} from \"./utils/index.js\";\nimport { base54 } from \"./scope.js\";\nimport {\n    AST_Binary,\n    AST_Call,\n    AST_ClassPrivateProperty,\n    AST_Conditional,\n    AST_Dot,\n    AST_DotHash,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_PrivateMethod,\n    AST_PrivateGetter,\n    AST_PrivateSetter,\n    AST_PrivateIn,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    TreeTransformer,\n    TreeWalker,\n} from \"./ast.js\";\nimport { domprops } from \"../tools/domprops.js\";\n\nfunction find_builtins(reserved) {\n    domprops.forEach(add);\n\n    // Compatibility fix for some standard defined globals not defined on every js environment\n    var new_globals = [\"Symbol\", \"Map\", \"Promise\", \"Proxy\", \"Reflect\", \"Set\", \"WeakMap\", \"WeakSet\"];\n    var objects = {};\n    var global_ref = typeof global === \"object\" ? global : self;\n\n    new_globals.forEach(function (new_global) {\n        objects[new_global] = global_ref[new_global] || function() {};\n    });\n\n    [\n        \"null\",\n        \"true\",\n        \"false\",\n        \"NaN\",\n        \"Infinity\",\n        \"-Infinity\",\n        \"undefined\",\n    ].forEach(add);\n    [ Object, Array, Function, Number,\n      String, Boolean, Error, Math,\n      Date, RegExp, objects.Symbol, ArrayBuffer,\n      DataView, decodeURI, decodeURIComponent,\n      encodeURI, encodeURIComponent, eval, EvalError,\n      Float32Array, Float64Array, Int8Array, Int16Array,\n      Int32Array, isFinite, isNaN, JSON, objects.Map, parseFloat,\n      parseInt, objects.Promise, objects.Proxy, RangeError, ReferenceError,\n      objects.Reflect, objects.Set, SyntaxError, TypeError, Uint8Array,\n      Uint8ClampedArray, Uint16Array, Uint32Array, URIError,\n      objects.WeakMap, objects.WeakSet\n    ].forEach(function(ctor) {\n        Object.getOwnPropertyNames(ctor).map(add);\n        if (ctor.prototype) {\n            Object.getOwnPropertyNames(ctor.prototype).map(add);\n        }\n    });\n    function add(name) {\n        reserved.add(name);\n    }\n}\n\nfunction reserve_quoted_keys(ast, reserved) {\n    function add(name) {\n        push_uniq(reserved, name);\n    }\n\n    ast.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_ObjectKeyVal && node.quote) {\n            add(node.key);\n        } else if (node instanceof AST_ObjectProperty && node.quote) {\n            add(node.key.name);\n        } else if (node instanceof AST_Sub) {\n            addStrings(node.property, add);\n        }\n    }));\n}\n\nfunction addStrings(node, add) {\n    node.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Sequence) {\n            addStrings(node.tail_node(), add);\n        } else if (node instanceof AST_String) {\n            add(node.value);\n        } else if (node instanceof AST_Conditional) {\n            addStrings(node.consequent, add);\n            addStrings(node.alternative, add);\n        }\n        return true;\n    }));\n}\n\nfunction mangle_private_properties(ast, options) {\n    var cprivate = -1;\n    var private_cache = new Map();\n    var nth_identifier = options.nth_identifier || base54;\n\n    ast =  ast.transform(new TreeTransformer(function(node) {\n        if (\n            node instanceof AST_ClassPrivateProperty\n            || node instanceof AST_PrivateMethod\n            || node instanceof AST_PrivateGetter\n            || node instanceof AST_PrivateSetter\n            || node instanceof AST_PrivateIn\n        ) {\n            node.key.name = mangle_private(node.key.name);\n        } else if (node instanceof AST_DotHash) {\n            node.property = mangle_private(node.property);\n        }\n    }));\n    return ast;\n\n    function mangle_private(name) {\n        let mangled = private_cache.get(name);\n        if (!mangled) {\n            mangled = nth_identifier.get(++cprivate);\n            private_cache.set(name, mangled);\n        }\n\n        return mangled;\n    }\n}\n\nfunction mangle_properties(ast, options) {\n    options = defaults(options, {\n        builtins: false,\n        cache: null,\n        debug: false,\n        keep_quoted: false,\n        nth_identifier: base54,\n        only_cache: false,\n        regex: null,\n        reserved: null,\n        undeclared: false,\n    }, true);\n\n    var nth_identifier = options.nth_identifier;\n\n    var reserved_option = options.reserved;\n    if (!Array.isArray(reserved_option)) reserved_option = [reserved_option];\n    var reserved = new Set(reserved_option);\n    if (!options.builtins) find_builtins(reserved);\n\n    var cname = -1;\n\n    var cache;\n    if (options.cache) {\n        cache = options.cache.props;\n    } else {\n        cache = new Map();\n    }\n\n    var regex = options.regex && new RegExp(options.regex);\n\n    // note debug is either false (disabled), or a string of the debug suffix to use (enabled).\n    // note debug may be enabled as an empty string, which is falsey. Also treat passing 'true'\n    // the same as passing an empty string.\n    var debug = options.debug !== false;\n    var debug_name_suffix;\n    if (debug) {\n        debug_name_suffix = (options.debug === true ? \"\" : options.debug);\n    }\n\n    var names_to_mangle = new Set();\n    var unmangleable = new Set();\n    // Track each already-mangled name to prevent nth_identifier from generating\n    // the same name.\n    cache.forEach((mangled_name) => unmangleable.add(mangled_name));\n\n    var keep_quoted = !!options.keep_quoted;\n\n    // step 1: find candidates to mangle\n    ast.walk(new TreeWalker(function(node) {\n        if (\n            node instanceof AST_ClassPrivateProperty\n            || node instanceof AST_PrivateMethod\n            || node instanceof AST_PrivateGetter\n            || node instanceof AST_PrivateSetter\n            || node instanceof AST_DotHash\n        ) {\n            // handled by mangle_private_properties\n        } else if (node instanceof AST_ObjectKeyVal) {\n            if (typeof node.key == \"string\" && (!keep_quoted || !node.quote)) {\n                add(node.key);\n            }\n        } else if (node instanceof AST_ObjectProperty) {\n            // setter or getter, since KeyVal is handled above\n            if (!keep_quoted || !node.quote) {\n                add(node.key.name);\n            }\n        } else if (node instanceof AST_Dot) {\n            var declared = !!options.undeclared;\n            if (!declared) {\n                var root = node;\n                while (root.expression) {\n                    root = root.expression;\n                }\n                declared = !(root.thedef && root.thedef.undeclared);\n            }\n            if (declared &&\n                (!keep_quoted || !node.quote)) {\n                add(node.property);\n            }\n        } else if (node instanceof AST_Sub) {\n            if (!keep_quoted) {\n                addStrings(node.property, add);\n            }\n        } else if (node instanceof AST_Call\n            && node.expression.print_to_string() == \"Object.defineProperty\") {\n            addStrings(node.args[1], add);\n        } else if (node instanceof AST_Binary && node.operator === \"in\") {\n            addStrings(node.left, add);\n        }\n    }));\n\n    // step 2: transform the tree, renaming properties\n    return ast.transform(new TreeTransformer(function(node) {\n        if (\n            node instanceof AST_ClassPrivateProperty\n            || node instanceof AST_PrivateMethod\n            || node instanceof AST_PrivateGetter\n            || node instanceof AST_PrivateSetter\n            || node instanceof AST_DotHash\n        ) {\n            // handled by mangle_private_properties\n        } else if (node instanceof AST_ObjectKeyVal) {\n            if (typeof node.key == \"string\" && (!keep_quoted || !node.quote)) {\n                node.key = mangle(node.key);\n            }\n        } else if (node instanceof AST_ObjectProperty) {\n            // setter, getter, method or class field\n            if (!keep_quoted || !node.quote) {\n                node.key.name = mangle(node.key.name);\n            }\n        } else if (node instanceof AST_Dot) {\n            if (!keep_quoted || !node.quote) {\n                node.property = mangle(node.property);\n            }\n        } else if (!keep_quoted && node instanceof AST_Sub) {\n            node.property = mangleStrings(node.property);\n        } else if (node instanceof AST_Call\n            && node.expression.print_to_string() == \"Object.defineProperty\") {\n            node.args[1] = mangleStrings(node.args[1]);\n        } else if (node instanceof AST_Binary && node.operator === \"in\") {\n            node.left = mangleStrings(node.left);\n        }\n    }));\n\n    // only function declarations after this line\n\n    function can_mangle(name) {\n        if (unmangleable.has(name)) return false;\n        if (reserved.has(name)) return false;\n        if (options.only_cache) {\n            return cache.has(name);\n        }\n        if (/^-?[0-9]+(\\.[0-9]+)?(e[+-][0-9]+)?$/.test(name)) return false;\n        return true;\n    }\n\n    function should_mangle(name) {\n        if (regex && !regex.test(name)) return false;\n        if (reserved.has(name)) return false;\n        return cache.has(name)\n            || names_to_mangle.has(name);\n    }\n\n    function add(name) {\n        if (can_mangle(name))\n            names_to_mangle.add(name);\n\n        if (!should_mangle(name)) {\n            unmangleable.add(name);\n        }\n    }\n\n    function mangle(name) {\n        if (!should_mangle(name)) {\n            return name;\n        }\n\n        var mangled = cache.get(name);\n        if (!mangled) {\n            if (debug) {\n                // debug mode: use a prefix and suffix to preserve readability, e.g. o.foo -> o._$foo$NNN_.\n                var debug_mangled = \"_$\" + name + \"$\" + debug_name_suffix + \"_\";\n\n                if (can_mangle(debug_mangled)) {\n                    mangled = debug_mangled;\n                }\n            }\n\n            // either debug mode is off, or it is on and we could not use the mangled name\n            if (!mangled) {\n                do {\n                    mangled = nth_identifier.get(++cname);\n                } while (!can_mangle(mangled));\n            }\n\n            cache.set(name, mangled);\n        }\n        return mangled;\n    }\n\n    function mangleStrings(node) {\n        return node.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Sequence) {\n                var last = node.expressions.length - 1;\n                node.expressions[last] = mangleStrings(node.expressions[last]);\n            } else if (node instanceof AST_String) {\n                node.value = mangle(node.value);\n            } else if (node instanceof AST_Conditional) {\n                node.consequent = mangleStrings(node.consequent);\n                node.alternative = mangleStrings(node.alternative);\n            }\n            return node;\n        }));\n    }\n}\n\nexport {\n    reserve_quoted_keys,\n    mangle_properties,\n    mangle_private_properties,\n};\n", "\"use strict\";\n/* eslint-env browser, es6, node */\n\nimport {\n    defaults,\n    map_from_object,\n    map_to_object,\n    HOP,\n} from \"./utils/index.js\";\nimport { AST_Toplevel, AST_Node, walk, AST_Scope } from \"./ast.js\";\nimport { parse } from \"./parse.js\";\nimport { OutputStream } from \"./output.js\";\nimport { Compressor } from \"./compress/index.js\";\nimport { base54 } from \"./scope.js\";\nimport { SourceMap } from \"./sourcemap.js\";\nimport {\n    mangle_properties,\n    mangle_private_properties,\n    reserve_quoted_keys,\n} from \"./propmangle.js\";\n\n// to/from base64 functions\n// Prefer built-in Buffer, if available, then use hack\n// https://developer.mozilla.org/en-US/docs/Glossary/Base64#The_Unicode_Problem\nvar to_ascii = typeof Buffer !== \"undefined\"\n    ? (b64) => Buffer.from(b64, \"base64\").toString()\n    : (b64) => decodeURIComponent(escape(atob(b64)));\nvar to_base64 = typeof Buffer !== \"undefined\"\n    ? (str) => Buffer.from(str).toString(\"base64\")\n    : (str) => btoa(unescape(encodeURIComponent(str)));\n\nfunction read_source_map(code) {\n    var match = /(?:^|[^.])\\/\\/# sourceMappingURL=data:application\\/json(;[\\w=-]*)?;base64,([+/0-9A-Za-z]*=*)\\s*$/.exec(code);\n    if (!match) {\n        console.warn(\"inline source map not found\");\n        return null;\n    }\n    return to_ascii(match[2]);\n}\n\nfunction set_shorthand(name, options, keys) {\n    if (options[name]) {\n        keys.forEach(function(key) {\n            if (options[key]) {\n                if (typeof options[key] != \"object\") options[key] = {};\n                if (!(name in options[key])) options[key][name] = options[name];\n            }\n        });\n    }\n}\n\nfunction init_cache(cache) {\n    if (!cache) return;\n    if (!(\"props\" in cache)) {\n        cache.props = new Map();\n    } else if (!(cache.props instanceof Map)) {\n        cache.props = map_from_object(cache.props);\n    }\n}\n\nfunction cache_to_json(cache) {\n    return {\n        props: map_to_object(cache.props)\n    };\n}\n\nfunction log_input(files, options, fs, debug_folder) {\n    if (!(fs && fs.writeFileSync && fs.mkdirSync)) {\n        return;\n    }\n\n    try {\n        fs.mkdirSync(debug_folder);\n    } catch (e) {\n        if (e.code !== \"EEXIST\") throw e;\n    }\n\n    const log_path = `${debug_folder}/terser-debug-${(Math.random() * 9999999) | 0}.log`;\n\n    options = options || {};\n\n    const options_str = JSON.stringify(options, (_key, thing) => {\n        if (typeof thing === \"function\") return \"[Function \" + thing.toString() + \"]\";\n        if (thing instanceof RegExp) return \"[RegExp \" + thing.toString() + \"]\";\n        return thing;\n    }, 4);\n\n    const files_str = (file) => {\n        if (typeof file === \"object\" && options.parse && options.parse.spidermonkey) {\n            return JSON.stringify(file, null, 2);\n        } else if (typeof file === \"object\") {\n            return Object.keys(file)\n                .map((key) => key + \": \" + files_str(file[key]))\n                .join(\"\\n\\n\");\n        } else if (typeof file === \"string\") {\n            return \"```\\n\" + file + \"\\n```\";\n        } else {\n            return file; // What do?\n        }\n    };\n\n    fs.writeFileSync(log_path, \"Options: \\n\" + options_str + \"\\n\\nInput files:\\n\\n\" + files_str(files) + \"\\n\");\n}\n\nasync function minify(files, options, _fs_module) {\n    if (\n        _fs_module\n        && typeof process === \"object\"\n        && process.env\n        && typeof process.env.TERSER_DEBUG_DIR === \"string\"\n    ) {\n        log_input(files, options, _fs_module, process.env.TERSER_DEBUG_DIR);\n    }\n\n    options = defaults(options, {\n        compress: {},\n        ecma: undefined,\n        enclose: false,\n        ie8: false,\n        keep_classnames: undefined,\n        keep_fnames: false,\n        mangle: {},\n        module: false,\n        nameCache: null,\n        output: null,\n        format: null,\n        parse: {},\n        rename: undefined,\n        safari10: false,\n        sourceMap: false,\n        spidermonkey: false,\n        timings: false,\n        toplevel: false,\n        warnings: false,\n        wrap: false,\n    }, true);\n\n    var timings = options.timings && {\n        start: Date.now()\n    };\n    if (options.keep_classnames === undefined) {\n        options.keep_classnames = options.keep_fnames;\n    }\n    if (options.rename === undefined) {\n        options.rename = options.compress && options.mangle;\n    }\n    if (options.output && options.format) {\n        throw new Error(\"Please only specify either output or format option, preferrably format.\");\n    }\n    options.format = options.format || options.output || {};\n    set_shorthand(\"ecma\", options, [ \"parse\", \"compress\", \"format\" ]);\n    set_shorthand(\"ie8\", options, [ \"compress\", \"mangle\", \"format\" ]);\n    set_shorthand(\"keep_classnames\", options, [ \"compress\", \"mangle\" ]);\n    set_shorthand(\"keep_fnames\", options, [ \"compress\", \"mangle\" ]);\n    set_shorthand(\"module\", options, [ \"parse\", \"compress\", \"mangle\" ]);\n    set_shorthand(\"safari10\", options, [ \"mangle\", \"format\" ]);\n    set_shorthand(\"toplevel\", options, [ \"compress\", \"mangle\" ]);\n    set_shorthand(\"warnings\", options, [ \"compress\" ]); // legacy\n    var quoted_props;\n    if (options.mangle) {\n        options.mangle = defaults(options.mangle, {\n            cache: options.nameCache && (options.nameCache.vars || {}),\n            eval: false,\n            ie8: false,\n            keep_classnames: false,\n            keep_fnames: false,\n            module: false,\n            nth_identifier: base54,\n            properties: false,\n            reserved: [],\n            safari10: false,\n            toplevel: false,\n        }, true);\n        if (options.mangle.properties) {\n            if (typeof options.mangle.properties != \"object\") {\n                options.mangle.properties = {};\n            }\n            if (options.mangle.properties.keep_quoted) {\n                quoted_props = options.mangle.properties.reserved;\n                if (!Array.isArray(quoted_props)) quoted_props = [];\n                options.mangle.properties.reserved = quoted_props;\n            }\n            if (options.nameCache && !(\"cache\" in options.mangle.properties)) {\n                options.mangle.properties.cache = options.nameCache.props || {};\n            }\n        }\n        init_cache(options.mangle.cache);\n        init_cache(options.mangle.properties.cache);\n    }\n    if (options.sourceMap) {\n        options.sourceMap = defaults(options.sourceMap, {\n            asObject: false,\n            content: null,\n            filename: null,\n            includeSources: false,\n            root: null,\n            url: null,\n        }, true);\n    }\n\n    // -- Parse phase --\n    if (timings) timings.parse = Date.now();\n    var toplevel;\n    if (files instanceof AST_Toplevel) {\n        toplevel = files;\n    } else {\n        if (typeof files == \"string\" || (options.parse.spidermonkey && !Array.isArray(files))) {\n            files = [ files ];\n        }\n        options.parse = options.parse || {};\n        options.parse.toplevel = null;\n\n        if (options.parse.spidermonkey) {\n            options.parse.toplevel = AST_Node.from_mozilla_ast(Object.keys(files).reduce(function(toplevel, name) {\n                if (!toplevel) return files[name];\n                toplevel.body = toplevel.body.concat(files[name].body);\n                return toplevel;\n            }, null));\n        } else {\n            delete options.parse.spidermonkey;\n\n            for (var name in files) if (HOP(files, name)) {\n                options.parse.filename = name;\n                options.parse.toplevel = parse(files[name], options.parse);\n                if (options.sourceMap && options.sourceMap.content == \"inline\") {\n                    if (Object.keys(files).length > 1)\n                        throw new Error(\"inline source map only works with singular input\");\n                    options.sourceMap.content = read_source_map(files[name]);\n                }\n            }\n        }\n\n        toplevel = options.parse.toplevel;\n    }\n    if (quoted_props && options.mangle.properties.keep_quoted !== \"strict\") {\n        reserve_quoted_keys(toplevel, quoted_props);\n    }\n    if (options.wrap) {\n        toplevel = toplevel.wrap_commonjs(options.wrap);\n    }\n    if (options.enclose) {\n        toplevel = toplevel.wrap_enclose(options.enclose);\n    }\n    if (timings) timings.rename = Date.now();\n    // disable rename on harmony due to expand_names bug in for-of loops\n    // https://github.com/mishoo/UglifyJS2/issues/2794\n    if (0 && options.rename) {\n        toplevel.figure_out_scope(options.mangle);\n        toplevel.expand_names(options.mangle);\n    }\n\n    // -- Compress phase --\n    if (timings) timings.compress = Date.now();\n    if (options.compress) {\n        toplevel = new Compressor(options.compress, {\n            mangle_options: options.mangle\n        }).compress(toplevel);\n    }\n\n    // -- Mangle phase --\n    if (timings) timings.scope = Date.now();\n    if (options.mangle) toplevel.figure_out_scope(options.mangle);\n    if (timings) timings.mangle = Date.now();\n    if (options.mangle) {\n        toplevel.compute_char_frequency(options.mangle);\n        toplevel.mangle_names(options.mangle);\n        toplevel = mangle_private_properties(toplevel, options.mangle);\n    }\n    if (timings) timings.properties = Date.now();\n    if (options.mangle && options.mangle.properties) {\n        toplevel = mangle_properties(toplevel, options.mangle.properties);\n    }\n\n    // Format phase\n    if (timings) timings.format = Date.now();\n    var result = {};\n    if (options.format.ast) {\n        result.ast = toplevel;\n    }\n    if (options.format.spidermonkey) {\n        result.ast = toplevel.to_mozilla_ast();\n    }\n    let format_options;\n    if (!HOP(options.format, \"code\") || options.format.code) {\n        // Make a shallow copy so that we can modify without mutating the user's input.\n        format_options = {...options.format};\n        if (!format_options.ast) {\n            // Destroy stuff to save RAM. (unless the deprecated `ast` option is on)\n            format_options._destroy_ast = true;\n\n            walk(toplevel, node => {\n                if (node instanceof AST_Scope) {\n                    node.variables = undefined;\n                    node.enclosed = undefined;\n                    node.parent_scope = undefined;\n                }\n                if (node.block_scope) {\n                    node.block_scope.variables = undefined;\n                    node.block_scope.enclosed = undefined;\n                    node.parent_scope = undefined;\n                }\n            });\n        }\n\n        if (options.sourceMap) {\n            if (options.sourceMap.includeSources && files instanceof AST_Toplevel) {\n                throw new Error(\"original source content unavailable\");\n            }\n            format_options.source_map = await SourceMap({\n                file: options.sourceMap.filename,\n                orig: options.sourceMap.content,\n                root: options.sourceMap.root,\n                files: options.sourceMap.includeSources ? files : null,\n            });\n        }\n        delete format_options.ast;\n        delete format_options.code;\n        delete format_options.spidermonkey;\n        var stream = OutputStream(format_options);\n        toplevel.print(stream);\n        result.code = stream.get();\n        if (options.sourceMap) {\n            Object.defineProperty(result, \"map\", {\n                configurable: true,\n                enumerable: true,\n                get() {\n                    const map = format_options.source_map.getEncoded();\n                    return (result.map = options.sourceMap.asObject ? map : JSON.stringify(map));\n                },\n                set(value) {\n                    Object.defineProperty(result, \"map\", {\n                        value,\n                        writable: true,\n                    });\n                }\n            });\n            result.decoded_map = format_options.source_map.getDecoded();\n            if (options.sourceMap.url == \"inline\") {\n                var sourceMap = typeof result.map === \"object\" ? JSON.stringify(result.map) : result.map;\n                result.code += \"\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + to_base64(sourceMap);\n            } else if (options.sourceMap.url) {\n                result.code += \"\\n//# sourceMappingURL=\" + options.sourceMap.url;\n            }\n        }\n    }\n    if (options.nameCache && options.mangle) {\n        if (options.mangle.cache) options.nameCache.vars = cache_to_json(options.mangle.cache);\n        if (options.mangle.properties && options.mangle.properties.cache) {\n            options.nameCache.props = cache_to_json(options.mangle.properties.cache);\n        }\n    }\n    if (format_options && format_options.source_map) {\n        format_options.source_map.destroy();\n    }\n    if (timings) {\n        timings.end = Date.now();\n        result.timings = {\n            parse: 1e-3 * (timings.rename - timings.parse),\n            rename: 1e-3 * (timings.compress - timings.rename),\n            compress: 1e-3 * (timings.scope - timings.compress),\n            scope: 1e-3 * (timings.mangle - timings.scope),\n            mangle: 1e-3 * (timings.properties - timings.mangle),\n            properties: 1e-3 * (timings.format - timings.properties),\n            format: 1e-3 * (timings.end - timings.format),\n            total: 1e-3 * (timings.end - timings.start)\n        };\n    }\n    return result;\n}\n\nexport {\n  minify,\n  to_ascii,\n};\n", "import { minify, _default_options } from \"../main.js\";\nimport { parse } from \"./parse.js\";\nimport {\n    AST_Assign,\n    AST_Array,\n    AST_Constant,\n    AST_Node,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Sequence,\n    AST_Symbol,\n    AST_Token,\n    walk\n} from \"./ast.js\";\nimport { OutputStream } from \"./output.js\";\n\nexport async function run_cli({ program, packageJson, fs, path }) {\n    const skip_keys = new Set([ \"cname\", \"parent_scope\", \"scope\", \"uses_eval\", \"uses_with\" ]);\n    var files = {};\n    var options = {\n        compress: false,\n        mangle: false\n    };\n    const default_options = await _default_options();\n    program.version(packageJson.name + \" \" + packageJson.version);\n    program.parseArgv = program.parse;\n    program.parse = undefined;\n\n    if (process.argv.includes(\"ast\")) program.helpInformation = describe_ast;\n    else if (process.argv.includes(\"options\")) program.helpInformation = function() {\n        var text = [];\n        for (var option in default_options) {\n            text.push(\"--\" + (option === \"sourceMap\" ? \"source-map\" : option) + \" options:\");\n            text.push(format_object(default_options[option]));\n            text.push(\"\");\n        }\n        return text.join(\"\\n\");\n    };\n\n    program.option(\"-p, --parse <options>\", \"Specify parser options.\", parse_js());\n    program.option(\"-c, --compress [options]\", \"Enable compressor/specify compressor options.\", parse_js());\n    program.option(\"-m, --mangle [options]\", \"Mangle names/specify mangler options.\", parse_js());\n    program.option(\"--mangle-props [options]\", \"Mangle properties/specify mangler options.\", parse_js());\n    program.option(\"-f, --format [options]\", \"Format options.\", parse_js());\n    program.option(\"-b, --beautify [options]\", \"Alias for --format.\", parse_js());\n    program.option(\"-o, --output <file>\", \"Output file (default STDOUT).\");\n    program.option(\"--comments [filter]\", \"Preserve copyright comments in the output.\");\n    program.option(\"--config-file <file>\", \"Read minify() options from JSON file.\");\n    program.option(\"-d, --define <expr>[=value]\", \"Global definitions.\", parse_js(\"define\"));\n    program.option(\"--ecma <version>\", \"Specify ECMAScript release: 5, 2015, 2016 or 2017...\");\n    program.option(\"-e, --enclose [arg[,...][:value[,...]]]\", \"Embed output in a big function with configurable arguments and values.\");\n    program.option(\"--ie8\", \"Support non-standard Internet Explorer 8.\");\n    program.option(\"--keep-classnames\", \"Do not mangle/drop class names.\");\n    program.option(\"--keep-fnames\", \"Do not mangle/drop function names. Useful for code relying on Function.prototype.name.\");\n    program.option(\"--module\", \"Input is an ES6 module\");\n    program.option(\"--name-cache <file>\", \"File to hold mangled name mappings.\");\n    program.option(\"--rename\", \"Force symbol expansion.\");\n    program.option(\"--no-rename\", \"Disable symbol expansion.\");\n    program.option(\"--safari10\", \"Support non-standard Safari 10.\");\n    program.option(\"--source-map [options]\", \"Enable source map/specify source map options.\", parse_js());\n    program.option(\"--timings\", \"Display operations run time on STDERR.\");\n    program.option(\"--toplevel\", \"Compress and/or mangle variables in toplevel scope.\");\n    program.option(\"--wrap <name>\", \"Embed everything as a function with “exports” corresponding to “name” globally.\");\n    program.arguments(\"[files...]\").parseArgv(process.argv);\n    if (program.configFile) {\n        options = JSON.parse(read_file(program.configFile));\n    }\n    if (!program.output && program.sourceMap && program.sourceMap.url != \"inline\") {\n        fatal(\"ERROR: cannot write source map to STDOUT\");\n    }\n\n    [\n        \"compress\",\n        \"enclose\",\n        \"ie8\",\n        \"mangle\",\n        \"module\",\n        \"safari10\",\n        \"sourceMap\",\n        \"toplevel\",\n        \"wrap\"\n    ].forEach(function(name) {\n        if (name in program) {\n            options[name] = program[name];\n        }\n    });\n\n    if (\"ecma\" in program) {\n        if (program.ecma != (program.ecma | 0)) fatal(\"ERROR: ecma must be an integer\");\n        const ecma = program.ecma | 0;\n        if (ecma > 5 && ecma < 2015)\n            options.ecma = ecma + 2009;\n        else\n            options.ecma = ecma;\n    }\n    if (program.format || program.beautify) {\n        const chosenOption = program.format || program.beautify;\n        options.format = typeof chosenOption === \"object\" ? chosenOption : {};\n    }\n    if (program.comments) {\n        if (typeof options.format != \"object\") options.format = {};\n        options.format.comments = typeof program.comments == \"string\" ? (program.comments == \"false\" ? false : program.comments) : \"some\";\n    }\n    if (program.define) {\n        if (typeof options.compress != \"object\") options.compress = {};\n        if (typeof options.compress.global_defs != \"object\") options.compress.global_defs = {};\n        for (var expr in program.define) {\n            options.compress.global_defs[expr] = program.define[expr];\n        }\n    }\n    if (program.keepClassnames) {\n        options.keep_classnames = true;\n    }\n    if (program.keepFnames) {\n        options.keep_fnames = true;\n    }\n    if (program.mangleProps) {\n        if (program.mangleProps.domprops) {\n            delete program.mangleProps.domprops;\n        } else {\n            if (typeof program.mangleProps != \"object\") program.mangleProps = {};\n            if (!Array.isArray(program.mangleProps.reserved)) program.mangleProps.reserved = [];\n        }\n        if (typeof options.mangle != \"object\") options.mangle = {};\n        options.mangle.properties = program.mangleProps;\n    }\n    if (program.nameCache) {\n        options.nameCache = JSON.parse(read_file(program.nameCache, \"{}\"));\n    }\n    if (program.output == \"ast\") {\n        options.format = {\n            ast: true,\n            code: false\n        };\n    }\n    if (program.parse) {\n        if (!program.parse.acorn && !program.parse.spidermonkey) {\n            options.parse = program.parse;\n        } else if (program.sourceMap && program.sourceMap.content == \"inline\") {\n            fatal(\"ERROR: inline source map only works with built-in parser\");\n        }\n    }\n    if (~program.rawArgs.indexOf(\"--rename\")) {\n        options.rename = true;\n    } else if (!program.rename) {\n        options.rename = false;\n    }\n\n    let convert_path = name => name;\n    if (typeof program.sourceMap == \"object\" && \"base\" in program.sourceMap) {\n        convert_path = function() {\n            var base = program.sourceMap.base;\n            delete options.sourceMap.base;\n            return function(name) {\n                return path.relative(base, name);\n            };\n        }();\n    }\n\n    let filesList;\n    if (options.files && options.files.length) {\n        filesList = options.files;\n\n        delete options.files;\n    } else if (program.args.length) {\n        filesList = program.args;\n    }\n\n    if (filesList) {\n        simple_glob(filesList).forEach(function(name) {\n            files[convert_path(name)] = read_file(name);\n        });\n    } else {\n        await new Promise((resolve) => {\n            var chunks = [];\n            process.stdin.setEncoding(\"utf8\");\n            process.stdin.on(\"data\", function(chunk) {\n                chunks.push(chunk);\n            }).on(\"end\", function() {\n                files = [ chunks.join(\"\") ];\n                resolve();\n            });\n            process.stdin.resume();\n        });\n    }\n\n    await run_cli();\n\n    function convert_ast(fn) {\n        return AST_Node.from_mozilla_ast(Object.keys(files).reduce(fn, null));\n    }\n\n    async function run_cli() {\n        var content = program.sourceMap && program.sourceMap.content;\n        if (content && content !== \"inline\") {\n            options.sourceMap.content = read_file(content, content);\n        }\n        if (program.timings) options.timings = true;\n\n        try {\n            if (program.parse) {\n                if (program.parse.acorn) {\n                    files = convert_ast(function(toplevel, name) {\n                        return require(\"acorn\").parse(files[name], {\n                            ecmaVersion: 2018,\n                            locations: true,\n                            program: toplevel,\n                            sourceFile: name,\n                            sourceType: options.module || program.parse.module ? \"module\" : \"script\"\n                        });\n                    });\n                } else if (program.parse.spidermonkey) {\n                    files = convert_ast(function(toplevel, name) {\n                        var obj = JSON.parse(files[name]);\n                        if (!toplevel) return obj;\n                        toplevel.body = toplevel.body.concat(obj.body);\n                        return toplevel;\n                    });\n                }\n            }\n        } catch (ex) {\n            fatal(ex);\n        }\n\n        let result;\n        try {\n            result = await minify(files, options, fs);\n        } catch (ex) {\n            if (ex.name == \"SyntaxError\") {\n                print_error(\"Parse error at \" + ex.filename + \":\" + ex.line + \",\" + ex.col);\n                var col = ex.col;\n                var lines = files[ex.filename].split(/\\r?\\n/);\n                var line = lines[ex.line - 1];\n                if (!line && !col) {\n                    line = lines[ex.line - 2];\n                    col = line.length;\n                }\n                if (line) {\n                    var limit = 70;\n                    if (col > limit) {\n                        line = line.slice(col - limit);\n                        col = limit;\n                    }\n                    print_error(line.slice(0, 80));\n                    print_error(line.slice(0, col).replace(/\\S/g, \" \") + \"^\");\n                }\n            }\n            if (ex.defs) {\n                print_error(\"Supported options:\");\n                print_error(format_object(ex.defs));\n            }\n            fatal(ex);\n            return;\n        }\n\n        if (program.output == \"ast\") {\n            if (!options.compress && !options.mangle) {\n                result.ast.figure_out_scope({});\n            }\n            console.log(JSON.stringify(result.ast, function(key, value) {\n                if (value) switch (key) {\n                  case \"thedef\":\n                    return symdef(value);\n                  case \"enclosed\":\n                    return value.length ? value.map(symdef) : undefined;\n                  case \"variables\":\n                  case \"globals\":\n                    return value.size ? collect_from_map(value, symdef) : undefined;\n                }\n                if (skip_keys.has(key)) return;\n                if (value instanceof AST_Token) return;\n                if (value instanceof Map) return;\n                if (value instanceof AST_Node) {\n                    var result = {\n                        _class: \"AST_\" + value.TYPE\n                    };\n                    if (value.block_scope) {\n                        result.variables = value.block_scope.variables;\n                        result.enclosed = value.block_scope.enclosed;\n                    }\n                    value.CTOR.PROPS.forEach(function(prop) {\n                        if (prop !== \"block_scope\") {\n                            result[prop] = value[prop];\n                        }\n                    });\n                    return result;\n                }\n                return value;\n            }, 2));\n        } else if (program.output == \"spidermonkey\") {\n            try {\n                const minified = await minify(\n                    result.code,\n                    {\n                        compress: false,\n                        mangle: false,\n                        format: {\n                            ast: true,\n                            code: false\n                        }\n                    },\n                    fs\n                );\n                console.log(JSON.stringify(minified.ast.to_mozilla_ast(), null, 2));\n            } catch (ex) {\n                fatal(ex);\n                return;\n            }\n        } else if (program.output) {\n            fs.writeFileSync(program.output, result.code);\n            if (options.sourceMap && options.sourceMap.url !== \"inline\" && result.map) {\n                fs.writeFileSync(program.output + \".map\", result.map);\n            }\n        } else {\n            console.log(result.code);\n        }\n        if (program.nameCache) {\n            fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));\n        }\n        if (result.timings) for (var phase in result.timings) {\n            print_error(\"- \" + phase + \": \" + result.timings[phase].toFixed(3) + \"s\");\n        }\n    }\n\n    function fatal(message) {\n        if (message instanceof Error) message = message.stack.replace(/^\\S*?Error:/, \"ERROR:\");\n        print_error(message);\n        process.exit(1);\n    }\n\n    // A file glob function that only supports \"*\" and \"?\" wildcards in the basename.\n    // Example: \"foo/bar/*baz??.*.js\"\n    // Argument `glob` may be a string or an array of strings.\n    // Returns an array of strings. Garbage in, garbage out.\n    function simple_glob(glob) {\n        if (Array.isArray(glob)) {\n            return [].concat.apply([], glob.map(simple_glob));\n        }\n        if (glob && glob.match(/[*?]/)) {\n            var dir = path.dirname(glob);\n            try {\n                var entries = fs.readdirSync(dir);\n            } catch (ex) {}\n            if (entries) {\n                var pattern = \"^\" + path.basename(glob)\n                    .replace(/[.+^$[\\]\\\\(){}]/g, \"\\\\$&\")\n                    .replace(/\\*/g, \"[^/\\\\\\\\]*\")\n                    .replace(/\\?/g, \"[^/\\\\\\\\]\") + \"$\";\n                var mod = process.platform === \"win32\" ? \"i\" : \"\";\n                var rx = new RegExp(pattern, mod);\n                var results = entries.filter(function(name) {\n                    return rx.test(name);\n                }).map(function(name) {\n                    return path.join(dir, name);\n                });\n                if (results.length) return results;\n            }\n        }\n        return [ glob ];\n    }\n\n    function read_file(path, default_value) {\n        try {\n            return fs.readFileSync(path, \"utf8\");\n        } catch (ex) {\n            if ((ex.code == \"ENOENT\" || ex.code == \"ENAMETOOLONG\") && default_value != null) return default_value;\n            fatal(ex);\n        }\n    }\n\n    function parse_js(flag) {\n        return function(value, options) {\n            options = options || {};\n            try {\n                walk(parse(value, { expression: true }), node => {\n                    if (node instanceof AST_Assign) {\n                        var name = node.left.print_to_string();\n                        var value = node.right;\n                        if (flag) {\n                            options[name] = value;\n                        } else if (value instanceof AST_Array) {\n                            options[name] = value.elements.map(to_string);\n                        } else if (value instanceof AST_RegExp) {\n                            value = value.value;\n                            options[name] = new RegExp(value.source, value.flags);\n                        } else {\n                            options[name] = to_string(value);\n                        }\n                        return true;\n                    }\n                    if (node instanceof AST_Symbol || node instanceof AST_PropAccess) {\n                        var name = node.print_to_string();\n                        options[name] = true;\n                        return true;\n                    }\n                    if (!(node instanceof AST_Sequence)) throw node;\n\n                    function to_string(value) {\n                        return value instanceof AST_Constant ? value.getValue() : value.print_to_string({\n                            quote_keys: true\n                        });\n                    }\n                });\n            } catch(ex) {\n                if (flag) {\n                    fatal(\"Error parsing arguments for '\" + flag + \"': \" + value);\n                } else {\n                    options[value] = null;\n                }\n            }\n            return options;\n        };\n    }\n\n    function symdef(def) {\n        var ret = (1e6 + def.id) + \" \" + def.name;\n        if (def.mangled_name) ret += \" \" + def.mangled_name;\n        return ret;\n    }\n\n    function collect_from_map(map, callback) {\n        var result = [];\n        map.forEach(function (def) {\n            result.push(callback(def));\n        });\n        return result;\n    }\n\n    function format_object(obj) {\n        var lines = [];\n        var padding = \"\";\n        Object.keys(obj).map(function(name) {\n            if (padding.length < name.length) padding = Array(name.length + 1).join(\" \");\n            return [ name, JSON.stringify(obj[name]) ];\n        }).forEach(function(tokens) {\n            lines.push(\"  \" + tokens[0] + padding.slice(tokens[0].length - 2) + tokens[1]);\n        });\n        return lines.join(\"\\n\");\n    }\n\n    function print_error(msg) {\n        process.stderr.write(msg);\n        process.stderr.write(\"\\n\");\n    }\n\n    function describe_ast() {\n        var out = OutputStream({ beautify: true });\n        function doitem(ctor) {\n            out.print(\"AST_\" + ctor.TYPE);\n            const props = ctor.SELF_PROPS.filter(prop => !/^\\$/.test(prop));\n\n            if (props.length > 0) {\n                out.space();\n                out.with_parens(function() {\n                    props.forEach(function(prop, i) {\n                        if (i) out.space();\n                        out.print(prop);\n                    });\n                });\n            }\n\n            if (ctor.documentation) {\n                out.space();\n                out.print_string(ctor.documentation);\n            }\n\n            if (ctor.SUBCLASSES.length > 0) {\n                out.space();\n                out.with_block(function() {\n                    ctor.SUBCLASSES.forEach(function(ctor) {\n                        out.indent();\n                        doitem(ctor);\n                        out.newline();\n                    });\n                });\n            }\n        }\n        doitem(AST_Node);\n        return out + \"\\n\";\n    }\n}\n", "import \"./lib/transform.js\";\nimport \"./lib/mozilla-ast.js\";\nimport { minify } from \"./lib/minify.js\";\n\nexport { minify } from \"./lib/minify.js\";\nexport { run_cli as _run_cli } from \"./lib/cli.js\";\n\nexport async function _default_options() {\n    const defs = {};\n\n    Object.keys(infer_options({ 0: 0 })).forEach((component) => {\n        const options = infer_options({\n            [component]: {0: 0}\n        });\n\n        if (options) defs[component] = options;\n    });\n    return defs;\n}\n\nasync function infer_options(options) {\n    try {\n        await minify(\"\", options);\n    } catch (error) {\n        return error.defs;\n    }\n}\n"],
  "mappings": "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,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,KAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,KAAK,IAAI,KAAK,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,KAAK,GAAG,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,MAAM,IAAI,IAAI,MAAM,IAAI,GAAG,MAAM,KAAK,MAAM,KAAK,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,MAAM,GAAG,MAAM,IAAI,GAAG,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK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",
  "names": ["sortComparator", "url", "resolve", "resolveUri", "COLUMN", "SOURCES_INDEX", "SOURCE_LINE", "SOURCE_COLUMN", "NAMES_INDEX", "SourceMapConsumer", "SourceMapGenerator", "global", "exports", "i", "TokenType", "Position", "SourceLocation", "Parser", "parse", "ref", "parseExpressionAt", "tokenizer", "DestructuringErrors", "list", "ecmaVersion", "TokContext", "Scope", "Node", "RegExpValidationState", "Token", "MAP", "valid", "directives", "statement", "ex", "start", "object_or_destructuring_", "name", "type", "call", "AST_Node", "self", "AST_Statement", "AST_Debugger", "AST_Directive", "AST_SimpleStatement", "push", "AST_Block", "AST_BlockStatement", "AST_EmptyStatement", "AST_StatementWithBody", "AST_LabeledStatement", "node", "AST_IterationStatement", "AST_DWLoop", "AST_Do", "AST_While", "AST_For", "AST_ForIn", "AST_ForOf", "AST_With", "AST_Scope", "AST_Toplevel", "AST_Expansion", "AST_Lambda", "AST_Accessor", "AST_Function", "AST_Arrow", "AST_Defun", "AST_Destructuring", "AST_PrefixedTemplateString", "AST_TemplateString", "AST_TemplateSegment", "AST_Jump", "AST_Exit", "AST_Return", "AST_Throw", "AST_LoopControl", "AST_Break", "AST_Continue", "AST_Await", "AST_Yield", "AST_If", "AST_Switch", "AST_SwitchBranch", "AST_Default", "AST_Case", "AST_Try", "AST_TryBlock", "AST_Catch", "AST_Finally", "AST_Definitions", "AST_Var", "AST_Let", "AST_Const", "AST_VarDef", "AST_NameMapping", "AST_Import", "AST_ImportMeta", "AST_Export", "AST_Call", "AST_New", "AST_Sequence", "AST_PropAccess", "AST_Dot", "AST_DotHash", "AST_Sub", "AST_Chain", "AST_Unary", "AST_UnaryPrefix", "AST_UnaryPostfix", "AST_Binary", "AST_Conditional", "AST_Assign", "AST_DefaultAssign", "AST_Array", "AST_Object", "AST_ObjectProperty", "AST_ObjectKeyVal", "AST_PrivateSetter", "AST_PrivateGetter", "AST_ObjectSetter", "AST_ObjectGetter", "AST_ConciseMethod", "AST_PrivateMethod", "AST_Class", "AST_ClassProperty", "AST_ClassPrivateProperty", "AST_PrivateIn", "AST_DefClass", "AST_ClassStaticBlock", "AST_ClassExpression", "AST_Symbol", "AST_NewTarget", "AST_SymbolDeclaration", "AST_SymbolVar", "AST_SymbolBlockDeclaration", "AST_SymbolConst", "AST_SymbolLet", "AST_SymbolFunarg", "AST_SymbolDefun", "AST_SymbolMethod", "AST_SymbolClassProperty", "AST_SymbolLambda", "AST_SymbolDefClass", "AST_SymbolClass", "AST_SymbolCatch", "AST_SymbolImport", "AST_SymbolImportForeign", "AST_Label", "AST_SymbolRef", "AST_SymbolExport", "AST_SymbolExportForeign", "AST_LabelRef", "AST_SymbolPrivateProperty", "AST_This", "AST_Super", "AST_Constant", "AST_String", "AST_Number", "AST_BigInt", "AST_RegExp", "AST_Atom", "AST_Null", "AST_NaN", "AST_Undefined", "AST_Hole", "AST_Infinity", "AST_Boolean", "AST_False", "AST_True", "self", "kind", "self", "printed_comments", "node", "gc_scope", "nodetype", "best_of", "save_scope", "sym", "scope", "base54", "value", "first_in_statement", "self", "first_in_statement", "self", "node", "def", "node_def", "init", "sym", "trim", "node", "in_loop", "in_try", "statements", "compressor", "def", "i", "arg", "lhs", "lvalues", "args", "self", "stat", "value", "ab", "j", "body", "node", "p", "exprs", "self", "args", "stat", "exp", "mangle_options", "self", "def", "value", "branch", "i", "default_index", "arg", "trim", "elements", "el", "node", "rr", "level", "parent", "prop", "compressor", "name", "node", "toplevel", "name", "run_cli", "result", "path", "options", "value", "ctor"]
}
